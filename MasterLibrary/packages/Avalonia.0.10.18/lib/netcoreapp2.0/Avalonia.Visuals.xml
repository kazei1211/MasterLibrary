<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Visuals</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Animation.Animators.BaseBrushAnimator">
            <summary>
            Animator that handles all animations on properties
            with <see cref="T:Avalonia.Media.IBrush"/> as their type and
            redirect them to the properly registered
            animators in this class.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.BaseBrushAnimator.RegisterBrushAnimator``1(System.Func{System.Type,System.Boolean})">
            <summary>
            Register an <see cref="T:Avalonia.Animation.Animators.Animator`1"/> that handles a specific
            <see cref="T:Avalonia.Media.IBrush"/>'s descendant value type.
            </summary>
            <param name="condition">
            The condition to which the <see cref="T:Avalonia.Animation.Animators.Animator`1"/>
            is to be activated and used.
            </param>
            <typeparam name="TAnimator">
            The type of the animator to instantiate.
            </typeparam>
        </member>
        <member name="M:Avalonia.Animation.Animators.BaseBrushAnimator.Apply(Avalonia.Animation.Animation,Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Animators.BaseBrushAnimator.Interpolate(System.Double,Avalonia.Media.IBrush,Avalonia.Media.IBrush)">
            <summary>
            Fallback implementation of <see cref="T:Avalonia.Media.IBrush"/> animation.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.ColorAnimator">
            <summary>
            Animator that interpolates <see cref="T:Avalonia.Media.Color"/> through 
            gamma sRGB color space for better visual result.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.CornerRadiusAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.CornerRadius"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.GradientBrushAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Media.SolidColorBrush"/> values. 
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.PointAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Point"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.RectAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Rect"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.RelativePointAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.RelativePoint"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.SizeAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Size"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.ISolidColorBrushAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Media.SolidColorBrush"/> values. 
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.ThicknessAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Thickness"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.Animators.TransformAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Media.Transform"/> properties.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.Animators.TransformAnimator.Apply(Avalonia.Animation.Animation,Avalonia.Animation.Animatable,Avalonia.Animation.IClock,System.IObservable{System.Boolean},System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Animation.Animators.TransformAnimator.Interpolate(System.Double,System.Double,System.Double)">
            <inheritdocs/> 
        </member>
        <member name="T:Avalonia.Animation.Animators.VectorAnimator">
            <summary>
            Animator that handles <see cref="T:Avalonia.Vector"/> properties.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.CompositePageTransition">
            <summary>
            Defines a composite page transition that can be used to combine multiple transitions.
            </summary>
            <remarks>
            <para>
            Instantiate the <see cref="T:Avalonia.Animation.CompositePageTransition" /> in XAML and initialize the
            <see cref="T:Avalonia.Animation.Transitions" /> property in order to have many animations triggered at once.
            For example, you can combine <see cref="T:Avalonia.Animation.CrossFade"/> and <see cref="T:Avalonia.Animation.PageSlide"/>.
            <code>
            <![CDATA[
            <reactiveUi:RoutedViewHost Router="{Binding Router}">
              <reactiveUi:RoutedViewHost.PageTransition>
                <CompositePageTransition>
                  <PageSlide Duration="0.5" />
                  <CrossFade Duration="0.5" />
                </CompositePageTransition>
              </reactiveUi:RoutedViewHost.PageTransition>
            </reactiveUi:RoutedViewHost>
            ]]>
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Animation.CompositePageTransition.PageTransitions">
            <summary>
            Gets or sets the transitions to be executed. Can be defined from XAML.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CompositePageTransition.Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Animation.CrossFade">
            <summary>
            Defines a cross-fade animation between two <see cref="T:Avalonia.VisualTree.IVisual"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CrossFade.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.CrossFade"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CrossFade.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.CrossFade"/> class.
            </summary>
            <param name="duration">The duration of the animation.</param>
        </member>
        <member name="P:Avalonia.Animation.CrossFade.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.CrossFade.FadeInEasing">
            <summary>
            Gets or sets element entrance easing.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.CrossFade.FadeOutEasing">
            <summary>
            Gets or sets element exit easing.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.CrossFade.Start(Avalonia.Visual,Avalonia.Visual,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Avalonia.Animation.CrossFade.Start(Avalonia.Visual,Avalonia.Visual,System.Threading.CancellationToken)" />
        </member>
        <member name="M:Avalonia.Animation.CrossFade.Avalonia#Animation#IPageTransition#Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the animation.
            </summary>
            <param name="from">
            The control that is being transitioned away from. May be null.
            </param>
            <param name="to">
            The control that is being transitioned to. May be null.
            </param>
            <param name="forward">
            Unused for cross-fades.
            </param>
            <param name="cancellationToken">allowed cancel transition</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that tracks the progress of the animation.
            </returns>
        </member>
        <member name="T:Avalonia.Animation.IPageTransition">
            <summary>
            Interface for animations that transition between two pages.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.IPageTransition.Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the animation.
            </summary>
            <param name="from">
            The control that is being transitioned away from. May be null.
            </param>
            <param name="to">
            The control that is being transitioned to. May be null.
            </param>
            <param name="forward">
            If the animation is bidirectional, controls the direction of the animation.
            </param>
            <param name="cancellationToken">
            Animation cancellation.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that tracks the progress of the animation.
            </returns>
        </member>
        <member name="T:Avalonia.Animation.PageSlide">
            <summary>
            Transitions between two pages by sliding them horizontally.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.PageSlide.SlideAxis">
            <summary>
            The axis on which the PageSlide should occur
            </summary>
        </member>
        <member name="M:Avalonia.Animation.PageSlide.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.PageSlide"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.PageSlide.#ctor(System.TimeSpan,Avalonia.Animation.PageSlide.SlideAxis)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Animation.PageSlide"/> class.
            </summary>
            <param name="duration">The duration of the animation.</param>
            <param name="orientation">The axis on which the animation should occur</param>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.Duration">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.Orientation">
            <summary>
            Gets the duration of the animation.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.SlideInEasing">
            <summary>
            Gets or sets element entrance easing.
            </summary>
        </member>
        <member name="P:Avalonia.Animation.PageSlide.SlideOutEasing">
            <summary>
            Gets or sets element exit easing.
            </summary>
        </member>
        <member name="M:Avalonia.Animation.PageSlide.Start(Avalonia.Visual,Avalonia.Visual,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Animation.PageSlide.GetVisualParent(Avalonia.VisualTree.IVisual,Avalonia.VisualTree.IVisual)">
            <summary>
            Gets the common visual parent of the two control.
            </summary>
            <param name="from">The from control.</param>
            <param name="to">The to control.</param>
            <returns>The common parent.</returns>
            <exception cref="T:System.ArgumentException">
            The two controls do not share a common parent.
            </exception>
            <remarks>
            Any one of the parameters may be null, but not both.
            </remarks>
        </member>
        <member name="T:Avalonia.Animation.BoxShadowsTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Media.BoxShadows"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.BrushTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Media.IBrush"/> type.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.ColorTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Media.Color"/> type.
            </summary>
        </member>
        <member name="T:Avalonia.Animation.CornerRadiusTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.CornerRadius"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.PointTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Point"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.RelativePointTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.RelativePoint"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.SizeTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Size"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.ThicknessTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Thickness"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.Animation.VectorTransition">
            <summary>
            Transition class that handles <see cref="T:Avalonia.AvaloniaProperty"/> with <see cref="T:Avalonia.Vector"/> type.
            </summary>  
        </member>
        <member name="T:Avalonia.AvaloniaPropertyExtensions">
            <summary>
            Extensions for <see cref="T:Avalonia.AvaloniaProperty"/>.
            </summary>
        </member>
        <member name="M:Avalonia.AvaloniaPropertyExtensions.CanValueAffectRender(Avalonia.AvaloniaProperty)">
            <summary>
            Checks if values of given property can affect rendering (via <see cref="T:Avalonia.Media.IAffectsRender"/>).
            </summary>
            <param name="property">Property to check.</param>
        </member>
        <member name="T:Avalonia.CornerRadius">
            <summary>
            Represents the radii of a rectangle's corners.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.TopLeft">
            <summary>
            Radius of the top left corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.TopRight">
            <summary>
            Radius of the top right corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.BottomRight">
            <summary>
            Radius of the bottom right corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.BottomLeft">
            <summary>
            Radius of the bottom left corner.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.IsEmpty">
            <summary>
            Gets a value indicating whether all corner radii are set to 0.
            </summary>
        </member>
        <member name="P:Avalonia.CornerRadius.IsUniform">
            <summary>
            Gets a value indicating whether all corner radii are equal.
            </summary>
        </member>
        <member name="M:Avalonia.CornerRadius.Equals(Avalonia.CornerRadius)">
            <summary>
            Returns a boolean indicating whether the corner radius is equal to the other given corner radius.
            </summary>
            <param name="other">The other corner radius to test equality against.</param>
            <returns>True if this corner radius is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.CornerRadius.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this corner radius instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this corner radius; False otherwise.</returns>
        </member>
        <member name="T:Avalonia.Matrix">
            <summary>
            A 2x3 matrix.
            </summary>
        </member>
        <member name="M:Avalonia.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Matrix"/> struct.
            </summary>
            <param name="m11">The first element of the first row.</param>
            <param name="m12">The second element of the first row.</param>
            <param name="m21">The first element of the second row.</param>
            <param name="m22">The second element of the second row.</param>
            <param name="offsetX">The first element of the third row.</param>
            <param name="offsetY">The second element of the third row.</param>
        </member>
        <member name="P:Avalonia.Matrix.Identity">
            <summary>
            Returns the multiplicative identity matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.IsIdentity">
            <summary>
            Returns whether the matrix is the identity matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.HasInverse">
            <summary>
            HasInverse Property - returns true if this matrix is invertible, false otherwise.
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M11">
            <summary>
            The first element of the first row
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M12">
            <summary>
            The second element of the first row
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M21">
            <summary>
            The first element of the second row
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M22">
            <summary>
            The second element of the second row
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M31">
            <summary>
            The first element of the third row
            </summary>
        </member>
        <member name="P:Avalonia.Matrix.M32">
            <summary>
            The second element of the third row
            </summary>
        </member>
        <member name="M:Avalonia.Matrix.op_Multiply(Avalonia.Matrix,Avalonia.Matrix)">
            <summary>
            Multiplies two matrices together and returns the resulting matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.op_UnaryNegation(Avalonia.Matrix)">
            <summary>
            Negates the given matrix by multiplying all values by -1.
            </summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.op_Equality(Avalonia.Matrix,Avalonia.Matrix)">
            <summary>
            Returns a boolean indicating whether the given matrices are equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Matrix.op_Inequality(Avalonia.Matrix,Avalonia.Matrix)">
            <summary>
            Returns a boolean indicating whether the given matrices are not equal.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateRotation(System.Double)">
            <summary>
            Creates a rotation matrix using the given rotation in radians.
            </summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateSkew(System.Double,System.Double)">
            <summary>
            Creates a skew matrix from the given axis skew angles in radians.
            </summary>
            <param name="xAngle">The amount of skew along the X-axis, in radians.</param>
            <param name="yAngle">The amount of skew along the Y-axis, in radians.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateScale(System.Double,System.Double)">
            <summary>
            Creates a scale matrix from the given X and Y components.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateScale(Avalonia.Vector)">
            <summary>
            Creates a scale matrix from the given vector scale.
            </summary>
            <param name="scales">The scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateTranslation(Avalonia.Vector)">
            <summary>
            Creates a translation matrix from the given vector.
            </summary>
            <param name="position">The translation position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.CreateTranslation(System.Double,System.Double)">
            <summary>
            Creates a translation matrix from the given X and Y components.
            </summary>
            <param name="xPosition">The X position.</param>
            <param name="yPosition">The Y position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.ToRadians(System.Double)">
            <summary>
            Converts an angle in degrees to radians.
            </summary>
            <param name="angle">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Append(Avalonia.Matrix)">
            <summary>
            Appends another matrix as post-multiplication operation.
            Equivalent to this * value;
            </summary>
            <param name="value">A matrix.</param>
            <returns>Post-multiplied matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Prepend(Avalonia.Matrix)">
            <summary>
            Prpends another matrix as pre-multiplication operation.
            Equivalent to value * this;
            </summary>
            <param name="value">A matrix.</param>
            <returns>Pre-multiplied matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.GetDeterminant">
            <summary>
            Calculates the determinant for this matrix.
            </summary>
            <returns>The determinant.</returns>
            <remarks>
            The determinant is calculated by expanding the matrix with a third column whose
            values are (0,0,1).
            </remarks>
        </member>
        <member name="M:Avalonia.Matrix.Equals(Avalonia.Matrix)">
            <summary>
            Returns a boolean indicating whether the matrix is equal to the other given matrix.
            </summary>
            <param name="other">The other matrix to test equality against.</param>
            <returns>True if this matrix is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this matrix instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Matrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Matrix.ToString">
            <summary>
            Returns a String representing this matrix instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Avalonia.Matrix.TryInvert(Avalonia.Matrix@)">
            <summary>
            Attempts to invert the Matrix.
            </summary>
            <returns>The inverted matrix or <see langword="null"/> when matrix is not invertible.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Invert">
            <summary>
            Inverts the Matrix.
            </summary>
            <exception cref="T:System.InvalidOperationException">Matrix is not invertible.</exception>
            <returns>The inverted matrix.</returns>
        </member>
        <member name="M:Avalonia.Matrix.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Matrix"/> string.
            </summary>
            <param name="s">Six comma-delimited double values (m11, m12, m21, m22, offsetX, offsetY) that describe the new <see cref="T:Avalonia.Matrix"/></param>
            <returns>The <see cref="T:Avalonia.Matrix"/>.</returns>
        </member>
        <member name="M:Avalonia.Matrix.TryDecomposeTransform(Avalonia.Matrix,Avalonia.Matrix.Decomposed@)">
            <summary>
            Decomposes given matrix into transform operations.
            </summary>
            <param name="matrix">Matrix to decompose.</param>
            <param name="decomposed">Decomposed matrix.</param>
            <returns>The status of the operation.</returns>
        </member>
        <member name="T:Avalonia.Media.AcrylicBackgroundSource">
            <summary>
            Background Sources for Acrylic.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AcrylicBackgroundSource.None">
            <summary>
            The acrylic has no background.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AcrylicBackgroundSource.Digger">
            <summary>
            Cuts through all render layers to reveal the window background.
            This means if your window is transparent or blurred it 
            will be blended with the material.
            </summary>
        </member>
        <member name="T:Avalonia.Media.AlignmentX">
            <summary>
            Describes how content is positioned horizontally in a container.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentX.Left">
            <summary>
            The contents align themselves with the left of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentX.Center">
            <summary>
            The contents align themselves with the center of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentX.Right">
            <summary>
            The contents align themselves with the right of the container
            </summary>
        </member>
        <member name="T:Avalonia.Media.AlignmentY">
            <summary>
            Describes how content is positioned vertically in a container.
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentY.Top">
            <summary>
            The contents align themselves with the top of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentY.Center">
            <summary>
            The contents align themselves with the center of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.AlignmentY.Bottom">
            <summary>
            The contents align themselves with the bottom of the container
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.IsLargeArcProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.IsLargeArc"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.PointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.Point"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.RotationAngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.RotationAngle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.SizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.Size"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ArcSegment.SweepDirectionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ArcSegment.SweepDirection"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.IsLargeArc">
            <summary>
            Gets or sets a value indicating whether this instance is large arc.
            </summary>
            <value>
            <c>true</c> if this instance is large arc; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.Point">
            <summary>
            Gets or sets the point.
            </summary>
            <value>
            The point.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>
            The rotation angle.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Avalonia.Media.ArcSegment.SweepDirection">
            <summary>
            Gets or sets the sweep direction.
            </summary>
            <value>
            The sweep direction.
            </value>
        </member>
        <member name="F:Avalonia.Media.BezierSegment.Point1Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.BezierSegment.Point1"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.BezierSegment.Point2Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.BezierSegment.Point2"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.BezierSegment.Point3Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.BezierSegment.Point3"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.BezierSegment.Point1">
            <summary>
            Gets or sets the point1.
            </summary>
            <value>
            The point1.
            </value>
        </member>
        <member name="P:Avalonia.Media.BezierSegment.Point2">
            <summary>
            Gets or sets the point2.
            </summary>
            <value>
            The point2.
            </value>
        </member>
        <member name="P:Avalonia.Media.BezierSegment.Point3">
            <summary>
            Gets or sets the point3.
            </summary>
            <value>
            The point3.
            </value>
        </member>
        <member name="T:Avalonia.Media.Brush">
            <summary>
            Describes how an area is painted.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Brush.OpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Brush.Opacity"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Media.Brush.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Brush.Opacity">
            <summary>
            Gets or sets the opacity of the brush.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Brush.Parse(System.String)">
            <summary>
            Parses a brush string.
            </summary>
            <param name="s">The brush string.</param>
            <returns>The <see cref="T:Avalonia.Media.Color"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Brush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Brush.AffectsRender``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the brush's visual representation.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a brush's static constructor, any change to the
            property will cause the <see cref="E:Avalonia.Media.Brush.Invalidated"/> event to be raised on the brush.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.Brush.RaiseInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Media.Brush.Invalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Media.BrushConverter">
            <summary>
            Creates an <see cref="T:Avalonia.Media.IBrush"/> from a string representation.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Brushes">
            <summary>
            Predefined brushes.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.AliceBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.AliceBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.AntiqueWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.AntiqueWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Aqua">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Aqua"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Aquamarine">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Aquamarine"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Azure">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Azure"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Beige">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Beige"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Bisque">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Bisque"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Black">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Black"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.BlanchedAlmond">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.BlanchedAlmond"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Blue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Blue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.BlueViolet">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.BlueViolet"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Brown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Brown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.BurlyWood">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.BurlyWood"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.CadetBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.CadetBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Chartreuse">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Chartreuse"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Chocolate">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Chocolate"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Coral">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Coral"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.CornflowerBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.CornflowerBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Cornsilk">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Cornsilk"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Crimson">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Crimson"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Cyan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Cyan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkCyan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkCyan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkGoldenrod">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkGoldenrod"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkKhaki">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkKhaki"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkMagenta">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkMagenta"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkOliveGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkOliveGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkOrange">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkOrange"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkOrchid">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkOrchid"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSalmon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSalmon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSlateBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSlateBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkSlateGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkSlateGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkTurquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkTurquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DarkViolet">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DarkViolet"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DeepPink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DeepPink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DeepSkyBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DeepSkyBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DimGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DimGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.DodgerBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.DodgerBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Firebrick">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Firebrick"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.FloralWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.FloralWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.ForestGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.ForestGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Fuchsia">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Fuchsia"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Gainsboro">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Gainsboro"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.GhostWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.GhostWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Gold">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Gold"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Goldenrod">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Goldenrod"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Gray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Gray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Green">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Green"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.GreenYellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.GreenYellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Honeydew">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Honeydew"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.HotPink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.HotPink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.IndianRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.IndianRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Indigo">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Indigo"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Ivory">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Ivory"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Khaki">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Khaki"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Lavender">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Lavender"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LavenderBlush">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LavenderBlush"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LawnGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LawnGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LemonChiffon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LemonChiffon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightCoral">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightCoral"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightCyan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightCyan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightGoldenrodYellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightGoldenrodYellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightPink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightPink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSalmon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSalmon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSkyBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSkyBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSlateGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSlateGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightSteelBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightSteelBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LightYellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LightYellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Lime">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Lime"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.LimeGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.LimeGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Linen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Linen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Magenta">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Magenta"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Maroon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Maroon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumAquamarine">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumAquamarine"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumOrchid">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumOrchid"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumPurple">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumPurple"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumSeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumSeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumSlateBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumSlateBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumSpringGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumSpringGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumTurquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumTurquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MediumVioletRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MediumVioletRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MidnightBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MidnightBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MintCream">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MintCream"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.MistyRose">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.MistyRose"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Moccasin">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Moccasin"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.NavajoWhite">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.NavajoWhite"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Navy">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Navy"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.OldLace">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.OldLace"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Olive">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Olive"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.OliveDrab">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.OliveDrab"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Orange">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Orange"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.OrangeRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.OrangeRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Orchid">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Orchid"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleGoldenrod">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleGoldenrod"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleTurquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleTurquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PaleVioletRed">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PaleVioletRed"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PapayaWhip">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PapayaWhip"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PeachPuff">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PeachPuff"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Peru">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Peru"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Pink">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Pink"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Plum">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Plum"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.PowderBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.PowderBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Purple">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Purple"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Red">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Red"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.RosyBrown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.RosyBrown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.RoyalBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.RoyalBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SaddleBrown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SaddleBrown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Salmon">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Salmon"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SandyBrown">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SandyBrown"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SeaGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SeaGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SeaShell">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SeaShell"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Sienna">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Sienna"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Silver">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Silver"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SkyBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SkyBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SlateBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SlateBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SlateGray">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SlateGray"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Snow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Snow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SpringGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SpringGreen"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.SteelBlue">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.SteelBlue"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Tan">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Tan"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Teal">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Teal"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Thistle">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Thistle"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Tomato">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Tomato"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Transparent">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Transparent"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Turquoise">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Turquoise"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Violet">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Violet"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Wheat">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Wheat"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.White">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.White"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.WhiteSmoke">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.WhiteSmoke"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.Yellow">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.Yellow"/> colored brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Brushes.YellowGreen">
            <summary>
            Gets an <see cref="P:Avalonia.Media.Colors.YellowGreen"/> colored brush.
            </summary>
        </member>
        <member name="T:Avalonia.Media.BrushExtensions">
            <summary>
            Extension methods for brush classes.
            </summary>
        </member>
        <member name="M:Avalonia.Media.BrushExtensions.ToImmutable(Avalonia.Media.IBrush)">
            <summary>
            Converts a brush to an immutable brush.
            </summary>
            <param name="brush">The brush.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.IMutableBrush.ToImmutable"/> if the brush is mutable,
            otherwise <paramref name="brush"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.BrushExtensions.ToImmutable(Avalonia.Media.IDashStyle)">
            <summary>
            Converts a dash style to an immutable dash style.
            </summary>
            <param name="style">The dash style.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.DashStyle.ToImmutable"/> if the style is mutable,
            otherwise <paramref name="style"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.BrushExtensions.ToImmutable(Avalonia.Media.IPen)">
            <summary>
            Converts a pen to an immutable pen.
            </summary>
            <param name="pen">The pen.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.Pen.ToImmutable"/> if the brush is mutable,
            otherwise <paramref name="pen"/>.
            </returns>
        </member>
        <member name="T:Avalonia.Media.CharacterHit">
            <summary>
                Represents information about a character hit within a glyph run.
            </summary>
            <remarks>
                The CharacterHit structure provides information about the index of the first
                character that got hit as well as information about leading or trailing edge.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.CharacterHit.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Avalonia.Media.CharacterHit"/> structure.
            </summary>
            <param name="firstCharacterIndex">Index of the first character that got hit.</param>
            <param name="trailingLength">In the case of a leading edge, this value is 0. In the case of a trailing edge,
            this value is the number of code points until the next valid caret position.</param>
        </member>
        <member name="P:Avalonia.Media.CharacterHit.FirstCharacterIndex">
            <summary>
                Gets the index of the first character that got hit.
            </summary>
        </member>
        <member name="P:Avalonia.Media.CharacterHit.TrailingLength">
            <summary>
                Gets the trailing length value for the character that got hit.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Color">
            <summary>
            An ARGB color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.A">
            <summary>
            Gets the Alpha component of the color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.R">
            <summary>
            Gets the Red component of the color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.G">
            <summary>
            Gets the Green component of the color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Color.B">
            <summary>
            Gets the Blue component of the color.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Color"/> from alpha, red, green and blue components.
            </summary>
            <param name="a">The alpha component.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Color"/> from red, green and blue components.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.FromUInt32(System.UInt32)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Color"/> from an integer.
            </summary>
            <param name="value">The integer value.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.Parse(System.String)">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <returns>The <see cref="T:Avalonia.Media.Color"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <returns>The <see cref="T:Avalonia.Media.Color"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.TryParse(System.String,Avalonia.Media.Color@)">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <param name="color">The parsed color</param>
            <returns>The status of the operation.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.TryParse(System.ReadOnlySpan{System.Char},Avalonia.Media.Color@)">
            <summary>
            Parses a color string.
            </summary>
            <param name="s">The color string.</param>
            <param name="color">The parsed color</param>
            <returns>The status of the operation.</returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToString">
            <summary>
            Returns the string representation of the color.
            </summary>
            <returns>
            The string representation of the color.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Color.ToUint32">
            <summary>
            Returns the integer representation of the color.
            </summary>
            <returns>
            The integer representation of the color.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Color.Equals(Avalonia.Media.Color)">
            <summary>
            Check if two colors are equal.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Colors">
            <summary>
            Defines a set of predefined colors.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.AliceBlue">
            <summary>
            Gets a color with an ARGB value of #fff0f8ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.AntiqueWhite">
            <summary>
            Gets a color with an ARGB value of #fffaebd7.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Aqua">
            <summary>
            Gets a color with an ARGB value of #ff00ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Aquamarine">
            <summary>
            Gets a color with an ARGB value of #ff7fffd4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Azure">
            <summary>
            Gets a color with an ARGB value of #fff0ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Beige">
            <summary>
            Gets a color with an ARGB value of #fff5f5dc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Bisque">
            <summary>
            Gets a color with an ARGB value of #ffffe4c4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Black">
            <summary>
            Gets a color with an ARGB value of #ff000000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.BlanchedAlmond">
            <summary>
            Gets a color with an ARGB value of #ffffebcd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Blue">
            <summary>
            Gets a color with an ARGB value of #ff0000ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.BlueViolet">
            <summary>
            Gets a color with an ARGB value of #ff8a2be2.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Brown">
            <summary>
            Gets a color with an ARGB value of #ffa52a2a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.BurlyWood">
            <summary>
            Gets a color with an ARGB value of #ffdeb887.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.CadetBlue">
            <summary>
            Gets a color with an ARGB value of #ff5f9ea0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Chartreuse">
            <summary>
            Gets a color with an ARGB value of #ff7fff00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Chocolate">
            <summary>
            Gets a color with an ARGB value of #ffd2691e.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Coral">
            <summary>
            Gets a color with an ARGB value of #ffff7f50.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.CornflowerBlue">
            <summary>
            Gets a color with an ARGB value of #ff6495ed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Cornsilk">
            <summary>
            Gets a color with an ARGB value of #fffff8dc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Crimson">
            <summary>
            Gets a color with an ARGB value of #ffdc143c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Cyan">
            <summary>
            Gets a color with an ARGB value of #ff00ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkBlue">
            <summary>
            Gets a color with an ARGB value of #ff00008b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkCyan">
            <summary>
            Gets a color with an ARGB value of #ff008b8b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkGoldenrod">
            <summary>
            Gets a color with an ARGB value of #ffb8860b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkGray">
            <summary>
            Gets a color with an ARGB value of #ffa9a9a9.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkGreen">
            <summary>
            Gets a color with an ARGB value of #ff006400.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkKhaki">
            <summary>
            Gets a color with an ARGB value of #ffbdb76b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkMagenta">
            <summary>
            Gets a color with an ARGB value of #ff8b008b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkOliveGreen">
            <summary>
            Gets a color with an ARGB value of #ff556b2f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkOrange">
            <summary>
            Gets a color with an ARGB value of #ffff8c00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkOrchid">
            <summary>
            Gets a color with an ARGB value of #ff9932cc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkRed">
            <summary>
            Gets a color with an ARGB value of #ff8b0000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSalmon">
            <summary>
            Gets a color with an ARGB value of #ffe9967a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff8fbc8f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSlateBlue">
            <summary>
            Gets a color with an ARGB value of #ff483d8b.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkSlateGray">
            <summary>
            Gets a color with an ARGB value of #ff2f4f4f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkTurquoise">
            <summary>
            Gets a color with an ARGB value of #ff00ced1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DarkViolet">
            <summary>
            Gets a color with an ARGB value of #ff9400d3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DeepPink">
            <summary>
            Gets a color with an ARGB value of #ffff1493.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DeepSkyBlue">
            <summary>
            Gets a color with an ARGB value of #ff00bfff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DimGray">
            <summary>
            Gets a color with an ARGB value of #ff696969.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.DodgerBlue">
            <summary>
            Gets a color with an ARGB value of #ff1e90ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Firebrick">
            <summary>
            Gets a color with an ARGB value of #ffb22222.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.FloralWhite">
            <summary>
            Gets a color with an ARGB value of #fffffaf0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.ForestGreen">
            <summary>
            Gets a color with an ARGB value of #ff228b22.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Fuchsia">
            <summary>
            Gets a color with an ARGB value of #ffff00ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Gainsboro">
            <summary>
            Gets a color with an ARGB value of #ffdcdcdc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.GhostWhite">
            <summary>
            Gets a color with an ARGB value of #fff8f8ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Gold">
            <summary>
            Gets a color with an ARGB value of #ffffd700.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Goldenrod">
            <summary>
            Gets a color with an ARGB value of #ffdaa520.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Gray">
            <summary>
            Gets a color with an ARGB value of #ff808080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Green">
            <summary>
            Gets a color with an ARGB value of #ff008000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.GreenYellow">
            <summary>
            Gets a color with an ARGB value of #ffadff2f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Honeydew">
            <summary>
            Gets a color with an ARGB value of #fff0fff0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.HotPink">
            <summary>
            Gets a color with an ARGB value of #ffff69b4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.IndianRed">
            <summary>
            Gets a color with an ARGB value of #ffcd5c5c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Indigo">
            <summary>
            Gets a color with an ARGB value of #ff4b0082.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Ivory">
            <summary>
            Gets a color with an ARGB value of #fffffff0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Khaki">
            <summary>
            Gets a color with an ARGB value of #fff0e68c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Lavender">
            <summary>
            Gets a color with an ARGB value of #ffe6e6fa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LavenderBlush">
            <summary>
            Gets a color with an ARGB value of #fffff0f5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LawnGreen">
            <summary>
            Gets a color with an ARGB value of #ff7cfc00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LemonChiffon">
            <summary>
            Gets a color with an ARGB value of #fffffacd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightBlue">
            <summary>
            Gets a color with an ARGB value of #ffadd8e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightCoral">
            <summary>
            Gets a color with an ARGB value of #fff08080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightCyan">
            <summary>
            Gets a color with an ARGB value of #ffe0ffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightGoldenrodYellow">
            <summary>
            Gets a color with an ARGB value of #fffafad2.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightGray">
            <summary>
            Gets a color with an ARGB value of #ffd3d3d3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightGreen">
            <summary>
            Gets a color with an ARGB value of #ff90ee90.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightPink">
            <summary>
            Gets a color with an ARGB value of #ffffb6c1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSalmon">
            <summary>
            Gets a color with an ARGB value of #ffffa07a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff20b2aa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSkyBlue">
            <summary>
            Gets a color with an ARGB value of #ff87cefa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSlateGray">
            <summary>
            Gets a color with an ARGB value of #ff778899.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightSteelBlue">
            <summary>
            Gets a color with an ARGB value of #ffb0c4de.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LightYellow">
            <summary>
            Gets a color with an ARGB value of #ffffffe0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Lime">
            <summary>
            Gets a color with an ARGB value of #ff00ff00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.LimeGreen">
            <summary>
            Gets a color with an ARGB value of #ff32cd32.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Linen">
            <summary>
            Gets a color with an ARGB value of #fffaf0e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Magenta">
            <summary>
            Gets a color with an ARGB value of #ffff00ff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Maroon">
            <summary>
            Gets a color with an ARGB value of #ff800000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumAquamarine">
            <summary>
            Gets a color with an ARGB value of #ff66cdaa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumBlue">
            <summary>
            Gets a color with an ARGB value of #ff0000cd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumOrchid">
            <summary>
            Gets a color with an ARGB value of #ffba55d3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumPurple">
            <summary>
            Gets a color with an ARGB value of #ff9370db.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumSeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff3cb371.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumSlateBlue">
            <summary>
            Gets a color with an ARGB value of #ff7b68ee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumSpringGreen">
            <summary>
            Gets a color with an ARGB value of #ff00fa9a.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumTurquoise">
            <summary>
            Gets a color with an ARGB value of #ff48d1cc.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MediumVioletRed">
            <summary>
            Gets a color with an ARGB value of #ffc71585.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MidnightBlue">
            <summary>
            Gets a color with an ARGB value of #ff191970.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MintCream">
            <summary>
            Gets a color with an ARGB value of #fff5fffa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.MistyRose">
            <summary>
            Gets a color with an ARGB value of #ffffe4e1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Moccasin">
            <summary>
            Gets a color with an ARGB value of #ffffe4b5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.NavajoWhite">
            <summary>
            Gets a color with an ARGB value of #ffffdead.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Navy">
            <summary>
            Gets a color with an ARGB value of #ff000080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.OldLace">
            <summary>
            Gets a color with an ARGB value of #fffdf5e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Olive">
            <summary>
            Gets a color with an ARGB value of #ff808000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.OliveDrab">
            <summary>
            Gets a color with an ARGB value of #ff6b8e23.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Orange">
            <summary>
            Gets a color with an ARGB value of #ffffa500.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.OrangeRed">
            <summary>
            Gets a color with an ARGB value of #ffff4500.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Orchid">
            <summary>
            Gets a color with an ARGB value of #ffda70d6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleGoldenrod">
            <summary>
            Gets a color with an ARGB value of #ffeee8aa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleGreen">
            <summary>
            Gets a color with an ARGB value of #ff98fb98.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleTurquoise">
            <summary>
            Gets a color with an ARGB value of #ffafeeee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PaleVioletRed">
            <summary>
            Gets a color with an ARGB value of #ffdb7093.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PapayaWhip">
            <summary>
            Gets a color with an ARGB value of #ffffefd5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PeachPuff">
            <summary>
            Gets a color with an ARGB value of #ffffdab9.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Peru">
            <summary>
            Gets a color with an ARGB value of #ffcd853f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Pink">
            <summary>
            Gets a color with an ARGB value of #ffffc0cb.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Plum">
            <summary>
            Gets a color with an ARGB value of #ffdda0dd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.PowderBlue">
            <summary>
            Gets a color with an ARGB value of #ffb0e0e6.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Purple">
            <summary>
            Gets a color with an ARGB value of #ff800080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Red">
            <summary>
            Gets a color with an ARGB value of #ffff0000.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.RosyBrown">
            <summary>
            Gets a color with an ARGB value of #ffbc8f8f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.RoyalBlue">
            <summary>
            Gets a color with an ARGB value of #ff4169e1.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SaddleBrown">
            <summary>
            Gets a color with an ARGB value of #ff8b4513.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Salmon">
            <summary>
            Gets a color with an ARGB value of #fffa8072.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SandyBrown">
            <summary>
            Gets a color with an ARGB value of #fff4a460.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SeaGreen">
            <summary>
            Gets a color with an ARGB value of #ff2e8b57.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SeaShell">
            <summary>
            Gets a color with an ARGB value of #fffff5ee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Sienna">
            <summary>
            Gets a color with an ARGB value of #ffa0522d.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Silver">
            <summary>
            Gets a color with an ARGB value of #ffc0c0c0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SkyBlue">
            <summary>
            Gets a color with an ARGB value of #ff87ceeb.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SlateBlue">
            <summary>
            Gets a color with an ARGB value of #ff6a5acd.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SlateGray">
            <summary>
            Gets a color with an ARGB value of #ff708090.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Snow">
            <summary>
            Gets a color with an ARGB value of #fffffafa.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SpringGreen">
            <summary>
            Gets a color with an ARGB value of #ff00ff7f.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.SteelBlue">
            <summary>
            Gets a color with an ARGB value of #ff4682b4.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Tan">
            <summary>
            Gets a color with an ARGB value of #ffd2b48c.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Teal">
            <summary>
            Gets a color with an ARGB value of #ff008080.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Thistle">
            <summary>
            Gets a color with an ARGB value of #ffd8bfd8.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Tomato">
            <summary>
            Gets a color with an ARGB value of #ffff6347.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Transparent">
            <summary>
            Gets a color with an ARGB value of #00ffffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Turquoise">
            <summary>
            Gets a color with an ARGB value of #ff40e0d0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Violet">
            <summary>
            Gets a color with an ARGB value of #ffee82ee.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Wheat">
            <summary>
            Gets a color with an ARGB value of #fff5deb3.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.White">
            <summary>
            Gets a color with an ARGB value of #ffffffff.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.WhiteSmoke">
            <summary>
            Gets a color with an ARGB value of #fff5f5f5.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.Yellow">
            <summary>
            Gets a color with an ARGB value of #ffffff00.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Colors.YellowGreen">
            <summary>
            Gets a color with an ARGB value of #ff9acd32.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Union">
            <summary>
            The two regions are combined by taking the union of both. The resulting geometry is
            geometry A + geometry B.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Intersect">
            <summary>
            The two regions are combined by taking their intersection. The new area consists of the
            overlapping region between the two geometries.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Xor">
            <summary>
            The two regions are combined by taking the area that exists in the first region but not
            the second and the area that exists in the second region but not the first. The new
            region consists of (A-B) + (B-A), where A and B are geometries.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryCombineMode.Exclude">
            <summary>
            The second region is excluded from the first. Given two geometries, A and B, the area of
            geometry B is removed from the area of geometry A, producing a region that is A-B.
            </summary>
        </member>
        <member name="T:Avalonia.Media.CombinedGeometry">
            <summary>
            Represents a 2-D geometric shape defined by the combination of two Geometry objects.
            </summary>
        </member>
        <member name="F:Avalonia.Media.CombinedGeometry.Geometry1Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.CombinedGeometry.Geometry1"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.CombinedGeometry.Geometry2Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.CombinedGeometry.Geometry2"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.CombinedGeometry.GeometryCombineModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor(Avalonia.Media.Geometry,Avalonia.Media.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class with the
            specified <see cref="T:Avalonia.Media.Geometry"/> objects.
            </summary>
            <param name="geometry1">The first geometry to combine.</param>
            <param name="geometry2">The second geometry to combine.</param>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor(Avalonia.Media.GeometryCombineMode,Avalonia.Media.Geometry,Avalonia.Media.Geometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class with the
            specified <see cref="T:Avalonia.Media.Geometry"/> objects and <see cref="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode"/>.
            </summary>
            <param name="combineMode">The method by which geometry1 and geometry2 are combined.</param>
            <param name="geometry1">The first geometry to combine.</param>
            <param name="geometry2">The second geometry to combine.</param>
        </member>
        <member name="M:Avalonia.Media.CombinedGeometry.#ctor(Avalonia.Media.GeometryCombineMode,Avalonia.Media.Geometry,Avalonia.Media.Geometry,Avalonia.Media.Transform)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.CombinedGeometry"/> class with the
            specified <see cref="T:Avalonia.Media.Geometry"/> objects, <see cref="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode"/> and
            <see cref="T:Avalonia.Media.Transform"/>.
            </summary>
            <param name="combineMode">The method by which geometry1 and geometry2 are combined.</param>
            <param name="geometry1">The first geometry to combine.</param>
            <param name="geometry2">The second geometry to combine.</param>
            <param name="transform">The transform applied to the geometry.</param>
        </member>
        <member name="P:Avalonia.Media.CombinedGeometry.Geometry1">
            <summary>
            Gets or sets the first <see cref="T:Avalonia.Media.Geometry"/> object of this
            <see cref="T:Avalonia.Media.CombinedGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.CombinedGeometry.Geometry2">
            <summary>
            Gets or sets the second <see cref="T:Avalonia.Media.Geometry"/> object of this
            <see cref="T:Avalonia.Media.CombinedGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.CombinedGeometry.GeometryCombineMode">
            <summary>
            Gets or sets the method by which the two geometries (specified by the
            <see cref="P:Avalonia.Media.CombinedGeometry.Geometry1"/> and <see cref="P:Avalonia.Media.CombinedGeometry.Geometry2"/> properties) are combined. The
            default value is <see cref="F:Avalonia.Media.GeometryCombineMode.Union"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ConicGradientBrush">
            <summary>
            Paints an area with a swept circular gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ConicGradientBrush.CenterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ConicGradientBrush.Center"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ConicGradientBrush.AngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ConicGradientBrush.Angle"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ConicGradientBrush.Center">
            <summary>
            Gets or sets the center point of the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ConicGradientBrush.Angle">
            <summary>
            Gets or sets the angle of the start and end of the sweep, measured from above the center point.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ConicGradientBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.DashStyle">
            <summary>
            Represents the sequence of dashes and gaps that will be applied by a <see cref="T:Avalonia.Media.Pen"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.DashStyle.DashesProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.DashStyle.Dashes"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.DashStyle.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.DashStyle.Offset"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DashStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.DashStyle"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DashStyle.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.DashStyle"/> class.
            </summary>
            <param name="dashes">The dashes collection.</param>
            <param name="offset">The dash sequence offset.</param>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Dash">
            <summary>
            Represents a dashed <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Dot">
            <summary>
            Represents a dotted <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.DashDot">
            <summary>
            Represents a dashed dotted <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.DashDotDot">
            <summary>
            Represents a dashed double dotted <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Dashes">
            <summary>
            Gets or sets the length of alternating dashes and gaps.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DashStyle.Offset">
            <summary>
            Gets or sets how far in the dash sequence the stroke will start.
            </summary>
        </member>
        <member name="E:Avalonia.Media.DashStyle.Invalidated">
            <summary>
            Raised when the dash style changes.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DashStyle.ToImmutable">
            <summary>
            Returns an immutable clone of the <see cref="T:Avalonia.Media.DashStyle"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.Drawing">
            <summary>
            Abstract class that describes a 2-D drawing.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Drawing.Draw(Avalonia.Media.DrawingContext)">
            <summary>
            Draws this drawing to the given <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Media.Drawing.GetBounds">
            <summary>
            Gets the drawing's bounding rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DrawingContext.CurrentTransform">
            <summary>
            Gets the current transform of the drawing context.
            </summary>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawImage(Avalonia.Media.IImage,Avalonia.Rect)">
            <summary>
            Draws an image.
            </summary>
            <param name="source">The image.</param>
            <param name="rect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawImage(Avalonia.Media.IImage,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Draws an image.
            </summary>
            <param name="source">The image.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawLine(Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The stroke pen.</param>
            <param name="p1">The first point of the line.</param>
            <param name="p2">The second point of the line.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Media.Geometry)">
            <summary>
            Draws a geometry.
            </summary>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Draws a geometry.
            </summary>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawRectangle(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Rect,System.Double,System.Double,Avalonia.Media.BoxShadows)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the rectangle, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the rectangle, or <c>null</c> for no stroke.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="radiusX">The radius in the X dimension of the rounded corners.
                This value will be clamped to the range of 0 to Width/2
            </param>
            <param name="radiusY">The radius in the Y dimension of the rounded corners.
                This value will be clamped to the range of 0 to Height/2
            </param>
            <param name="boxShadows">Box shadow effect parameters</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawRectangle(Avalonia.Media.IPen,Avalonia.Rect,System.Single)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawEllipse(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Point,System.Double,System.Double)">
            <summary>
            Draws an ellipse with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the ellipse, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the ellipse, or <c>null</c> for no stroke.</param>
            <param name="center">The location of the center of the ellipse.</param>
            <param name="radiusX">The horizontal radius of the ellipse.</param>
            <param name="radiusY">The vertical radius of the ellipse.</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.Custom(Avalonia.Rendering.SceneGraph.ICustomDrawOperation)">
            <summary>
            Draws a custom drawing operation
            </summary>
            <param name="custom">custom operation</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawText(Avalonia.Media.IBrush,Avalonia.Point,Avalonia.Media.FormattedText)">
            <summary>
            Draws text.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="origin">The upper-left corner of the text.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.DrawGlyphRun(Avalonia.Media.IBrush,Avalonia.Media.GlyphRun)">
            <summary>
            Draws a glyph run.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="glyphRun">The glyph run.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.FillRectangle(Avalonia.Media.IBrush,Avalonia.Rect,System.Single)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="cornerRadius">The corner radius.</param>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushClip(Avalonia.Rect)">
            <summary>
            Pushes a clip rectangle.
            </summary>
            <param name="clip">The clip rectangle.</param>
            <returns>A disposable used to undo the clip rectangle.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushGeometryClip(Avalonia.Media.Geometry)">
            <summary>
            Pushes a clip geometry.
            </summary>
            <param name="clip">The clip geometry.</param>
            <returns>A disposable used to undo the clip geometry.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushOpacity(System.Double)">
            <summary>
            Pushes an opacity value.
            </summary>
            <param name="opacity">The opacity.</param>
            <returns>A disposable used to undo the opacity.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushOpacityMask(Avalonia.Media.IBrush,Avalonia.Rect)">
            <summary>
            Pushes an opacity mask.
            </summary>
            <param name="mask">The opacity mask.</param>
            <param name="bounds">
            The size of the brush's target area. TODO: Are we sure this is needed?
            </param>
            <returns>A disposable to undo the opacity mask.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushPostTransform(Avalonia.Matrix)">
            <summary>
            Pushes a matrix post-transformation.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushPreTransform(Avalonia.Matrix)">
            <summary>
            Pushes a matrix pre-transformation.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushSetTransform(Avalonia.Matrix)">
            <summary>
            Sets the current matrix transformation.
            </summary>
            <param name="matrix">The matrix</param>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.PushTransformContainer">
            <summary>
            Pushes a new transform context.
            </summary>
            <returns>A disposable used to undo the transformation.</returns>
        </member>
        <member name="M:Avalonia.Media.DrawingContext.Dispose">
            <summary>
            Disposes of any resources held by the <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.DrawingImage">
            <summary>
            An <see cref="T:Avalonia.Media.IImage"/> that uses a <see cref="P:Avalonia.Media.DrawingImage.Drawing"/> for content.
            </summary>
        </member>
        <member name="F:Avalonia.Media.DrawingImage.DrawingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.DrawingImage.Drawing"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Media.DrawingImage.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.DrawingImage.Drawing">
            <summary>
            Gets or sets the drawing content.
            </summary>
        </member>
        <member name="P:Avalonia.Media.DrawingImage.Size">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.DrawingImage.Avalonia#Media#IImage#Draw(Avalonia.Media.DrawingContext,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.DrawingImage.OnPropertyChanged``1(Avalonia.AvaloniaPropertyChangedEventArgs{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.DrawingImage.RaiseInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Media.DrawingImage.Invalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Media.EllipseGeometry">
            <summary>
            Represents the geometry of an ellipse or circle.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.RectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.Rect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.RadiusXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.RadiusX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.RadiusYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.RadiusY"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.EllipseGeometry.CenterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.EllipseGeometry.Center"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.EllipseGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.#ctor(Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.EllipseGeometry"/> class.
            </summary>
            <param name="rect">The rectangle that the ellipse should fill.</param>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.Rect">
            <summary>
            Gets or sets a rect that defines the bounds of the ellipse.
            </summary>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.RadiusX">
            <summary>
            Gets or sets a double that defines the radius in the X-axis of the ellipse.
            </summary>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.RadiusY">
            <summary>
            Gets or sets a double that defines the radius in the Y-axis of the ellipse.
            </summary>
        </member>
        <member name="P:Avalonia.Media.EllipseGeometry.Center">
            <summary>
            Gets or sets a point that defines the center of the ellipse.
            </summary>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.EllipseGeometry.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.TintColorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintColor"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSource"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColor"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Media.ExperimentalAcrylicMaterial.Invalidated">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.BackgroundSource">
            <summary>
            Gets or Sets the BackgroundSource <seealso cref="T:Avalonia.Media.AcrylicBackgroundSource"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintColor">
            <summary>
            Gets or Sets the TintColor.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.TintOpacity">
            <summary>
            Gets or Sets the Tint Opacity.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.FallbackColor">
            <summary>
            Gets or Sets the Fallback Color.
            This is used on rendering plaforms that dont support acrylic.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacity">
            <summary>
            Gets or Sets the MaterialOpacity.
            This makes the material more or less opaque.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ExperimentalAcrylicMaterial.PlatformTransparencyCompensationLevel">
            <summary>
            Gets or Sets the PlatformTransparencyCompensationLevel.
            This value defines the minimum <see cref="P:Avalonia.Media.ExperimentalAcrylicMaterial.MaterialOpacity"/> that can be used.
            It means material opacity is re-scaled from this value to 1.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ExperimentalAcrylicMaterial.AffectsRender``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the brush's visual representation.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a brush's static constructor, any change to the
            property will cause the <see cref="E:Avalonia.Media.ExperimentalAcrylicMaterial.Invalidated"/> event to be raised on the brush.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.ExperimentalAcrylicMaterial.RaiseInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Media.ExperimentalAcrylicMaterial.Invalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Media.FontFallback">
            <summary>
            Font fallback definition that is used to override the default fallback lookup of the current <see cref="T:Avalonia.Media.FontManager"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontFallback.FontFamily">
            <summary>
            Get or set the fallback <see cref="P:Avalonia.Media.FontFallback.FontFamily"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontFallback.UnicodeRange">
            <summary>
            Get or set the <see cref="P:Avalonia.Media.FontFallback.UnicodeRange"/> that is covered by the fallback.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FontFamily.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FontFamily" /> class.
            </summary>
            <param name="name">The name of the <see cref="T:Avalonia.Media.FontFamily" />.</param>
        </member>
        <member name="M:Avalonia.Media.FontFamily.#ctor(System.Uri,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FontFamily" /> class.
            </summary>
            <param name="baseUri">Specifies the base uri that is used to resolve font family assets.</param>
            <param name="name">The name of the <see cref="T:Avalonia.Media.FontFamily" />.</param>
            <exception cref="T:System.ArgumentException">Base uri must be an absolute uri.</exception>
        </member>
        <member name="P:Avalonia.Media.FontFamily.Default">
            <summary>
            Represents the default font family
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontFamily.Name">
            <summary>
            Gets the primary family name of the font family.
            </summary>
            <value>
            The primary name of the font family.
            </value>
        </member>
        <member name="P:Avalonia.Media.FontFamily.FamilyNames">
            <summary>
            Gets the family names.
            </summary>
            <value>
            The family familyNames.
            </value>
        </member>
        <member name="P:Avalonia.Media.FontFamily.Key">
            <summary>
            Gets the key for associated assets.
            </summary>
            <value>
            The family key.
            </value>
            <remarks>Key is only used for custom fonts.</remarks>
        </member>
        <member name="P:Avalonia.Media.FontFamily.IsDefault">
            <summary>
            Returns <c>True</c> if this instance is the system's default.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FontFamily.op_Implicit(System.String)~Avalonia.Media.FontFamily">
            <summary>
            Implicit conversion of string to FontFamily
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Avalonia.Media.FontFamily.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.FontFamily"/> string.
            </summary>
            <param name="s">The <see cref="T:Avalonia.Media.FontFamily"/> string.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Specified family is not supported.
            </exception>
        </member>
        <member name="M:Avalonia.Media.FontFamily.Parse(System.String,System.Uri)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.FontFamily"/> string.
            </summary>
            <param name="s">The <see cref="T:Avalonia.Media.FontFamily"/> string.</param>
            <param name="baseUri">Specifies the base uri that is used to resolve font family assets.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Specified family is not supported.
            </exception>
        </member>
        <member name="M:Avalonia.Media.FontFamily.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.FontFamily.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Avalonia.Media.FontManager">
            <summary>
                The font manager is used to query the system's installed fonts and is responsible for caching loaded fonts.
                It is also responsible for the font fallback.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontManager.PlatformImpl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalonia.Media.FontManager.DefaultFontFamilyName">
            <summary>
                Gets the system's default font family's name.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FontManager.GetInstalledFontFamilyNames(System.Boolean)">
            <summary>
                Get all installed font family names.
            </summary>
            <param name="checkForUpdates">If <c>true</c> the font collection is updated.</param>
        </member>
        <member name="M:Avalonia.Media.FontManager.GetOrAddGlyphTypeface(Avalonia.Media.Typeface)">
            <summary>
                Returns a new <see cref="T:Avalonia.Media.GlyphTypeface"/>, or an existing one if a matching <see cref="T:Avalonia.Media.GlyphTypeface"/> exists.
            </summary>
            <param name="typeface">The typeface.</param>
            <returns>
                The <see cref="T:Avalonia.Media.GlyphTypeface"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.FontManager.TryMatchCharacter(System.Int32,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontFamily,System.Globalization.CultureInfo,Avalonia.Media.Typeface@)">
            <summary>
                Tries to match a specified character to a <see cref="T:Avalonia.Media.Typeface"/> that supports specified font properties.
            </summary>
            <param name="codepoint">The codepoint to match against.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="fontFamily">The font family. This is optional and used for fallback lookup.</param>
            <param name="culture">The culture.</param>
            <param name="typeface">The matching <see cref="T:Avalonia.Media.Typeface"/>.</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Media.FontManager"/> could match the character to specified parameters, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="T:Avalonia.Media.FontStyle">
            <summary>
            Defines the available font styles.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontStyle.Normal">
            <summary>
            A normal font.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontStyle.Italic">
            <summary>
            An italic font.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontStyle.Oblique">
            <summary>
            An oblique font.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Fonts.FamilyNameCollection"/> class.
            </summary>
            <param name="familyNames">The family names.</param>
            <exception cref="T:System.ArgumentException">familyNames</exception>
        </member>
        <member name="P:Avalonia.Media.Fonts.FamilyNameCollection.PrimaryFamilyName">
            <summary>
            Gets the primary family name.
            </summary>
            <value>
            The primary family name.
            </value>
        </member>
        <member name="P:Avalonia.Media.Fonts.FamilyNameCollection.HasFallbacks">
            <summary>
            Gets a value indicating whether fallbacks are defined.
            </summary>
            <value>
              <c>true</c> if fallbacks are defined; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Avalonia.Media.Fonts.FamilyNameCollection.Names">
            <summary>
            Gets the internal collection of names.
            </summary>
            <value>
            The names.
            </value>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the name collection.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FamilyNameCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Avalonia.Media.Fonts.FontFamilyKey">
            <summary>
            Represents an identifier for a <see cref="T:Avalonia.Media.FontFamily"/>
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.#ctor(System.Uri,System.Uri)">
            <summary>
            Creates a new instance of <see cref="T:Avalonia.Media.Fonts.FontFamilyKey"/>
            </summary>
            <param name="source"></param>
            <param name="baseUri"></param>
        </member>
        <member name="P:Avalonia.Media.Fonts.FontFamilyKey.Source">
            <summary>
            Source of stored font asset that belongs to a <see cref="T:Avalonia.Media.FontFamily"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.Fonts.FontFamilyKey.BaseUri">
            <summary>
            A base URI to use if <see cref="P:Avalonia.Media.Fonts.FontFamilyKey.Source"/> is relative
            </summary>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyKey.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyLoader.LoadFontAssets(Avalonia.Media.Fonts.FontFamilyKey)">
            <summary>
            Loads all font assets that belong to the specified <see cref="T:Avalonia.Media.Fonts.FontFamilyKey"/>
            </summary>
            <param name="fontFamilyKey"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyLoader.GetFontAssetsBySource(Avalonia.Media.Fonts.FontFamilyKey)">
            <summary>
            Searches for font assets at a given location and returns a quantity of found assets
            </summary>
            <param name="fontFamilyKey"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.Fonts.FontFamilyLoader.GetFontAssetsByExpression(Avalonia.Media.Fonts.FontFamilyKey)">
            <summary>
            Searches for font assets at a given location and only accepts assets that fit to a given filename expression.
            <para>File names can target multiple files with * wildcard. For example "FontFile*.ttf"</para>
            </summary>
            <param name="fontFamilyKey"></param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.FontWeight">
            <summary>
            Defines a set of predefined font weights.
            </summary>
            <remarks>
            As well as the values defined by this enumeration you can also pass any integer value by
            casting it to <see cref="T:Avalonia.Media.FontWeight"/>, e.g. <code>(FontWeight)550</code>.
            </remarks>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Thin">
            <summary>
            Specifies a "thin" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.ExtraLight">
            <summary>
            Specifies an "extra light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.UltraLight">
            <summary>
            Specifies an "ultra light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Light">
            <summary>
            Specifies a "light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.SemiLight">
            <summary>
            Specifies a "semi light" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Normal">
            <summary>
            Specifies a "normal" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Regular">
            <summary>
            Specifies a "regular" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Medium">
            <summary>
            Specifies a "medium" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.DemiBold">
            <summary>
            Specifies a "demi-bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.SemiBold">
            <summary>
            Specifies a "semi-bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Bold">
            <summary>
            Specifies a "bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.ExtraBold">
            <summary>
            Specifies an "extra bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.UltraBold">
            <summary>
            Specifies an "ultra bold" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Black">
            <summary>
            Specifies a "black" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.Heavy">
            <summary>
            Specifies a "heavy" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.ExtraBlack">
            <summary>
            Specifies an "extra black" font weight.
            </summary>
        </member>
        <member name="F:Avalonia.Media.FontWeight.UltraBlack">
            <summary>
            Specifies an "ultra black" font weight.
            </summary>
        </member>
        <member name="T:Avalonia.Media.FormattedText">
            <summary>
            Represents a piece of text with formatting.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FormattedText"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.#ctor(Avalonia.Platform.IPlatformRenderInterface)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FormattedText"/> class.
            </summary>
            <param name="platform">The platform render interface.</param>
        </member>
        <member name="M:Avalonia.Media.FormattedText.#ctor(System.String,Avalonia.Media.Typeface,System.Double,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FormattedText"/> class.
            </summary>
            <param name="text"></param>
            <param name="typeface"></param>
            <param name="fontSize"></param>
            <param name="textAlignment"></param>
            <param name="textWrapping"></param>
            <param name="constraint"></param>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Bounds">
            <summary>
            Gets the bounds of the text within the <see cref="P:Avalonia.Media.FormattedText.Constraint"/>.
            </summary>
            <returns>The bounds of the text.</returns>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Constraint">
            <summary>
            Gets or sets the constraint of the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Typeface">
            <summary>
            Gets or sets the base typeface.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Spans">
            <summary>
            Gets or sets a collection of spans that describe the formatting of subsections of the
            text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.TextAlignment">
            <summary>
            Gets or sets the alignment of the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.TextWrapping">
            <summary>
            Gets or sets the text wrapping.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedText.PlatformImpl">
            <summary>
            Gets platform-specific platform implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedText.GetLines">
            <summary>
            Gets the lines in the text.
            </summary>
            <returns>
            A collection of <see cref="T:Avalonia.Media.FormattedTextLine"/> objects.
            </returns>
        </member>
        <member name="M:Avalonia.Media.FormattedText.HitTestPoint(Avalonia.Point)">
            <summary>
            Hit tests a point in the text.
            </summary>
            <param name="point">The point.</param>
            <returns>
            A <see cref="T:Avalonia.Media.TextHitTestResult"/> describing the result of the hit test.
            </returns>
        </member>
        <member name="M:Avalonia.Media.FormattedText.HitTestTextPosition(System.Int32)">
            <summary>
            Gets the bounds rectangle that the specified character occupies.
            </summary>
            <param name="index">The index of the character.</param>
            <returns>The character bounds.</returns>
        </member>
        <member name="M:Avalonia.Media.FormattedText.HitTestTextRange(System.Int32,System.Int32)">
            <summary>
            Gets the bounds rectangles that the specified text range occupies.
            </summary>
            <param name="index">The index of the first character.</param>
            <param name="length">The number of characters in the text range.</param>
            <returns>The character bounds.</returns>
        </member>
        <member name="T:Avalonia.Media.FormattedTextLine">
            <summary>
            Stores information about a line of <see cref="T:Avalonia.Media.FormattedText"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedTextLine.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FormattedTextLine"/> class.
            </summary>
            <param name="length">The length of the line, in characters.</param>
            <param name="height">The height of the line, in pixels.</param>
        </member>
        <member name="P:Avalonia.Media.FormattedTextLine.Length">
            <summary>
            Gets the length of the line, in characters.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedTextLine.Height">
            <summary>
            Gets the height of the line, in pixels.
            </summary>
        </member>
        <member name="T:Avalonia.Media.FormattedTextStyleSpan">
            <summary>
            Describes the formatting for a span of text in a <see cref="T:Avalonia.Media.FormattedText"/> object.
            </summary>
        </member>
        <member name="M:Avalonia.Media.FormattedTextStyleSpan.#ctor(System.Int32,System.Int32,Avalonia.Media.IBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.FormattedTextStyleSpan"/> class.
            </summary>
            <param name="startIndex">The index of the first character in the span.</param>
            <param name="length">The length of the span.</param>
            <param name="foregroundBrush">The span's foreground brush.</param>
        </member>
        <member name="P:Avalonia.Media.FormattedTextStyleSpan.StartIndex">
            <summary>
            Gets the index of the first character in the span.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedTextStyleSpan.Length">
            <summary>
            Gets the length of the span.
            </summary>
        </member>
        <member name="P:Avalonia.Media.FormattedTextStyleSpan.ForegroundBrush">
            <summary>
            Gets the span's foreground brush.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Geometry">
            <summary>
            Defines a geometric shape.
            </summary>    
        </member>
        <member name="F:Avalonia.Media.Geometry.TransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Geometry.Transform"/> property.
            </summary>
        </member>
        <member name="E:Avalonia.Media.Geometry.Changed">
            <summary>
            Raised when the geometry changes.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Geometry.Bounds">
            <summary>
            Gets the geometry's bounding rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Geometry.PlatformImpl">
            <summary>
            Gets the platform-specific implementation of the geometry.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Geometry.Transform">
            <summary>
            Gets or sets a transform to apply to the geometry.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Geometry.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.Geometry"/> from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>A <see cref="T:Avalonia.Media.StreamGeometry"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.Clone">
            <summary>
            Clones the geometry.
            </summary>
            <returns>A cloned geometry.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.GetRenderBounds(Avalonia.Media.IPen)">
            <summary>
            Gets the geometry's bounding rectangle with the specified pen.
            </summary>
            <param name="pen">The stroke thickness.</param>
            <returns>The bounding rectangle.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.FillContains(Avalonia.Point)">
            <summary>
            Indicates whether the geometry's fill contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.StrokeContains(Avalonia.Media.IPen,Avalonia.Point)">
            <summary>
            Indicates whether the geometry's stroke contains the specified point.
            </summary>
            <param name="pen">The pen to use.</param>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.AffectsGeometry(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the geometry's <see cref="P:Avalonia.Media.Geometry.PlatformImpl"/>.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a control's static constructor, any change to the
            property will cause <see cref="M:Avalonia.Media.Geometry.InvalidateGeometry"/> to be called on the element.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.Geometry.CreateDefiningGeometry">
            <summary>
            Creates the platform implementation of the geometry, without the transform applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.Geometry.InvalidateGeometry">
            <summary>
            Invalidates the platform implementation of the geometry.
            </summary>
        </member>
        <member name="T:Avalonia.Media.GeometryDrawing">
            <summary>
            Represents a drawing operation that combines 
            a geometry with and brush and/or pen to produce rendered content.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryDrawing.GeometryProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GeometryDrawing.Geometry"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryDrawing.BrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GeometryDrawing.Brush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GeometryDrawing.PenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GeometryDrawing.Pen"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryDrawing.Geometry">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.Geometry"/> that describes the shape of this <see cref="T:Avalonia.Media.GeometryDrawing"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryDrawing.Brush">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IBrush"/> used to fill the interior of the shape described by this <see cref="T:Avalonia.Media.GeometryDrawing"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryDrawing.Pen">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IPen"/> used to stroke this <see cref="T:Avalonia.Media.GeometryDrawing"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.GeometryGroup">
            <summary>
            Represents a composite geometry, composed of other <see cref="T:Avalonia.Media.Geometry"/> objects.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryGroup.Children">
            <summary>
            Gets or sets the collection that contains the child geometries.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GeometryGroup.FillRule">
            <summary>
            Gets or sets how the intersecting areas of the objects contained in this
            <see cref="T:Avalonia.Media.GeometryGroup"/> are combined. The default is <see cref="F:Avalonia.Media.FillRule.EvenOdd"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.GlyphRun">
            <summary>
                Represents a sequence of glyphs from a single face of a single font at a single size, and with a single rendering style.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Avalonia.Media.GlyphRun"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.#ctor(Avalonia.Media.GlyphTypeface,System.Double,Avalonia.Utilities.ReadOnlySlice{System.UInt16},Avalonia.Utilities.ReadOnlySlice{System.Double},Avalonia.Utilities.ReadOnlySlice{Avalonia.Vector},Avalonia.Utilities.ReadOnlySlice{System.Char},Avalonia.Utilities.ReadOnlySlice{System.UInt16},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Avalonia.Media.GlyphRun"/> class by specifying properties of the class.
            </summary>
            <param name="glyphTypeface">The glyph typeface.</param>
            <param name="fontRenderingEmSize">The rendering em size.</param>
            <param name="glyphIndices">The glyph indices.</param>
            <param name="glyphAdvances">The glyph advances.</param>
            <param name="glyphOffsets">The glyph offsets.</param>
            <param name="characters">The characters.</param>
            <param name="glyphClusters">The glyph clusters.</param>
            <param name="biDiLevel">The bidi level.</param>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphTypeface">
            <summary>
                Gets or sets the <see cref="T:Avalonia.Media.GlyphTypeface"/> for the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.FontRenderingEmSize">
            <summary>
                Gets or sets the em size used for rendering the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.BaselineOrigin">
            <summary>
                Gets or sets the baseline origin of the<see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphIndices">
            <summary>
                Gets or sets an array of <see cref="T:System.UInt16"/> values that represent the glyph indices in the rendering physical font.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphAdvances">
            <summary>
                Gets or sets an array of <see cref="T:System.Double"/> values that represent the advances corresponding to the glyph indices.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphOffsets">
            <summary>
                Gets or sets an array of <see cref="T:Avalonia.Vector"/> values representing the offsets of the glyphs in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.Characters">
            <summary>
                Gets or sets the list of UTF16 code points that represent the Unicode content of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphClusters">
            <summary>
                Gets or sets a list of <see cref="T:System.Int32"/> values representing a mapping from character index to glyph index.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.BiDiLevel">
            <summary>
                Gets or sets the bidirectional nesting level of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.Scale">
            <summary>
            Gets the scale of the current <see cref="T:Avalonia.Media.GlyphTypeface"/>
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.IsLeftToRight">
            <summary>
            Returns <c>true</c> if the text direction is left-to-right. Otherwise, returns <c>false</c>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.Size">
            <summary>
                Gets or sets the conservative bounding box of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphRun.GlyphRunImpl">
            <summary>
            The platform implementation of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Retrieves the offset from the leading edge of the <see cref="T:Avalonia.Media.GlyphRun"/>
            to the leading or trailing edge of a caret stop containing the specified character hit.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> to use for computing the offset.</param>
            <returns>
            A <see cref="T:System.Double"/> that represents the offset from the leading edge of the <see cref="T:Avalonia.Media.GlyphRun"/>
            to the leading or trailing edge of a caret stop containing the character hit.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetCharacterHitFromDistance(System.Double,System.Boolean@)">
            <summary>
            Retrieves the <see cref="T:Avalonia.Media.CharacterHit"/> value that represents the character hit of the caret of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <param name="distance">Offset to use for computing the caret character hit.</param>
            <param name="isInside">Determines whether the character hit is inside the <see cref="T:Avalonia.Media.GlyphRun"/>.</param>
            <returns>
            A <see cref="T:Avalonia.Media.CharacterHit"/> value that represents the character hit that is closest to the distance value.
            The out parameter <c>isInside</c> returns <c>true</c> if the character hit is inside the <see cref="T:Avalonia.Media.GlyphRun"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetNextCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Retrieves the next valid caret character hit in the logical direction in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> to use for computing the next hit value.</param>
            <returns>
            A <see cref="T:Avalonia.Media.CharacterHit"/> that represents the next valid caret character hit in the logical direction.
            If the return value is equal to <c>characterHit</c>, no further navigation is possible in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Retrieves the previous valid caret character hit in the logical direction in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> to use for computing the previous hit value.</param>
            <returns>
            A cref="CharacterHit"/> that represents the previous valid caret character hit in the logical direction.
            If the return value is equal to <c>characterHit</c>, no further navigation is possible in the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.FindGlyphIndex(System.Int32)">
            <summary>
            Finds a glyph index for given character index.
            </summary>
            <param name="characterIndex">The character index.</param>
            <returns>
            The glyph index.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.FindNearestCharacterHit(System.Int32,System.Double@)">
            <summary>
            Finds the nearest <see cref="T:Avalonia.Media.CharacterHit"/> at given index.
            </summary>
            <param name="index">The index.</param>
            <param name="width">The width of found cluster.</param>
            <returns>
            The nearest <see cref="T:Avalonia.Media.CharacterHit"/>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.GetGlyphWidth(System.Int32)">
            <summary>
            Gets a glyph's width.
            </summary>
            <param name="index">The glyph index.</param>
            <returns>The glyph's width.</returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.CalculateBaselineOrigin">
            <summary>
            Calculates the default baseline origin of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <returns>The baseline origin.</returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.CalculateSize">
            <summary>
            Calculates the size of the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
            <returns>
            The calculated bounds.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphRun.Initialize">
            <summary>
            Initializes the <see cref="T:Avalonia.Media.GlyphRun"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.DesignEmHeight">
            <summary>
                Gets the font design units per em.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.Ascent">
            <summary>
                Gets the recommended distance above the baseline in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.Descent">
            <summary>
                Gets the recommended distance under the baseline in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.LineGap">
            <summary>
                 Gets the recommended additional space between two lines of text in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.LineHeight">
            <summary>
                Gets the recommended line height.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.UnderlinePosition">
            <summary>
                Gets a value that indicates the distance of the underline from the baseline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.UnderlineThickness">
            <summary>
                Gets a value that indicates the thickness of the underline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.StrikethroughPosition">
            <summary>
                Gets a value that indicates the distance of the strikethrough from the baseline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.StrikethroughThickness">
            <summary>
                Gets a value that indicates the thickness of the underline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GlyphTypeface.IsFixedPitch">
            <summary>
                A <see cref="T:System.Boolean"/> value indicating whether all glyphs in the font have the same advancement. 
            </summary>
        </member>
        <member name="M:Avalonia.Media.GlyphTypeface.GetGlyph(System.UInt32)">
            <summary>
                Returns an glyph index for the specified codepoint.
            </summary>
            <remarks>
                Returns a replacement glyph if a glyph isn't found.
            </remarks>
            <param name="codepoint">The codepoint.</param>
            <returns>
                A glyph index.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphTypeface.TryGetGlyph(System.UInt32,System.UInt16@)">
            <summary>
                Tries to get an glyph index for specified codepoint.
            </summary>
            <param name="codepoint">The codepoint.</param>
            <param name="glyph">A glyph index.</param>
            <returns>
                <c>true</c> if an glyph index was found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphTypeface.GetGlyphs(System.ReadOnlySpan{System.UInt32})">
            <summary>
                Returns an array of glyph indices. Codepoints that are not represented by the font are returned as <code>0</code>.
            </summary>
            <param name="codepoints">The codepoints to map.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.GlyphTypeface.GetGlyphAdvance(System.UInt16)">
            <summary>
                Returns the glyph advance for the specified glyph.
            </summary>
            <param name="glyph">The glyph.</param>
            <returns>
                The advance.
            </returns>
        </member>
        <member name="M:Avalonia.Media.GlyphTypeface.GetGlyphAdvances(System.ReadOnlySpan{System.UInt16})">
            <summary>
                Returns an array of glyph advances in design em size.
            </summary>
            <param name="glyphs">The glyph indices.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.GradientBrush">
            <summary>
            Base class for brushes that draw with a gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientBrush.SpreadMethodProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GradientBrush.SpreadMethod"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientBrush.GradientStopsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.GradientBrush.GradientStops"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GradientBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GradientBrush"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Media.GradientBrush.SpreadMethod">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.GradientBrush.GradientStops">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.GradientBrush.Avalonia#Media#IGradientBrush#GradientStops">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.GradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientStop.OffsetProperty">
            <summary>
            Describes the <see cref="P:Avalonia.Media.GradientStop.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.GradientStop.ColorProperty">
            <summary>
            Describes the <see cref="P:Avalonia.Media.GradientStop.Color"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GradientStop"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.GradientStop.#ctor(Avalonia.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.GradientStop"/> class.
            </summary>
            <param name="color">The color</param>
            <param name="offset">The offset</param>
        </member>
        <member name="P:Avalonia.Media.GradientStop.Offset">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.GradientStop.Color">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.GradientStops">
            <summary>
            A collection of <see cref="T:Avalonia.Media.GradientStop"/>s.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IAffectsRender">
            <summary>
            Signals to a self-rendering control that changes to the resource should invoke
            <see cref="M:Avalonia.Visual.InvalidateVisual"/>.
            </summary>
        </member>
        <member name="E:Avalonia.Media.IAffectsRender.Invalidated">
            <summary>
            Raised when the resource changes visually.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IBrush">
            <summary>
            Describes how an area is painted.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IBrush.Opacity">
            <summary>
            Gets the opacity of the brush.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IConicGradientBrush">
            <summary>
            Paints an area with a conic gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IConicGradientBrush.Center">
            <summary>
            Gets the center point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IConicGradientBrush.Angle">
            <summary>
            Gets the starting angle for the gradient in degrees, measured from
            the point above the center point.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IDashStyle">
            <summary>
            Represents the sequence of dashes and gaps that will be applied by a <see cref="T:Avalonia.Media.Pen"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IDashStyle.Dashes">
            <summary>
            Gets or sets the length of alternating dashes and gaps.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IDashStyle.Offset">
            <summary>
            Gets or sets how far in the dash sequence the stroke will start.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IExperimentalAcrylicMaterial">
            <summary>
            Experimental Interface for producing Acrylic-like materials.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.BackgroundSource">
            <summary>
            Gets the <see cref="T:Avalonia.Media.AcrylicBackgroundSource"/> of the material.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.TintColor">
            <summary>
            Gets the TintColor of the material.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.TintOpacity">
            <summary>
            Gets the TintOpacity of the material.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.MaterialColor">
            <summary>
            Gets the effective material color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IExperimentalAcrylicMaterial.FallbackColor">
            <summary>
            Gets the fallback color.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IGradientBrush">
            <summary>
            A brush that draws with a gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientBrush.GradientStops">
            <summary>
            Gets the brush's gradient stops.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientBrush.SpreadMethod">
            <summary>
            Gets the brush's spread method that defines how to draw a gradient that doesn't fill
            the bounds of the destination control.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IGradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientStop.Color">
            <summary>
            Gets the gradient stop color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IGradientStop.Offset">
            <summary>
            Gets the gradient stop offset.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IImage">
            <summary>
            Represents a raster or vector image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IImage.Size">
            <summary>
            Gets the size of the image, in device independent pixels.
            </summary>
        </member>
        <member name="M:Avalonia.Media.IImage.Draw(Avalonia.Media.DrawingContext,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Draws the image to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
        </member>
        <member name="T:Avalonia.Media.IImageBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.Media.Imaging.IBitmap"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IImageBrush.Source">
            <summary>
            Gets the image to draw.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ILinearGradientBrush">
            <summary>
            A brush that draws with a linear gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ILinearGradientBrush.StartPoint">
            <summary>
            Gets or sets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ILinearGradientBrush.EndPoint">
            <summary>
            Gets or sets the end point for the gradient.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ImageBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.Media.Imaging.IBitmap"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ImageBrush.SourceProperty">
            <summary>
            Defines the <see cref="T:Avalonia.Visual"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ImageBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ImageBrush.#ctor(Avalonia.Media.Imaging.IBitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
            <param name="source">The image to draw.</param>
        </member>
        <member name="P:Avalonia.Media.ImageBrush.Source">
            <summary>
            Gets or sets the image to draw.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ImageBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.ImageDrawing">
            <summary>
            Draws an image within a region defined by a <see cref="P:Avalonia.Media.ImageDrawing.Rect"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ImageDrawing.ImageSourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ImageDrawing.ImageSource"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ImageDrawing.RectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ImageDrawing.Rect"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ImageDrawing.ImageSource">
            <summary>
            Gets or sets the source of the image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ImageDrawing.Rect">
            <summary>
            Gets or sets region in which the image is drawn.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Imaging.Bitmap">
            <summary>
            Holds a bitmap image.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.DecodeToWidth(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a Bitmap from a stream and decodes at the desired width. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.DecodeToHeight(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a Bitmap from a stream and decodes at the desired height. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.CreateScaledBitmap(Avalonia.PixelSize,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Creates a Bitmap scaled to a specified size from the current bitmap.
            </summary>        
            <param name="destinationSize">The destination size.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="fileName">The filename of the bitmap.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="impl">A platform-specific bitmap implementation.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(Avalonia.Platform.IBitmapImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="impl">A platform-specific bitmap implementation. Bitmap class takes the ownership.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(Avalonia.Platform.PixelFormat,System.IntPtr,Avalonia.PixelSize,Avalonia.Vector,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="format">The pixel format.</param>
            <param name="data">The pointer to the source bytes.</param>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="stride">The number of bytes per row.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.#ctor(Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat,System.IntPtr,Avalonia.PixelSize,Avalonia.Vector,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.Bitmap"/> class.
            </summary>
            <param name="format">The pixel format.</param>
            <param name="alphaFormat">The alpha format.</param>
            <param name="data">The pointer to the source bytes.</param>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="stride">The number of bytes per row.</param>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.Dpi">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.Size">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.PixelSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Imaging.Bitmap.PlatformImpl">
            <summary>
            Gets the platform-specific bitmap implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Save(System.String)">
            <summary>
            Saves the bitmap to a file.
            </summary>
            <param name="fileName">The filename.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Save(System.IO.Stream)">
            <summary>
            Saves the bitmap to a stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.Bitmap.Avalonia#Media#IImage#Draw(Avalonia.Media.DrawingContext,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Imaging.CroppedBitmap">
            <summary>
            Crops a Bitmap.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.CroppedBitmap.SourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Imaging.CroppedBitmap.Source"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Imaging.CroppedBitmap.SourceRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Imaging.CroppedBitmap.SourceRect"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.CroppedBitmap.Source">
            <summary>
            Gets or sets the source for the bitmap.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.CroppedBitmap.SourceRect">
            <summary>
            Gets or sets the rectangular area that the bitmap is cropped to.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Imaging.IBitmap">
            <summary>
            Represents a bitmap image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.IBitmap.Dpi">
            <summary>
            Gets the dots per inch (DPI) of the image.
            </summary>
            <remarks>
            Note that Skia does not currently support reading the DPI of an image so this value
            will always be 96dpi on Skia.
            </remarks>
        </member>
        <member name="P:Avalonia.Media.Imaging.IBitmap.PixelSize">
            <summary>
            Gets the size of the bitmap, in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Imaging.IBitmap.PlatformImpl">
            <summary>
            Gets the platform-specific bitmap implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.IBitmap.Save(System.String)">
            <summary>
            Saves the bitmap to a file.
            </summary>
            <param name="fileName">The filename.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.IBitmap.Save(System.IO.Stream)">
            <summary>
            Saves the bitmap to a stream in png format.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:Avalonia.Media.Imaging.RenderTargetBitmap">
            <summary>
            A bitmap that holds the rendering of a <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.#ctor(Avalonia.PixelSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/> class.
            </summary>
            <param name="pixelSize">The size of the bitmap.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.#ctor(Avalonia.PixelSize,Avalonia.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/> class.
            </summary>
            <param name="pixelSize">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
        </member>
        <member name="P:Avalonia.Media.Imaging.RenderTargetBitmap.PlatformImpl">
            <summary>
            Gets the platform-specific bitmap implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.Render(Avalonia.VisualTree.IVisual)">
            <summary>
            Renders a visual to the <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/>.
            </summary>
            <param name="visual">The visual to render.</param>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.CreateImpl(Avalonia.PixelSize,Avalonia.Vector)">
            <summary>
            Creates a platform-specific implementation for a <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/>.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <returns>The platform-specific implementation.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.RenderTargetBitmap.CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Imaging.WriteableBitmap">
            <summary>
            Holds a writeable bitmap image.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.#ctor(Avalonia.PixelSize,Avalonia.Vector,System.Nullable{Avalonia.Platform.PixelFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="format">The pixel format (optional).</param>
            <returns>An <see cref="T:Avalonia.Platform.IWriteableBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.#ctor(Avalonia.PixelSize,Avalonia.Vector,Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="format">The pixel format (optional).</param>
            <param name="alphaFormat">The alpha format (optional).</param>
            <returns>An <see cref="T:Avalonia.Platform.IWriteableBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.DecodeToWidth(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a WriteableBitmap from a stream and decodes at the desired width. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class.</returns>
        </member>
        <member name="M:Avalonia.Media.Imaging.WriteableBitmap.DecodeToHeight(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a Bitmap from a stream and decodes at the desired height. Aspect ratio is maintained.
            This is more efficient than loading and then resizing.
            </summary>
            <param name="stream">The stream to read the bitmap from. This can be any supported image format.</param>
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should any scaling be required.</param>
            <returns>An instance of the <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/> class.</returns>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableConicGradientBrush">
            <summary>
            A brush that draws with a sweep gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableConicGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.GradientSpreadMethod,System.Nullable{Avalonia.RelativePoint},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableConicGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="spreadMethod">The spread method.</param>
            <param name="center">The center point for the gradient.</param>
            <param name="angle">The starting angle for the gradient.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableConicGradientBrush.#ctor(Avalonia.Media.ConicGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableConicGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableConicGradientBrush.Center">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableConicGradientBrush.Angle">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableDashStyle">
            <summary>
            Represents the sequence of dashes and gaps that will be applied by an
            <see cref="T:Avalonia.Media.Immutable.ImmutablePen"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableDashStyle"/> class.
            </summary>
            <param name="dashes">The dashes collection.</param>
            <param name="offset">The dash sequence offset.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableDashStyle.Dashes">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableDashStyle.Offset">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.Equals(Avalonia.Media.IDashStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableDashStyle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableGradientBrush">
            <summary>
            A brush that draws with a gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.GradientSpreadMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="spreadMethod">The spread method.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableGradientBrush.#ctor(Avalonia.Media.GradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.GradientStops">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.Opacity">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientBrush.SpreadMethod">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableGradientStop">
            <summary>
            Describes the location and color of a transition point in a gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientStop.Offset">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableGradientStop.Color">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableImageBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.Media.Imaging.IBitmap"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableImageBrush.#ctor(Avalonia.Media.Imaging.IBitmap,Avalonia.Media.AlignmentX,Avalonia.Media.AlignmentY,System.Nullable{Avalonia.RelativeRect},System.Double,System.Nullable{Avalonia.RelativeRect},Avalonia.Media.Stretch,Avalonia.Media.TileMode,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableImageBrush"/> class.
            </summary>
            <param name="source">The image to draw.</param>
            <param name="alignmentX">The horizontal alignment of a tile in the destination.</param>
            <param name="alignmentY">The vertical alignment of a tile in the destination.</param>
            <param name="destinationRect">The rectangle on the destination in which to paint a tile.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="sourceRect">The rectangle of the source image that will be displayed.</param>
            <param name="stretch">
            How the source rectangle will be stretched to fill the destination rect.
            </param>
            <param name="tileMode">The tile mode.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableImageBrush.#ctor(Avalonia.Media.IImageBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableImageBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableImageBrush.Source">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableLinearGradientBrush">
            <summary>
            A brush that draws with a linear gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.GradientSpreadMethod,System.Nullable{Avalonia.RelativePoint},System.Nullable{Avalonia.RelativePoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableLinearGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="spreadMethod">The spread method.</param>
            <param name="startPoint">The start point for the gradient.</param>
            <param name="endPoint">The end point for the gradient.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.#ctor(Avalonia.Media.LinearGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableLinearGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.StartPoint">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableLinearGradientBrush.EndPoint">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutablePen">
            <summary>
            Describes how a stroke is drawn.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.#ctor(System.UInt32,System.Double,Avalonia.Media.Immutable.ImmutableDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="color">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">Specifies the type of graphic shape to use on both ends of a line.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.#ctor(Avalonia.Media.IBrush,System.Double,Avalonia.Media.Immutable.ImmutableDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="brush">The brush used to draw.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">The line cap.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.Brush">
            <summary>
            Gets the brush used to draw the stroke.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.Thickness">
            <summary>
            Gets the stroke thickness.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.DashStyle">
            <summary>
            Specifies the style of dashed lines drawn with a <see cref="T:Avalonia.Media.Pen"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.LineCap">
            <summary>
            Specifies the type of graphic shape to use on both ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.LineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in a <see cref="T:Avalonia.Media.PathFigure"/>
            (subpaths) contained in a <see cref="T:Avalonia.Media.PathGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutablePen.MiterLimit">
            <summary>
            The limit on the ratio of the miter length to half this pen's Thickness.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.Equals(Avalonia.Media.IPen)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutablePen.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableRadialGradientBrush">
            <summary>
            A brush that draws with a radial gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.#ctor(System.Collections.Generic.IReadOnlyList{Avalonia.Media.Immutable.ImmutableGradientStop},System.Double,Avalonia.Media.GradientSpreadMethod,System.Nullable{Avalonia.RelativePoint},System.Nullable{Avalonia.RelativePoint},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableRadialGradientBrush"/> class.
            </summary>
            <param name="gradientStops">The gradient stops.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="spreadMethod">The spread method.</param>
            <param name="center">The start point for the gradient.</param>
            <param name="gradientOrigin">
            The location of the two-dimensional focal point that defines the beginning of the gradient.
            </param>
            <param name="radius">
            The horizontal and vertical radius of the outermost circle of the radial gradient.
            </param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.#ctor(Avalonia.Media.RadialGradientBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableRadialGradientBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.Center">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.GradientOrigin">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableRadialGradientBrush.Radius">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush">
            <summary>
            Fills an area with a solid color.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.#ctor(Avalonia.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.#ctor(Avalonia.Media.ISolidColorBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableSolidColorBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableSolidColorBrush.Color">
            <summary>
            Gets the color of the brush.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableSolidColorBrush.Opacity">
            <summary>
            Gets the opacity of the brush.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableSolidColorBrush.ToString">
            <summary>
            Returns a string representation of the brush.
            </summary>
            <returns>A string representation of the brush.</returns>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableTextDecoration">
            <summary>
            An immutable representation of a <see cref="T:Avalonia.Media.TextDecoration"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.Pen">
            <summary>
            Gets or sets the pen.
            </summary>
            <value>
            The pen.
            </value>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenThicknessUnit">
            <summary>
            Gets the units in which the Thickness of the text decoration's <see cref="P:Avalonia.Media.Immutable.ImmutableTextDecoration.Pen"/> is expressed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenOffset">
            <summary>
            Gets or sets the pen offset.
            </summary>
            <value>
            The pen offset.
            </value>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenOffsetUnit">
            <summary>
            Gets the units in which the <see cref="P:Avalonia.Media.Immutable.ImmutableTextDecoration.PenOffset"/> value is expressed.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableTileBrush">
            <summary>
            A brush which displays a repeating image.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableTileBrush.#ctor(Avalonia.Media.AlignmentX,Avalonia.Media.AlignmentY,Avalonia.RelativeRect,System.Double,Avalonia.RelativeRect,Avalonia.Media.Stretch,Avalonia.Media.TileMode,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
            <param name="alignmentX">The horizontal alignment of a tile in the destination.</param>
            <param name="alignmentY">The vertical alignment of a tile in the destination.</param>
            <param name="destinationRect">The rectangle on the destination in which to paint a tile.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="sourceRect">The rectangle of the source image that will be displayed.</param>
            <param name="stretch">
            How the source rectangle will be stretched to fill the destination rect.
            </param>
            <param name="tileMode">The tile mode.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableTileBrush.#ctor(Avalonia.Media.ITileBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ImageBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.AlignmentX">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.AlignmentY">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.DestinationRect">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.Opacity">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.SourceRect">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.Stretch">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.TileMode">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableTileBrush.BitmapInterpolationMode">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.Immutable.ImmutableVisualBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableVisualBrush.#ctor(Avalonia.VisualTree.IVisual,Avalonia.Media.AlignmentX,Avalonia.Media.AlignmentY,System.Nullable{Avalonia.RelativeRect},System.Double,System.Nullable{Avalonia.RelativeRect},Avalonia.Media.Stretch,Avalonia.Media.TileMode,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableImageBrush"/> class.
            </summary>
            <param name="visual">The visual to draw.</param>
            <param name="alignmentX">The horizontal alignment of a tile in the destination.</param>
            <param name="alignmentY">The vertical alignment of a tile in the destination.</param>
            <param name="destinationRect">The rectangle on the destination in which to paint a tile.</param>
            <param name="opacity">The opacity of the brush.</param>
            <param name="sourceRect">The rectangle of the source image that will be displayed.</param>
            <param name="stretch">
            How the source rectangle will be stretched to fill the destination rect.
            </param>
            <param name="tileMode">The tile mode.</param>
            <param name="bitmapInterpolationMode">Controls the quality of interpolation.</param>
        </member>
        <member name="M:Avalonia.Media.Immutable.ImmutableVisualBrush.#ctor(Avalonia.Media.IVisualBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Immutable.ImmutableVisualBrush"/> class.
            </summary>
            <param name="source">The brush from which this brush's properties should be copied.</param>
        </member>
        <member name="P:Avalonia.Media.Immutable.ImmutableVisualBrush.Visual">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.IMutableBrush">
            <summary>
            Represents a mutable brush which can return an immutable clone of itself.
            </summary>
        </member>
        <member name="M:Avalonia.Media.IMutableBrush.ToImmutable">
            <summary>
            Creates an immutable clone of the brush.
            </summary>
            <returns>The immutable clone.</returns>
        </member>
        <member name="T:Avalonia.Media.IMutableExperimentalAcrylicMaterial">
            <summary>
            Represents a mutable brush which can return an immutable clone of itself.
            </summary>
        </member>
        <member name="M:Avalonia.Media.IMutableExperimentalAcrylicMaterial.ToImmutable">
            <summary>
            Creates an immutable clone of the brush.
            </summary>
            <returns>The immutable clone.</returns>
        </member>
        <member name="E:Avalonia.Media.IMutableTransform.Changed">
            <summary>
            Raised when the transform changes.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IPen">
            <summary>
            Describes how a stroke is drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.Brush">
            <summary>
            Gets the brush used to draw the stroke.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.DashStyle">
            <summary>
            Gets the style of dashed lines drawn with a <see cref="T:Avalonia.Media.Pen"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.LineCap">
            <summary>
            Gets the type of shape to use on both ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.LineJoin">
            <summary>
            Gets a value describing how to join consecutive line or curve segments in a 
            <see cref="T:Avalonia.Media.PathFigure"/> contained in a <see cref="T:Avalonia.Media.PathGeometry"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.MiterLimit">
            <summary>
            Gets the limit of the thickness of the join on a mitered corner.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IPen.Thickness">
            <summary>
            Gets the stroke thickness.
            </summary>
        </member>
        <member name="T:Avalonia.Media.IRadialGradientBrush">
            <summary>
            Paints an area with a radial gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IRadialGradientBrush.Center">
            <summary>
            Gets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IRadialGradientBrush.GradientOrigin">
            <summary>
            Gets the location of the two-dimensional focal point that defines the beginning of the
            gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IRadialGradientBrush.Radius">
            <summary>
            Gets the horizontal and vertical radius of the outermost circle of the radial gradient.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ISolidColorBrush">
            <summary>
            Fills an area with a solid color.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ISolidColorBrush.Color">
            <summary>
            Gets the color of the brush.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ITileBrush">
            <summary>
            A brush which displays a repeating image.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.AlignmentX">
            <summary>
            Gets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.AlignmentY">
            <summary>
            Gets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.DestinationRect">
            <summary>
            Gets the rectangle on the destination in which to paint a tile.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.SourceRect">
            <summary>
            Gets the rectangle of the source image that will be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.Stretch">
            <summary>
            Gets a value indicating how the source rectangle will be stretched to fill the
            destination rect.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.TileMode">
            <summary>
            Gets the brush's tile mode.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ITileBrush.BitmapInterpolationMode">
            <summary>
            Gets the bitmap interpolation mode.
            </summary>
            <value>
            The bitmap interpolation mode.
            </value>
        </member>
        <member name="T:Avalonia.Media.IVisualBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.IVisualBrush.Visual">
            <summary>
            Gets the visual to draw.
            </summary>
        </member>
        <member name="T:Avalonia.Media.LinearGradientBrush">
            <summary>
            A brush that draws with a linear gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LinearGradientBrush.StartPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LinearGradientBrush.StartPoint"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LinearGradientBrush.EndPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LinearGradientBrush.EndPoint"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LinearGradientBrush.StartPoint">
            <summary>
            Gets or sets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LinearGradientBrush.EndPoint">
            <summary>
            Gets or sets the end point for the gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LinearGradientBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.LineGeometry">
            <summary>
            Represents the geometry of a line.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LineGeometry.StartPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LineGeometry.StartPoint"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.LineGeometry.EndPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LineGeometry.EndPoint"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.LineGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.#ctor(Avalonia.Point,Avalonia.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.LineGeometry"/> class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="P:Avalonia.Media.LineGeometry.StartPoint">
            <summary>
            Gets or sets the start point of the line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LineGeometry.EndPoint">
            <summary>
            Gets or sets the end point of the line.
            </summary>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.LineGeometry.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Media.LineSegment.PointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.LineSegment.Point"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.LineSegment.Point">
            <summary>
            Gets or sets the point.
            </summary>
            <value>
            The point.
            </value>
        </member>
        <member name="M:Avalonia.Media.MaterialExtensions.ToImmutable(Avalonia.Media.IExperimentalAcrylicMaterial)">
            <summary>
            Converts a brush to an immutable brush.
            </summary>
            <param name="material">The brush.</param>
            <returns>
            The result of calling <see cref="M:Avalonia.Media.IMutableBrush.ToImmutable"/> if the brush is mutable,
            otherwise <paramref name="material"/>.
            </returns>
        </member>
        <member name="T:Avalonia.Media.MatrixTransform">
            <summary>
            Transforms an <see cref="T:Avalonia.VisualTree.IVisual"/> according to a <see cref="P:Avalonia.Media.MatrixTransform.Matrix"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.MatrixTransform.MatrixProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.MatrixTransform.Matrix"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MatrixTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.MatrixTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MatrixTransform.#ctor(Avalonia.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.MatrixTransform"/> class.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="P:Avalonia.Media.MatrixTransform.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Media.MatrixTransform.Value">
            <summary>
            Gets the matrix.
            </summary>
        </member>
        <member name="T:Avalonia.Media.MediaExtensions">
            <summary>
            Provides extension methods for Avalonia media.
            </summary>
        </member>
        <member name="M:Avalonia.Media.MediaExtensions.CalculateScaling(Avalonia.Media.Stretch,Avalonia.Size,Avalonia.Size,Avalonia.Media.StretchDirection)">
            <summary>
            Calculates scaling based on a <see cref="T:Avalonia.Media.Stretch"/> value.
            </summary>
            <param name="stretch">The stretch mode.</param>
            <param name="destinationSize">The size of the destination viewport.</param>
            <param name="sourceSize">The size of the source.</param>
            <param name="stretchDirection">The stretch direction.</param>
            <returns>A vector with the X and Y scaling factors.</returns>
        </member>
        <member name="M:Avalonia.Media.MediaExtensions.CalculateSize(Avalonia.Media.Stretch,Avalonia.Size,Avalonia.Size,Avalonia.Media.StretchDirection)">
            <summary>
            Calculates a scaled size based on a <see cref="T:Avalonia.Media.Stretch"/> value.
            </summary>
            <param name="stretch">The stretch mode.</param>
            <param name="destinationSize">The size of the destination viewport.</param>
            <param name="sourceSize">The size of the source.</param>
            <param name="stretchDirection">The stretch direction.</param>
            <returns>The size of the stretched source.</returns>
        </member>
        <member name="F:Avalonia.Media.PathFigure.IsClosedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.IsClosed"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathFigure.IsFilledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.IsFilled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathFigure.SegmentsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.Segments"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathFigure.StartPointProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathFigure.StartPoint"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathFigure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PathFigure"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Media.PathFigure.IsClosed">
            <summary>
            Gets or sets a value indicating whether this instance is closed.
            </summary>
            <value>
              <c>true</c> if this instance is closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathFigure.IsFilled">
            <summary>
            Gets or sets a value indicating whether this instance is filled.
            </summary>
            <value>
              <c>true</c> if this instance is filled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathFigure.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathFigure.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="F:Avalonia.Media.PathGeometry.FiguresProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathGeometry.Figures"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PathGeometry.FillRuleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PathGeometry.FillRule"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PathGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathGeometry.Parse(System.String)">
            <summary>
            Parses the specified path data to a <see cref="T:Avalonia.Media.PathGeometry"/>.
            </summary>
            <param name="pathData">The s.</param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Media.PathGeometry.Figures">
            <summary>
            Gets or sets the figures.
            </summary>
            <value>
            The figures.
            </value>
        </member>
        <member name="P:Avalonia.Media.PathGeometry.FillRule">
            <summary>
            Gets or sets the fill rule.
            </summary>
            <value>
            The fill rule.
            </value>
        </member>
        <member name="M:Avalonia.Media.PathFigures.Parse(System.String)">
            <summary>
            Parses the specified path data to a <see cref="T:Avalonia.Media.PathFigures"/>.
            </summary>
            <param name="pathData">The s.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.PathMarkupParser">
            <summary>
            Parses a path markup string.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PathMarkupParser.#ctor(Avalonia.Platform.IGeometryContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PathMarkupParser"/> class.
            </summary>
            <param name="geometryContext">The geometry context.</param>
            <exception cref="T:System.ArgumentNullException">geometryContext</exception>
        </member>
        <member name="M:Avalonia.Media.PathMarkupParser.Parse(System.String)">
            <summary>
            Parses the specified path data and writes the result to the geometryContext of this instance.
            </summary>
            <param name="pathData">The path data.</param>
        </member>
        <member name="T:Avalonia.Media.Pen">
            <summary>
            Describes how a stroke is drawn.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.BrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.Brush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.ThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.Thickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.DashStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.DashStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.LineCapProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.LineCap"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.LineJoinProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.LineJoin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Pen.MiterLimitProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.Pen.MiterLimit"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Pen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Pen.#ctor(System.UInt32,System.Double,Avalonia.Media.IDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="color">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">Specifies the type of graphic shape to use on both ends of a line.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="M:Avalonia.Media.Pen.#ctor(Avalonia.Media.IBrush,System.Double,Avalonia.Media.IDashStyle,Avalonia.Media.PenLineCap,Avalonia.Media.PenLineJoin,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Pen"/> class.
            </summary>
            <param name="brush">The brush used to draw.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashStyle">The dash style.</param>
            <param name="lineCap">The line cap.</param>
            <param name="lineJoin">The line join.</param>
            <param name="miterLimit">The miter limit.</param>
        </member>
        <member name="P:Avalonia.Media.Pen.Brush">
            <summary>
            Gets or sets the brush used to draw the stroke.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.Thickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.DashStyle">
            <summary>
            Gets or sets the style of dashed lines drawn with a <see cref="T:Avalonia.Media.Pen"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.LineCap">
            <summary>
            Gets or sets the type of shape to use on both ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.LineJoin">
            <summary>
            Gets or sets the join style for the ends of two consecutive lines drawn with this
            <see cref="T:Avalonia.Media.Pen"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Pen.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
        </member>
        <member name="E:Avalonia.Media.Pen.Invalidated">
            <summary>
            Raised when the pen changes.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Pen.ToImmutable">
            <summary>
            Creates an immutable clone of the brush.
            </summary>
            <returns>The immutable clone.</returns>
        </member>
        <member name="M:Avalonia.Media.Pen.AffectsRender``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the pen's visual representation.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a pen's static constructor, any change to the
            property will cause the <see cref="E:Avalonia.Media.Pen.Invalidated"/> event to be raised on the pen.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.Pen.RaiseInvalidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Media.Pen.Invalidated"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Media.PolylineGeometry">
            <summary>
            Represents the geometry of an polyline or polygon.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PolylineGeometry.PointsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PolylineGeometry.Points"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PolylineGeometry.IsFilledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PolylineGeometry.IsFilled"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PolylineGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolylineGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PolylineGeometry.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Point},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolylineGeometry"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Media.PolylineGeometry.Points">
            <summary>
            Gets or sets the figures.
            </summary>
            <value>
            The points.
            </value>
        </member>
        <member name="M:Avalonia.Media.PolylineGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.PolyLineSegment">
            <summary>
            Represents a set of line segments defined by a points collection with each Point specifying the end point of a line segment.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PolyLineSegment.PointsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.PolyLineSegment.Points"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.PolyLineSegment.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>
            The points.
            </value>
        </member>
        <member name="M:Avalonia.Media.PolyLineSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolyLineSegment"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PolyLineSegment.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.PolyLineSegment"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="T:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc">
            <summary>
            This class represents an elliptical arc on a 2D plane.
            
            This class is adapted for use with WPF StreamGeometryContext, and needs to be created explicitly
            for each particular arc.
            
            Some helpers
            
            It can handle ellipses which are not aligned with the x and y reference axes of the plane,
            as well as their parts.
            
            Another improvement is that this class can handle degenerated cases like for example very 
            flat ellipses(semi-minor axis much smaller than semi-major axis) and drawing of very small 
            parts of such ellipses at very high magnification scales.This imply monitoring the drawing 
            approximation error for extremely small values.Such cases occur for example while drawing 
            orbits of comets near the perihelion.
            
            When the arc does not cover the complete ellipse, the lines joining the center of the 
            ellipse to the endpoints can optionally be included or not in the outline, hence allowing 
            to use it for pie-charts rendering. If these lines are not included, the curve is not 
            naturally closed.
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs2Low">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0 ≤ b/a ≤ 0.25
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs2High">
            <summary>
            Coefficients for error estimation while using quadratic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Safety2">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs3Low">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Coeffs3High">
            <summary>
            Coefficients for error estimation while using cubic Bezier curves for approximation,
            0.25 ≤ b/a ≤ 1
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Safety3">
            <summary>
            Safety factor to convert the "best" error approximation into a "max bound" error
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Cx">
            <summary>
            Abscissa of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Cy">
            <summary>
            Ordinate of the center of the ellipse
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.A">
            <summary>
            Semi-major axis
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.B">
            <summary>
            Semi-minor axis
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Theta">
            <summary>
            Orientation of the major axis with respect to the x axis
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._cosTheta">
            <summary>
            Pre-calculated cosine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._sinTheta">
            <summary>
            Pre-calculated sine value for the major-axis-to-X orientation (Theta)
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Eta1">
            <summary>
            Start angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Eta2">
            <summary>
            End angle of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.X1">
            <summary>
            Abscissa of the start point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Y1">
            <summary>
            Ordinate of the start point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.X2">
            <summary>
            Abscissa of the end point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Y2">
            <summary>
            Ordinate of the end point
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.FirstFocusX">
            <summary>
            Abscissa of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.FirstFocusY">
            <summary>
            Ordinate of the first focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SecondFocusX">
            <summary>
            Abscissa of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SecondFocusY">
            <summary>
            Ordinate of the second focus
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._xLeft">
            <summary>
            Abscissa of the leftmost point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._yUp">
            <summary>
            Ordinate of the highest point of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._width">
            <summary>
            Horizontal width of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._height">
            <summary>
            Vertical height of the arc
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.IsPieSlice">
            <summary>
            Indicator for center to endpoints line inclusion
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._maxDegree">
            <summary>
            Maximal degree for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc._defaultFlatness">
            <summary>
            Default flatness for Bezier curve approximation
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.F">
            <summary>
            Indicator for semi-major axis significance (compared to semi-minor one).
            Computed by dividing the (A-B) difference by the value of A.
            This indicator is used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.E2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.G">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="F:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.G2">
            <summary>
            Indicator used for an early escape in intersection test
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor">
            <summary>
            Builds an elliptical arc composed of the full unit circle around (0,0)
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Builds an elliptical arc from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
            <param name="lambda1">Start angle of the arc</param>
            <param name="lambda2">End angle of the arc</param>
            <param name="isPieSlice">If true, the lines between the center of the ellipse
             and the endpoints are part of the shape (it is pie slice like)</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(Avalonia.Point,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Build a full ellipse from its canonical geometrical elements
            </summary>
            <param name="cx">Abscissa of the center of the ellipse</param>
            <param name="cy">Ordinate of the center of the ellipse</param>
            <param name="a">Semi-major axis</param>
            <param name="b">Semi-minor axis</param>
            <param name="theta">Orientation of the major axis with respect to the x axis</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SetMaxDegree(System.Int32)">
            <summary>
            Sets the maximal degree allowed for Bezier curve approximation.
            </summary>
            <param name="maxDegree">Maximal allowed degree (must be between 1 and 3)</param>
            <exception cref="T:System.ArgumentException">Thrown if maxDegree is not between 1 and 3</exception>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SetDefaultFlatness(System.Double)">
            <summary>
            Sets the default flatness for Bezier curve approximation
            </summary>
            <param name="defaultFlatness">default flatness (must be greater than 1e-10)</param>
            <exception cref="T:System.ArgumentException">Thrown if defaultFlatness is lower than 1e-10</exception>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeFocii">
            <summary>
            Computes the locations of the focii
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeEndPoints">
            <summary>
            Computes the locations of the endpoints
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeBounds">
            <summary>
            Computes the bounding box
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.ComputeDerivedFlatnessParameters">
            <summary>
            Computes the flatness parameters used in intersection tests
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.RationalFunction(System.Double,System.Double[])">
            <summary>
            Computes the value of a rational function.
            This method handles rational functions where the numerator is quadratic
            and the denominator is linear
            </summary>
            <param name="x">Abscissa for which the value should be computed</param>
            <param name="c">Coefficients array of the rational function</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.EstimateError(System.Int32,System.Double,System.Double)">
            <summary>
            Estimate the approximation error for a sub-arc of the instance
            </summary>
            <param name="degree">Degree of the Bezier curve to use (1, 2 or 3)</param>
            <param name="etaA">Start angle of the sub-arc</param>
            <param name="etaB">End angle of the sub-arc</param>
            <returns>Upper bound of the approximation error between the Bezier curve and the real ellipse</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.PointAt(System.Double)">
            <summary>
            Get the elliptical arc point for a given angular parameter
            </summary>
            <param name="lambda">Angular parameter for which point is desired</param> 
            <returns>The desired elliptical arc point location</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(System.Double,System.Double)">
            <summary>
            Tests if the specified coordinates are inside the closed shape formed by this arc.
            If this is not a pie, then a shape derived by adding a closing chord is considered.
            </summary>
            <param name="x">Abscissa of the test point</param>
            <param name="y">Ordinate of the test point</param>
            <returns>True if the specified coordinates are inside the closed shape of this arc</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.IntersectArc(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the arc
            </summary>
            <param name="xA">abscissa of the first point of the line segment</param>
            <param name="yA">ordinate of the first point of the line segment</param>
            <param name="xB">abscissa of the second point of the line segment</param>
            <param name="yB">ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Intersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if two line segments intersect
            </summary>
            <param name="x1">Abscissa of the first point of the first line segment</param>
            <param name="y1">Ordinate of the first point of the first line segment</param>
            <param name="x2">Abscissa of the second point of the first line segment</param>
            <param name="y2">Ordinate of the second point of the first line segment</param>
            <param name="xA">Abscissa of the first point of the second line segment</param>
            <param name="yA">Ordinate of the first point of the second line segment</param>
            <param name="xB">Abscissa of the second point of the second line segment</param>
            <param name="yB">Ordinate of the second point of the second line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.IntersectOutline(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if a line segment intersects the outline
            </summary>
            <param name="xA">Abscissa of the first point of the line segment</param>
            <param name="yA">Ordinate of the first point of the line segment</param>
            <param name="xB">Abscissa of the second point of the line segment</param>
            <param name="yB">Ordinate of the second point of the line segment</param>
            <returns>true if the two line segments intersect</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="x">Abscissa of the upper-left corner of the test rectangle</param>
            <param name="y">Ordinate of the upper-left corner of the test rectangle</param>
            <param name="w">Width of the test rectangle</param>
            <param name="h">Height of the test rectangle</param>
            <returns>true if the interior of a closed path derived from this arc entirely contains the specified rectangular area; false otherwise</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(Avalonia.Point)">
            <summary>
            Tests if a specified Point2D is inside the boundary of a closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="p">Test point</param>
            <returns>true if the specified point is inside a closed path derived from this arc</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Contains(Avalonia.Rect)">
            <summary>
            Tests if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
            <param name="r">Test rectangle</param>
            <returns>True if the interior of a closed path derived from this arc entirely contains the specified Rectangle2D; false otherwise</returns>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.GetBounds">
            <summary>
            Returns an integer Rectangle that completely encloses the closed path derived from this arc.
            The closed path is derived with respect to the IsPieSlice value.
            </summary> 
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.BuildArc(Avalonia.Media.StreamGeometryContext)">
            <summary>
            Builds the arc outline using given StreamGeometryContext and default (max) Bezier curve degree and acceptable error of half a pixel (0.5)
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.BuildArc(Avalonia.Media.StreamGeometryContext,System.Int32,System.Double,System.Boolean)">
            <summary>
            Builds the arc outline using given StreamGeometryContext
            </summary>
            <param name="path">A StreamGeometryContext to output the path commands to</param>
            <param name="degree">degree of the Bezier curve to use</param>
            <param name="threshold">acceptable error</param>
            <param name="openNewFigure">if true, a new figure will be started in the specified StreamGeometryContext</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.GetAngle(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Calculates the angle between two vectors
            </summary>
            <param name="v1">Vector V1</param>
            <param name="v2">Vector V2</param>
            <returns>The signed angle between v2 and v1</returns>
        </member>
        <member name="T:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.SimpleMatrix">
            <summary>
            Simple matrix used for rotate transforms. 
            At some point I did not trust the WPF Matrix struct, and wrote my own simple one -_-
            This is supposed to be replaced with proper WPF Matrices everywhere
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.BuildArc(Avalonia.Media.StreamGeometryContext,Avalonia.Point,Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,System.Boolean)">
            <summary>
            ArcTo Helper for StreamGeometryContext
            </summary>
            <param name="path">Target path</param>
            <param name="p1">Start point</param>
            <param name="p2">End point</param>
            <param name="size">Ellipse radii</param>
            <param name="theta">Ellipse theta (angle measured from the abscissa)</param>
            <param name="isLargeArc">Large Arc Indicator</param>
            <param name="clockwise">Clockwise direction flag</param>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Intersects(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
        <member name="M:Avalonia.Media.PreciseEllipticArcHelper.EllipticalArc.Intersects(Avalonia.Rect)">
            <summary>
            Tests if the interior of the closed path derived from this arc intersects the interior of a specified rectangular area.
            The closed path is derived with respect to the IsPieSlice value.
            </summary>
        </member>
        <member name="F:Avalonia.Media.QuadraticBezierSegment.Point1Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.QuadraticBezierSegment.Point1"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.QuadraticBezierSegment.Point2Property">
            <summary>
            Defines the <see cref="P:Avalonia.Media.QuadraticBezierSegment.Point2"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.QuadraticBezierSegment.Point1">
            <summary>
            Gets or sets the point1.
            </summary>
            <value>
            The point1.
            </value>
        </member>
        <member name="P:Avalonia.Media.QuadraticBezierSegment.Point2">
            <summary>
            Gets or sets the point2.
            </summary>
            <value>
            The point2.
            </value>
        </member>
        <member name="T:Avalonia.Media.RadialGradientBrush">
            <summary>
            Paints an area with a radial gradient.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RadialGradientBrush.CenterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RadialGradientBrush.Center"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RadialGradientBrush.GradientOriginProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RadialGradientBrush.GradientOrigin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RadialGradientBrush.RadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RadialGradientBrush.Radius"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RadialGradientBrush.Center">
            <summary>
            Gets or sets the start point for the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RadialGradientBrush.GradientOrigin">
            <summary>
            Gets or sets the location of the two-dimensional focal point that defines the beginning
            of the gradient.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RadialGradientBrush.Radius">
            <summary>
            Gets or sets the horizontal and vertical radius of the outermost circle of the radial
            gradient.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RadialGradientBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.RectangleGeometry">
            <summary>
            Represents the geometry of a rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RectangleGeometry.RectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RectangleGeometry.Rect"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RectangleGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RectangleGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RectangleGeometry.#ctor(Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RectangleGeometry"/> class.
            </summary>
            <param name="rect">The rectangle bounds.</param>
        </member>
        <member name="P:Avalonia.Media.RectangleGeometry.Rect">
            <summary>
            Gets or sets the bounds of the rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RectangleGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Media.RenderOptions.BitmapInterpolationModeProperty">
            <summary>
            Defines the <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.GetBitmapInterpolationMode(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the BitmapInterpolationMode attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Media.RenderOptions.SetBitmapInterpolationMode(Avalonia.AvaloniaObject,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Sets the value of the BitmapInterpolationMode attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="T:Avalonia.Media.RotateTransform">
            <summary>
            Rotates an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RotateTransform.AngleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RotateTransform.Angle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RotateTransform.CenterXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RotateTransform.CenterX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.RotateTransform.CenterYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.RotateTransform.CenterY"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RotateTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RotateTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.RotateTransform.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RotateTransform"/> class.
            </summary>
            <param name="angle">The angle, in degrees.</param>
        </member>
        <member name="M:Avalonia.Media.RotateTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.RotateTransform"/> class.
            </summary>
            <param name="angle">The angle, in degrees.</param>
            <param name="centerX">The x-coordinate of the center point for the rotation.</param>
            <param name="centerY">The y-coordinate of the center point for the rotation.</param>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.Angle">
            <summary>
            Gets or sets the angle of rotation, in degrees.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.CenterX">
            <summary>
            Gets or sets the x-coordinate of the rotation center point. The default is 0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.CenterY">
            <summary>
            Gets or sets the y-coordinate of the rotation center point. The default is 0.
            </summary>
        </member>
        <member name="P:Avalonia.Media.RotateTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.ScaleTransform">
            <summary>
            Scale an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ScaleTransform.ScaleXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ScaleTransform.ScaleX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.ScaleTransform.ScaleYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.ScaleTransform.ScaleY"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ScaleTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ScaleTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.ScaleTransform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.ScaleTransform"/> class.
            </summary>
            <param name="scaleX">ScaleX</param>
            <param name="scaleY">ScaleY</param>
        </member>
        <member name="P:Avalonia.Media.ScaleTransform.ScaleX">
            <summary>
            Gets or sets the ScaleX property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ScaleTransform.ScaleY">
            <summary>
            Gets or sets the ScaleY property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.ScaleTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.SkewTransform">
            <summary>
            Skews an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SkewTransform.AngleXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.SkewTransform.AngleX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SkewTransform.AngleYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.SkewTransform.AngleY"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SkewTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SkewTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SkewTransform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SkewTransform"/> class.
            </summary>
            <param name="angleX">The skew angle of X-axis, in degrees.</param>
            <param name="angleY">The skew angle of Y-axis, in degrees.</param>
        </member>
        <member name="P:Avalonia.Media.SkewTransform.AngleX">
            <summary>
            Gets or sets the AngleX property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.SkewTransform.AngleY">
            <summary>
            Gets or sets the AngleY property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.SkewTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.SolidColorBrush">
            <summary>
            Fills an area with a solid color.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SolidColorBrush.ColorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.SolidColorBrush.Color"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SolidColorBrush"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.#ctor(Avalonia.Media.Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.SolidColorBrush"/> class.
            </summary>
            <param name="color">The color to use.</param>
        </member>
        <member name="P:Avalonia.Media.SolidColorBrush.Color">
            <summary>
            Gets or sets the color of the brush.
            </summary>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.Parse(System.String)">
            <summary>
            Parses a brush string.
            </summary>
            <param name="s">The brush string.</param>
            <returns>The <see cref="P:Avalonia.Media.SolidColorBrush.Color"/>.</returns>
            <remarks>
            Whereas <see cref="M:Avalonia.Media.Brush.Parse(System.String)"/> may return an immutable solid color brush,
            this method always returns a mutable <see cref="T:Avalonia.Media.SolidColorBrush"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.ToString">
            <summary>
            Returns a string representation of the brush.
            </summary>
            <returns>A string representation of the brush.</returns>
        </member>
        <member name="M:Avalonia.Media.SolidColorBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.StreamGeometry">
            <summary>
            Represents the geometry of an arbitrarily complex shape.
            </summary>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.StreamGeometry"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.#ctor(Avalonia.Platform.IStreamGeometryImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.StreamGeometry"/> class.
            </summary>
            <param name="impl">The platform-specific implementation.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Avalonia.Media.StreamGeometry"/> from a string.
            </summary>
            <param name="s">The string.</param>
            <returns>A <see cref="T:Avalonia.Media.StreamGeometry"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.Open">
            <summary>
            Opens the geometry to start defining it.
            </summary>
            <returns>
            A <see cref="T:Avalonia.Media.StreamGeometryContext"/> which can be used to define the geometry.
            </returns>
        </member>
        <member name="M:Avalonia.Media.StreamGeometry.CreateDefiningGeometry">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.StreamGeometryContext">
            <summary>
            Describes a geometry using drawing commands.
            </summary>
            <remarks>
            This class is used to define the geometry of a <see cref="T:Avalonia.Media.StreamGeometry"/>. An instance
            of <see cref="T:Avalonia.Media.StreamGeometryContext"/> is obtained by calling
            <see cref="M:Avalonia.Media.StreamGeometry.Open"/>.
            </remarks>
            TODO: This class is just a wrapper around IStreamGeometryContextImpl: is it needed?
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.#ctor(Avalonia.Platform.IStreamGeometryContextImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.StreamGeometryContext"/> class.
            </summary>
            <param name="impl">The platform-specific implementation.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.SetFillRule(Avalonia.Media.FillRule)">
            <summary>
            Sets path's winding rule (default is EvenOdd). You should call this method before any calls to BeginFigure. If you wonder why, ask Direct2D guys about their design decisions.
            </summary>
            <param name="fillRule"></param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.ArcTo(Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,Avalonia.Media.SweepDirection)">
            <summary>
            Draws an arc to the specified point.
            </summary>
            <param name="point">The destination point.</param>
            <param name="size">The radii of an oval whose perimeter is used to draw the angle.</param>
            <param name="rotationAngle">The rotation angle of the oval that specifies the curve.</param>
            <param name="isLargeArc">true to draw the arc greater than 180 degrees; otherwise, false.</param>
            <param name="sweepDirection">
            A value that indicates whether the arc is drawn in the Clockwise or Counterclockwise direction.
            </param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.PreciseArcTo(Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,Avalonia.Media.SweepDirection)">
            <summary>
            Draws an arc to the specified point using polylines, quadratic or cubic Bezier curves
            Significantly more precise when drawing elliptic arcs with extreme width:height ratios.        
            </summary>         
            <param name="point">The destination point.</param>
            <param name="size">The radii of an oval whose perimeter is used to draw the angle.</param>
            <param name="rotationAngle">The rotation angle of the oval that specifies the curve.</param>
            <param name="isLargeArc">true to draw the arc greater than 180 degrees; otherwise, false.</param>
            <param name="sweepDirection">
            A value that indicates whether the arc is drawn in the Clockwise or Counterclockwise direction.
            </param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)">
            <summary>
            Begins a new figure.
            </summary>
            <param name="startPoint">The starting point for the figure.</param>
            <param name="isFilled">Whether the figure is filled.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.CubicBezierTo(Avalonia.Point,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a Bezier curve to the specified point.
            </summary>
            <param name="point1">The first control point used to specify the shape of the curve.</param>
            <param name="point2">The second control point used to specify the shape of the curve.</param>
            <param name="point3">The destination point for the end of the curve.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.QuadraticBezierTo(Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a quadratic Bezier curve to the specified point
            </summary>
            <param name="control">The control point used to specify the shape of the curve.</param>
            <param name="endPoint">The destination point for the end of the curve.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.LineTo(Avalonia.Point)">
            <summary>
            Draws a line to the specified point.
            </summary>
            <param name="point">The destination point.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.EndFigure(System.Boolean)">
            <summary>
            Ends the figure started by <see cref="M:Avalonia.Media.StreamGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)"/>.
            </summary>
            <param name="isClosed">Whether the figure is closed.</param>
        </member>
        <member name="M:Avalonia.Media.StreamGeometryContext.Dispose">
            <summary>
            Finishes the drawing session.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Stretch">
            <summary>
            Describes how content is resized to fill its allocated space.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.None">
            <summary>
            The content preserves its original size.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.Fill">
            <summary>
            The content is resized to fill the destination dimensions. The aspect ratio is not
            preserved.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.Uniform">
            <summary>
            The content is resized to fit in the destination dimensions while preserving its
            native aspect ratio.
            </summary>
        </member>
        <member name="F:Avalonia.Media.Stretch.UniformToFill">
            <summary>
            The content is resized to completely fill the destination rectangle while preserving
            its native aspect ratio. A portion of the content may not be visible if the aspect
            ratio of the content does not match the aspect ratio of the allocated space.
            </summary>
        </member>
        <member name="T:Avalonia.Media.StretchDirection">
            <summary>
            Describes the type of scaling that can be used when scaling content.
            </summary>
        </member>
        <member name="F:Avalonia.Media.StretchDirection.UpOnly">
            <summary>
            Only scales the content upwards when the content is smaller than the available space.
            If the content is larger, no scaling downwards is done.
            </summary>
        </member>
        <member name="F:Avalonia.Media.StretchDirection.DownOnly">
            <summary>
            Only scales the content downwards when the content is larger than the available space.
            If the content is smaller, no scaling upwards is done.
            </summary>
        </member>
        <member name="F:Avalonia.Media.StretchDirection.Both">
            <summary>
            Always stretches to fit the available space according to the stretch mode.
            </summary>
        </member>
        <member name="T:Avalonia.Media.SweepDirection">
            <summary>
            Defines the direction an which elliptical arc is drawn.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SweepDirection.CounterClockwise">
            <summary>
            Specifies that arcs are drawn in a counter clockwise (negative-angle) direction.
            </summary>
        </member>
        <member name="F:Avalonia.Media.SweepDirection.Clockwise">
            <summary>
            Specifies that arcs are drawn in a clockwise (positive-angle) direction.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextAlignment">
            <summary>
            Defines how text is aligned.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Left">
            <summary>
            The text is left-aligned.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Center">
            <summary>
            The text is centered.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextAlignment.Right">
            <summary>
            The text is right-aligned.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextDecoration">
            <summary>
            Represents a text decoration, which is a visual ornamentation that is added to text (such as an underline).
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.LocationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.Location"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.Stroke"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeThicknessUnit"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeDashArrayProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeDashArray"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeDashOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeDashOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeLineCapProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeLineCap"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TextDecoration.StrokeOffsetUnit"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.Stroke">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Media.IBrush"/> that specifies how the <see cref="T:Avalonia.Media.TextDecoration"/> is painted.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeThicknessUnit">
            <summary>
            Gets the units in which the thickness of the <see cref="T:Avalonia.Media.TextDecoration"/> is expressed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeDashArray">
            <summary>
            Gets or sets a collection of <see cref="T:System.Double"/> values that indicate the pattern of dashes and gaps
            that is used to draw the <see cref="T:Avalonia.Media.TextDecoration"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeDashOffset">
            <summary>
            Gets or sets a value that specifies the distance within the dash pattern where a dash begins.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeThickness">
            <summary>
            Gets or sets the thickness of the <see cref="T:Avalonia.Media.TextDecoration"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeLineCap">
            <summary>
            Gets or sets a <see cref="T:Avalonia.Media.PenLineCap"/> enumeration value that describes the shape at the ends of a line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeOffset">
            <summary>
            The stroke's offset.
            </summary>
            <value>
            The pen offset.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextDecoration.StrokeOffsetUnit">
            <summary>
            Gets the units in which the <see cref="P:Avalonia.Media.TextDecoration.StrokeOffset"/> value is expressed.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextDecoration.Draw(Avalonia.Media.DrawingContext,Avalonia.Media.TextFormatting.ShapedTextCharacters)">
            <summary>
            Draws the <see cref="T:Avalonia.Media.TextDecoration"/> at given origin.
            </summary>
            <param name="drawingContext">The drawing context.</param>
            <param name="shapedTextCharacters">The shaped characters that are decorated.</param>
        </member>
        <member name="T:Avalonia.Media.TextDecorationCollection">
            <summary>
            A collection that holds <see cref="T:Avalonia.Media.TextDecoration"/> objects.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextDecorationCollection.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.TextDecorationCollection"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Media.TextDecorationCollection"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextDecorationCollection.GetTextDecorationLocation(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.TextDecorationLocation"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Media.TextDecorationLocation"/>.</returns>
        </member>
        <member name="T:Avalonia.Media.TextDecorationLocation">
            <summary>
            Specifies the vertical position of a <see cref="T:Avalonia.Media.TextDecoration"/> object.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Underline">
            <summary>
            The underline position.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Overline">
            <summary>
            The over line position.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Strikethrough">
            <summary>
            The strikethrough position.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationLocation.Baseline">
            <summary>
            The baseline position.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextDecorations">
            <summary>
            Defines a set of commonly used text decorations.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Underline">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing an underline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Strikethrough">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing a strikethrough.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Overline">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing an overline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextDecorations.Baseline">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextDecorationCollection"/> containing a baseline.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextDecorationUnit">
            <summary>
            Specifies the unit type of either a <see cref="P:Avalonia.Media.TextDecoration.StrokeOffset"/> or a <see cref="P:Avalonia.Media.TextDecoration.StrokeThickness"/> value.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationUnit.FontRecommended">
            <summary>
            A unit value that is relative to the font used for the <see cref="T:Avalonia.Media.TextDecoration"/>.
            If the decoration spans multiple fonts, an average recommended value is calculated.
            This is the default value.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationUnit.FontRenderingEmSize">
            <summary>
            A unit value that is relative to the em size of the font.
            The value of the offset or thickness is equal to the offset or thickness value multiplied by the font em size.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextDecorationUnit.Pixel">
            <summary>
            A unit value that is expressed in pixels.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.DrawableTextRun">
            <summary>
            A text run that supports drawing content.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.DrawableTextRun.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.DrawableTextRun.Draw(Avalonia.Media.DrawingContext)">
            <summary>
            Draws the <see cref="T:Avalonia.Media.TextFormatting.DrawableTextRun"/> at the given origin.
            </summary>
            <param name="drawingContext">The drawing context.</param>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.FontMetrics">
            <summary>
            A metric that holds information about font specific measurements.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.Ascent">
            <summary>
            Gets the recommended distance above the baseline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.Descent">
            <summary>
            Gets the recommended distance under the baseline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.LineGap">
            <summary>
            Gets the recommended additional space between two lines of text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.LineHeight">
            <summary>
            Gets the estimated line height.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.UnderlineThickness">
            <summary>
            Gets a value that indicates the thickness of the underline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.UnderlinePosition">
            <summary>
            Gets a value that indicates the distance of the underline from the baseline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.StrikethroughThickness">
            <summary>
            Gets a value that indicates the thickness of the underline.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.FontMetrics.StrikethroughPosition">
            <summary>
            Gets a value that indicates the distance of the strikethrough from the baseline.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.SetTextAlignment(Avalonia.Media.TextAlignment)">
            <summary>
            Set text alignment
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.SetTextWrapping(Avalonia.Media.TextWrapping)">
            <summary>
            Set text wrap
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.GenericTextParagraphProperties.SetLineHeight(System.Double)">
            <summary>
            Set line height
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.GenericTextRunProperties">
            <summary>
            Generic implementation of TextRunProperties
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.Typeface">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.FontRenderingEmSize">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.TextDecorations">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.ForegroundBrush">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.BackgroundBrush">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.GenericTextRunProperties.CultureInfo">
            <inheritdoc />
        </member>
        <member name="T:Avalonia.Media.TextFormatting.ITextSource">
            <summary>
            Produces <see cref="T:Avalonia.Media.TextFormatting.TextRun"/> objects that are used by the <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ITextSource.GetTextRun(System.Int32)">
            <summary>
            Gets a <see cref="T:Avalonia.Media.TextFormatting.TextRun"/> for specified text source index.
            </summary>
            <param name="textSourceIndex">The text source index.</param>
            <returns>The text run.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.ShapeableTextCharacters">
            <summary>
            A group of characters that can be shaped.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.ShapedTextCharacters">
            <summary>
            A text run that holds shaped characters.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.Text">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.Properties">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.TextSourceLength">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.Size">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.FontMetrics">
            <summary>
            Gets the font metrics.
            </summary>
            <value>
            The font metrics.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.GlyphRun">
            <summary>
            Gets the glyph run.
            </summary>
            <value>
            The glyphs.
            </value>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ShapedTextCharacters.Draw(Avalonia.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.ShapedTextCharacters.Split(System.Int32)">
            <summary>
            Splits the <see cref="T:Avalonia.Media.TextFormatting.TextRun"/> at specified length.
            </summary>
            <param name="length">The length.</param>
            <returns>The split result.</returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.SplitTextCharactersResult.First">
            <summary>
            Gets the first text run.
            </summary>
            <value>
            The first text run.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.ShapedTextCharacters.SplitTextCharactersResult.Second">
            <summary>
            Gets the second text run.
            </summary>
            <value>
            The second text run.
            </value>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextCharacters">
            <summary>
            A text run that holds text characters.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCharacters.TextSourceLength">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCharacters.Text">
            <inheritdoc />
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCharacters.Properties">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.GetShapeableCharacters">
            <summary>
            Gets a list of <see cref="T:Avalonia.Media.TextFormatting.ShapeableTextCharacters"/>.
            </summary>
            <returns>The shapeable text characters.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.CreateShapeableRun(Avalonia.Utilities.ReadOnlySlice{System.Char},Avalonia.Media.TextFormatting.TextRunProperties)">
            <summary>
            Creates a shapeable text run with unique properties.
            </summary>
            <param name="text">The text to create text runs from.</param>
            <param name="defaultProperties">The default text run properties.</param>
            <returns>A list of shapeable text runs.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextCharacters.TryGetRunProperties(Avalonia.Utilities.ReadOnlySlice{System.Char},Avalonia.Media.Typeface,Avalonia.Media.Typeface,System.Int32@)">
            <summary>
            Tries to get run properties.
            </summary>
            <param name="defaultTypeface"></param>
            <param name="text"></param>
            <param name="typeface">The typeface that is used to find matching characters.</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextCollapsingProperties">
            <summary>
            Properties of text collapsing
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCollapsingProperties.Width">
            <summary>
            Gets the width in which the collapsible range is constrained to
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCollapsingProperties.Symbol">
            <summary>
            Gets the text run that is used as collapsing symbol
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextCollapsingProperties.Style">
            <summary>
            Gets the style of collapsing
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextCollapsingStyle">
            <summary>
            Text collapsing style
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.TextCollapsingStyle.TrailingCharacter">
            <summary>
            Collapse trailing characters
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.TextCollapsingStyle.TrailingWord">
            <summary>
            Collapse trailing words
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextEndOfLine">
            <summary>
            A text run that indicates the end of a line.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextEndOfParagraph">
            <summary>
             A text run that indicates the end of a paragraph.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextFormatter">
            <summary>
            Represents a base class for text formatting.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextFormatter.Current">
            <summary>
            Gets the current <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/> that is used for non complex text formatting.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatter.FormatLine(Avalonia.Media.TextFormatting.ITextSource,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)">
            <summary>
            Formats a text line.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="firstTextSourceIndex">The first character index to start the text line from.</param>
            <param name="paragraphWidth">A <see cref="T:System.Double"/> value that specifies the width of the paragraph that the line fills.</param>
            <param name="paragraphProperties">A <see cref="T:Avalonia.Media.TextFormatting.TextParagraphProperties"/> value that represents paragraph properties,
            such as TextWrapping, TextAlignment, or TextStyle.</param>
            <param name="previousLineBreak">A <see cref="T:Avalonia.Media.TextFormatting.TextLineBreak"/> value that specifies the text formatter state,
            in terms of where the previous line in the paragraph was broken by the text formatting process.</param>
            <returns>The formatted line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.FormatLine(Avalonia.Media.TextFormatting.ITextSource,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)">
            <inheritdoc cref="M:Avalonia.Media.TextFormatting.TextFormatter.FormatLine(Avalonia.Media.TextFormatting.ITextSource,System.Int32,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)"/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.TryMeasureCharacters(Avalonia.Media.TextFormatting.ShapedTextCharacters,System.Double,System.Int32@)">
            <summary>
            Measures the number of characters that fit into available width.
            </summary>
            <param name="textCharacters">The text run.</param>
            <param name="availableWidth">The available width.</param>
            <param name="count">The count of fitting characters.</param>
            <returns>
            <c>true</c> if characters fit into the available width; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.SplitTextRuns(System.Collections.Generic.List{Avalonia.Media.TextFormatting.ShapedTextCharacters},System.Int32)">
            <summary>
            Split a sequence of runs into two segments at specified length.
            </summary>
            <param name="textRuns">The text run's.</param>
            <param name="length">The length to split at.</param>
            <returns>The split text runs.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.FetchTextRuns(Avalonia.Media.TextFormatting.ITextSource,System.Int32,Avalonia.Media.TextFormatting.TextLineBreak,Avalonia.Media.TextFormatting.TextLineBreak@)">
            <summary>
            Fetches text runs.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="firstTextSourceIndex">The first text source index.</param>
            <param name="previousLineBreak">Previous line break. Can be null.</param>
            <param name="nextLineBreak">Next line break. Can be null.</param>
            <returns>
            The formatted text runs.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.PerformTextWrapping(System.Collections.Generic.List{Avalonia.Media.TextFormatting.ShapedTextCharacters},Avalonia.Media.TextFormatting.TextRange,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties,Avalonia.Media.TextFormatting.TextLineBreak)">
            <summary>
            Performs text wrapping returns a list of text lines.
            </summary>
            <param name="textRuns">The text run's.</param>
            <param name="textRange">The text range that is covered by the text runs.</param>
            <param name="paragraphWidth">The paragraph width.</param>
            <param name="paragraphProperties">The text paragraph properties.</param>
            <param name="currentLineBreak">The current line break if the line was explicitly broken.</param>
            <returns>The wrapped text line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextFormatterImpl.GetTextRange(System.Collections.Generic.IReadOnlyList{Avalonia.Media.TextFormatting.TextRun})">
            <summary>
            Gets the text range that is covered by the text runs.
            </summary>
            <param name="textRuns">The text runs.</param>
            <returns>The text range that is covered by the text runs.</returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextFormatterImpl.SplitTextRunsResult.First">
            <summary>
            Gets the first text runs.
            </summary>
            <value>
            The first text runs.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextFormatterImpl.SplitTextRunsResult.Second">
            <summary>
            Gets the second text runs.
            </summary>
            <value>
            The second text runs.
            </value>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextLayout">
            <summary>
            Represents a multi line text layout.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.#ctor(System.String,Avalonia.Media.Typeface,System.Double,Avalonia.Media.IBrush,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,Avalonia.Media.TextTrimming,Avalonia.Media.TextDecorationCollection,System.Double,System.Double,System.Double,System.Int32,System.Collections.Generic.IReadOnlyList{Avalonia.Utilities.ValueSpan{Avalonia.Media.TextFormatting.TextRunProperties}})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TextFormatting.TextLayout" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="typeface">The typeface.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="foreground">The foreground.</param>
            <param name="textAlignment">The text alignment.</param>
            <param name="textWrapping">The text wrapping.</param>
            <param name="textTrimming">The text trimming.</param>
            <param name="textDecorations">The text decorations.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <param name="lineHeight">The height of each line of text.</param>
            <param name="maxLines">The maximum number of text lines.</param>
            <param name="textStyleOverrides">The text style overrides.</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.LineHeight">
            <summary>
            Gets or sets the height of each line of text.
            </summary>
            <remarks>
            A value of NaN (equivalent to an attribute value of "Auto") indicates that the line height
            is determined automatically from the current font characteristics. The default is NaN.
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.MaxWidth">
            <summary>
            Gets the maximum width.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.MaxHeight">
            <summary>
            Gets the maximum height.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.MaxLines">
            <summary>
            Gets the maximum number of text lines.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.TextLines">
            <summary>
            Gets the text lines.
            </summary>
            <value>
            The text lines.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLayout.Size">
            <summary>
            Gets the size of the layout.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.Draw(Avalonia.Media.DrawingContext)">
            <summary>
            Draws the text layout.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.CreateTextParagraphProperties(Avalonia.Media.Typeface,System.Double,Avalonia.Media.IBrush,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,Avalonia.Media.TextDecorationCollection,System.Double)">
            <summary>
            Creates the default <see cref="T:Avalonia.Media.TextFormatting.TextParagraphProperties"/> that are used by the <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/>.
            </summary>
            <param name="typeface">The typeface.</param>
            <param name="fontSize">The font size.</param>
            <param name="foreground">The foreground.</param>
            <param name="textAlignment">The text alignment.</param>
            <param name="textWrapping">The text wrapping.</param>
            <param name="textDecorations">The text decorations.</param>
            <param name="lineHeight">The height of each line of text.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.UpdateBounds(Avalonia.Media.TextFormatting.TextLine,System.Double@,System.Double@)">
            <summary>
            Updates the current bounds.
            </summary>
            <param name="textLine">The text line.</param>
            <param name="width">The current width.</param>
            <param name="height">The current height.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.CreateEmptyTextLine(System.Int32)">
            <summary>
            Creates an empty text line.
            </summary>
            <returns>The empty text line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.UpdateLayout">
            <summary>
            Updates the layout and applies specified text style overrides.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.GetCollapsingProperties(System.Double)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.TextCollapsingProperties"/> for current text trimming mode.
            </summary>
            <param name="width">The collapsing width.</param>
            <returns>The <see cref="T:Avalonia.Media.TextFormatting.TextCollapsingProperties"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLayout.FormattedTextSource.CreateTextStyleRun(Avalonia.Utilities.ReadOnlySlice{System.Char},Avalonia.Media.TextFormatting.TextRunProperties,System.Collections.Generic.IReadOnlyList{Avalonia.Utilities.ValueSpan{Avalonia.Media.TextFormatting.TextRunProperties}})">
            <summary>
            Creates a span of text run properties that has modifier applied.
            </summary>
            <param name="text">The text to create the properties for.</param>
            <param name="defaultProperties">The default text properties.</param>
            <param name="textModifier">The text properties modifier.</param>
            <returns>
            The created text style run.
            </returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextLine">
            <summary>
            Represents a line of text that is used for text rendering.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.TextRange">
            <summary>
            Gets the text range that is covered by the line.
            </summary>
            <value>
            The text range that is covered by the line.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.TextRuns">
            <summary>
            Gets the text runs.
            </summary>
            <value>
            The text runs.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.LineMetrics">
            <summary>
            Gets the line metrics.
            </summary>
            <value>
            The line metrics.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.TextLineBreak">
            <summary>
            Gets the state of the line when broken by line breaking process.
            </summary>
            <returns>
            A <see cref="P:Avalonia.Media.TextFormatting.TextLine.TextLineBreak"/> value that represents the line break.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLine.HasCollapsed">
            <summary>
            Gets a value that indicates whether the line is collapsed.
            </summary>
            <returns>
            <c>true</c>, if the line is collapsed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.Draw(Avalonia.Media.DrawingContext)">
            <summary>
            Draws the <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> at the given origin.
            </summary>
            <param name="drawingContext">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.Collapse(Avalonia.Media.TextFormatting.TextCollapsingProperties[])">
            <summary>
            Create a collapsed line based on collapsed text properties.
            </summary>
            <param name="collapsingPropertiesList">A list of <see cref="T:Avalonia.Media.TextFormatting.TextCollapsingProperties"/>
            objects that represent the collapsed text properties.</param>
            <returns>
            A <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> value that represents a collapsed line that can be displayed.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetCharacterHitFromDistance(System.Double)">
            <summary>
            Gets the character hit corresponding to the specified distance from the beginning of the line.
            </summary>
            <param name="distance">A <see cref="T:System.Double"/> value that represents the distance from the beginning of the line.</param>
            <returns>The <see cref="T:Avalonia.Media.CharacterHit"/> object at the specified distance from the beginning of the line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the distance from the beginning of the line to the specified character hit.
            <see cref="T:Avalonia.Media.CharacterHit"/>.
            </summary>
            <param name="characterHit">The <see cref="T:Avalonia.Media.CharacterHit"/> object whose distance you want to query.</param>
            <returns>A <see cref="T:System.Double"/> that represents the distance from the beginning of the line.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetNextCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the next character hit for caret navigation.
            </summary>
            <param name="characterHit">The current <see cref="T:Avalonia.Media.CharacterHit"/>.</param>
            <returns>The next <see cref="T:Avalonia.Media.CharacterHit"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the previous character hit for caret navigation.
            </summary>
            <param name="characterHit">The current <see cref="T:Avalonia.Media.CharacterHit"/>.</param>
            <returns>The previous <see cref="T:Avalonia.Media.CharacterHit"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetBackspaceCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <summary>
            Gets the previous character hit after backspacing.
            </summary>
            <param name="characterHit">The current <see cref="T:Avalonia.Media.CharacterHit"/>.</param>
            <returns>The <see cref="T:Avalonia.Media.CharacterHit"/> after backspacing.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLine.GetParagraphOffsetX(System.Double,System.Double,Avalonia.Media.TextAlignment)">
            <summary>
            Gets the text line offset x.
            </summary>
            <param name="lineWidth">The line width.</param>
            <param name="paragraphWidth">The paragraph width.</param>
            <param name="textAlignment">The text alignment.</param>
            <returns>The paragraph offset.</returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineBreak.RemainingCharacters">
            <summary>
            Get the remaining shaped characters that were split up by the <see cref="T:Avalonia.Media.TextFormatting.TextFormatter"/> during the formatting process.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.TextRange">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.TextRuns">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.LineMetrics">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.TextLineBreak">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineImpl.HasCollapsed">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.Draw(Avalonia.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.Collapse(Avalonia.Media.TextFormatting.TextCollapsingProperties[])">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetCharacterHitFromDistance(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetDistanceFromCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetNextCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetPreviousCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetBackspaceCaretCharacterHit(Avalonia.Media.CharacterHit)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.DistanceFromCodepointIndex(System.Int32)">
            <summary>
            Get distance from line start to the specified codepoint index.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.TryFindNextCharacterHit(Avalonia.Media.CharacterHit,Avalonia.Media.CharacterHit@)">
            <summary>
            Tries to find the next character hit.
            </summary>
            <param name="characterHit">The current character hit.</param>
            <param name="nextCharacterHit">The next character hit.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.TryFindPreviousCharacterHit(Avalonia.Media.CharacterHit,Avalonia.Media.CharacterHit@)">
            <summary>
            Tries to find the previous character hit.
            </summary>
            <param name="characterHit">The current character hit.</param>
            <param name="previousCharacterHit">The previous character hit.</param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetRunIndexAtCodepointIndex(System.Int32)">
            <summary>
            Gets the run index of the specified codepoint index.
            </summary>
            <param name="codepointIndex">The codepoint index.</param>
            <returns>The text run index.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.CreateShapedSymbol(Avalonia.Media.TextFormatting.TextRun)">
            <summary>
            Creates a shaped symbol.
            </summary>
            <param name="textRun">The symbol run to shape.</param>
            <returns>
            The shaped symbol.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineImpl.GetShapedWidth(System.Collections.Generic.IReadOnlyList{Avalonia.Media.TextFormatting.ShapedTextCharacters})">
            <summary>
            Gets the shaped width of specified shaped text characters.
            </summary>
            <param name="shapedTextCharacters">The shaped text characters.</param>
            <returns>
            The shaped width.
            </returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextLineMetrics">
            <summary>
            Represents a metric for a <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> objects,
            that holds information about ascent, descent, line gap, size and origin of the text line.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.TextRange">
            <summary>
            Gets the text range that is covered by the text line.
            </summary>
            <value>
            The text range that is covered by the text line.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.Size">
            <summary>
            Gets the size of the text line.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.TextBaseline">
            <summary>
            Gets the distance from the top to the baseline of the line of text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextLineMetrics.HasOverflowed">
            <summary>
            Gets a boolean value that indicates whether content of the line overflows 
            the specified paragraph width.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextLineMetrics.Create(System.Collections.Generic.IEnumerable{Avalonia.Media.TextFormatting.TextRun},Avalonia.Media.TextFormatting.TextRange,System.Double,Avalonia.Media.TextFormatting.TextParagraphProperties)">
            <summary>
            Creates the text line metrics.
            </summary>
            <param name="textRuns">The text runs.</param>
            <param name="textRange">The text range that is covered by the text line.</param>
            <param name="paragraphWidth">The paragraph width.</param>
            <param name="paragraphProperties">The text alignment.</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextParagraphProperties">
            <summary>
            Provides a set of properties that are used during the paragraph layout.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.TextAlignment">
            <summary>
            Gets the text alignment.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.DefaultTextRunProperties">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.TextDecorations">
            <summary>
            If not null, text decorations to apply to all runs in the line. This is in addition
            to any text decorations specified by the TextRunProperties for individual text runs.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.TextWrapping">
            <summary>
            Gets the text wrapping.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextParagraphProperties.LineHeight">
            <summary>
            Paragraph's line height
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextRange">
            <summary>
            References a portion of a text buffer.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRange.Start">
            <summary>
            Gets the start.
            </summary>
            <value>
            The start.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRange.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRange.End">
            <summary>
            Gets the end.
            </summary>
            <value>
            The end.
            </value>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextRange.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of the slice.
            </summary>
            <param name="length">The number of elements to return.</param>
            <returns>A <see cref="T:Avalonia.Media.TextFormatting.TextRange"/> that contains the specified number of elements from the start of this slice.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextRange.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in the slice and then returns the remaining elements.
            </summary>
            <param name="length">The number of elements to skip before returning the remaining elements.</param>
            <returns>A <see cref="T:Avalonia.Media.TextFormatting.TextRange"/> that contains the elements that occur after the specified index in this slice.</returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextRun">
            <summary>
            Represents a portion of a <see cref="T:Avalonia.Media.TextFormatting.TextLine"/> object.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRun.TextSourceLength">
            <summary>
             Gets the text source length.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRun.Text">
            <summary>
            Gets the text run's text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRun.Properties">
            <summary>
            A set of properties shared by every characters in the run
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextRunProperties">
            <summary>
            Provides a set of properties, such as typeface or foreground brush, that can be applied to a TextRun object. This is an abstract class.
            </summary>
            <remarks>
            The text layout client provides a concrete implementation of this abstract class.
            This enables the client to implement text run properties in a way that corresponds with the associated formatting store.
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.Typeface">
            <summary>
            Run typeface
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.FontRenderingEmSize">
            <summary>
            Em size of font used to format and display text
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.TextDecorations">
            <summary>
             Run TextDecorations. 
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.ForegroundBrush">
            <summary>
            Brush used to fill text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.BackgroundBrush">
            <summary>
            Brush used to paint background of run.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextRunProperties.CultureInfo">
            <summary>
            Run text culture.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextShaper">
            <summary>
            A class that is responsible for text shaping.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextShaper.Current">
            <summary>
            Gets the current text shaper.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextShaper.ShapeText(Avalonia.Utilities.ReadOnlySlice{System.Char},Avalonia.Media.Typeface,System.Double,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:Avalonia.Platform.ITextShaperImpl.ShapeText(Avalonia.Utilities.ReadOnlySlice{System.Char},Avalonia.Media.Typeface,System.Double,System.Globalization.CultureInfo)"/>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis">
            <summary>
            a collapsing properties to collapse whole line toward the end
            at character granularity and with ellipsis being the collapsing symbol
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.#ctor(System.Double,Avalonia.Media.TextFormatting.TextRunProperties)">
            <summary>
            Construct a text trailing character ellipsis collapsing properties
            </summary>
            <param name="width">width in which collapsing is constrained to</param>
            <param name="textRunProperties">text run properties of ellispis symbol</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.Width">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.Symbol">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingCharacterEllipsis.Style">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis">
            <summary>
            a collapsing properties to collapse whole line toward the end
            at word granularity and with ellipsis being the collapsing symbol
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.#ctor(System.Double,Avalonia.Media.TextFormatting.TextRunProperties)">
            <summary>
            Construct a text trailing word ellipsis collapsing properties
            </summary>
            <param name="width">width in which collapsing is constrained to</param>
            <param name="textRunProperties">text run properties of ellispis symbol</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.Width">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.Symbol">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.TextTrailingWordEllipsis.Style">
            <inheritdoc/>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.Codepoint.ReplacementCodepoint">
            <summary>
            The replacement codepoint that is used for non supported values.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.Value">
            <summary>
            Get the codepoint's value.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.GeneralCategory">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.GeneralCategory"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.Script">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.Script"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.BiDiClass">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BiDiClass"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.LineBreakClass">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.LineBreakClass"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.GraphemeBreakClass">
            <summary>
            Gets the <see cref="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.GraphemeBreakClass"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.IsBreakChar">
            <summary>
            Determines whether this <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> is a break char.
            </summary>
            <returns>
            <c>true</c> if [is break character]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Codepoint.IsWhiteSpace">
            <summary>
            Determines whether this <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> is white space.
            </summary>
            <returns>
            <c>true</c> if [is whitespace]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.Codepoint.ReadAt(Avalonia.Utilities.ReadOnlySlice{System.Char},System.Int32,System.Int32@)">
            <summary>
            Reads the <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> at specified position.
            </summary>
            <param name="text">The buffer to read from.</param>
            <param name="index">The index to read at.</param>
            <param name="count">The count of character that were read.</param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.CodepointEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.CodepointEnumerator.MoveNext">
            <summary>
            Moves to the next <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.Grapheme">
            <summary>
            Represents the smallest unit of a writing system of any given language.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Grapheme.FirstCodepoint">
            <summary>
            The first <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/> of the grapheme cluster.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.Grapheme.Text">
            <summary>
            The text that is representing the <see cref="T:Avalonia.Media.TextFormatting.Unicode.Grapheme"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.GraphemeEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Avalonia.Media.TextFormatting.Unicode.Grapheme"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.GraphemeEnumerator.MoveNext">
            <summary>
            Moves to the next <see cref="T:Avalonia.Media.TextFormatting.Unicode.Grapheme"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.GraphemeEnumerator.Processor.CurrentType">
            <summary>
            Will be <see cref="F:Avalonia.Media.TextFormatting.Unicode.GraphemeBreakClass.Other"/> if invalid data or EOF reached.
            Caller shouldn't need to special-case this since the normal rules will halt on this condition.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.GraphemeEnumerator.Processor.CurrentCodepoint">
            <summary>
                Get the currently processed <see cref="T:Avalonia.Media.TextFormatting.Unicode.Codepoint"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.LineBreak">
            <summary>
            Information about a potential line break position
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.LineBreak.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="positionMeasure">The code point index to measure to</param>
            <param name="positionWrap">The code point index to actually break the line at</param>
            <param name="required">True if this is a required line break; otherwise false</param>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.LineBreak.PositionMeasure">
            <summary>
            The break position, before any trailing whitespace
            </summary>
            <remarks>
            This doesn't include trailing whitespace
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.LineBreak.PositionWrap">
            <summary>
            The break position, after any trailing whitespace
            </summary>
            <remarks>
            This includes trailing whitespace
            </remarks>
        </member>
        <member name="P:Avalonia.Media.TextFormatting.Unicode.LineBreak.Required">
            <summary>
            True if there should be a forced line break here
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.LineBreakEnumerator">
            <summary>
            Implementation of the Unicode Line Break Algorithm. UAX:14
            <see href="https://www.unicode.org/reports/tr14/tr14-37.html"/>
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.DIBRK">
            <summary>
            Direct break opportunity
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.INBRK">
            <summary>
            Indirect break opportunity
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.CIBRK">
            <summary>
            Indirect break opportunity for combining marks
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.CPBRK">
            <summary>
            Prohibited break for combining marks
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextFormatting.Unicode.LineBreakPairTable.PRBRK">
            <summary>
            Prohibited break
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextFormatting.Unicode.UnicodeData">
            <summary>
                Helper for looking up unicode character class information
            </summary>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetGeneralCategory(System.Int32)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.GeneralCategory"/> for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's general category.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetScript(System.Int32)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.Script"/> for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's script.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetBiDiClass(System.Int32)">
            <summary>
            Gets the <see cref="T:Avalonia.Media.TextFormatting.Unicode.BiDiClass"/> for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's biDi class.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetLineBreakClass(System.Int32)">
            <summary>
            Gets the line break class for a Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's line break class.</returns>
        </member>
        <member name="M:Avalonia.Media.TextFormatting.Unicode.UnicodeData.GetGraphemeClusterBreak(System.Int32)">
            <summary>
            Gets the grapheme break type for the Unicode codepoint.
            </summary>
            <param name="codepoint">The codepoint in question.</param>
            <returns>The code point's grapheme break type.</returns>
        </member>
        <member name="T:Avalonia.Media.TextHitTestResult">
            <summary>
            Holds a hit test result from a <see cref="T:Avalonia.Media.FormattedText"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextHitTestResult.IsInside">
            <summary>
            Gets or sets a value indicating whether the point is inside the bounds of the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextHitTestResult.TextPosition">
            <summary>
            Gets the index of the hit character in the text.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TextHitTestResult.IsTrailing">
            <summary>
            Gets a value indicating whether the hit is on the trailing edge of the character.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextTrimming">
            <summary>
            Describes how text is trimmed when it overflows.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextTrimming.None">
            <summary>
            Text is not trimmed.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextTrimming.CharacterEllipsis">
            <summary>
            Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextTrimming.WordEllipsis">
            <summary>
            Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TextWrapping">
            <summary>
            Controls the wrapping mode of text.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextWrapping.NoWrap">
            <summary>
            Text should not wrap.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextWrapping.Wrap">
            <summary>
            Text can wrap.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TextWrapping.WrapWithOverflow">
            <summary>
            Line-breaking occurs if the line overflows the available block width.
            However, a line may overflow the block width if the line breaking algorithm
            cannot determine a break opportunity, as in the case of a very long word.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TileMode">
            <summary>
            Describes how a <see cref="T:Avalonia.Media.TileBrush"/> is tiled.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.None">
            <summary>
            A single repeat of the content will be displayed.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.FlipX">
            <summary>
            The content will be repeated horizontally, with alternate tiles mirrored.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.FlipY">
            <summary>
            The content will be repeated vertically, with alternate tiles mirrored.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.FlipXY">
            <summary>
            The content will be repeated horizontally and vertically, with alternate tiles mirrored.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileMode.Tile">
            <summary>
            The content will be repeated.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TileBrush">
            <summary>
            Base class for brushes which display repeating images.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.AlignmentXProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.AlignmentX"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.AlignmentYProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.AlignmentY"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.DestinationRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.DestinationRect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.SourceRectProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.SourceRect"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.StretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.Stretch"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TileBrush.TileModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TileBrush.TileMode"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.AlignmentX">
            <summary>
            Gets or sets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.AlignmentY">
            <summary>
            Gets or sets the horizontal alignment of a tile in the destination.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.DestinationRect">
            <summary>
            Gets or sets the rectangle on the destination in which to paint a tile.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.SourceRect">
            <summary>
            Gets or sets the rectangle of the source image that will be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.Stretch">
            <summary>
            Gets or sets a value controlling how the source rectangle will be stretched to fill
            the destination rect.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.TileMode">
            <summary>
            Gets or sets the brush's tile mode.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TileBrush.BitmapInterpolationMode">
            <summary>
            Gets or sets the bitmap interpolation mode.
            </summary>
            <value>
            The bitmap interpolation mode.
            </value>
        </member>
        <member name="T:Avalonia.Media.Transform">
            <summary>
            Represents a transform on an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="E:Avalonia.Media.Transform.Changed">
            <summary>
            Raised when the transform changes.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transform.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.Transform"/> string.
            </summary>
            <param name="s">Six comma-delimited double values that describe the new <see cref="T:Avalonia.Media.Transform"/>. For details check <see cref="M:Avalonia.Matrix.Parse(System.String)"/> </param>
            <returns>The <see cref="T:Avalonia.Media.Transform"/>.</returns>
        </member>
        <member name="M:Avalonia.Media.Transform.RaiseChanged">
            <summary>
            Raises the <see cref="E:Avalonia.Media.Transform.Changed"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transform.ToString">
            <summary>
            Returns a String representing this transform matrix instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:Avalonia.Media.Transformation.TransformOperation">
            <summary>
            Represents a single primitive transform (like translation, rotation, scale, etc.).
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transformation.TransformOperation.IsIdentity">
            <summary>
            Returns whether operation produces the identity matrix.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transformation.TransformOperation.Bake">
            <summary>
            Bakes this operation to a transform matrix.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transformation.TransformOperation.Identity">
            <summary>
            Returns new identity transform operation.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Transformation.TransformOperation.TryInterpolate(System.Nullable{Avalonia.Media.Transformation.TransformOperation},System.Nullable{Avalonia.Media.Transformation.TransformOperation},System.Double,Avalonia.Media.Transformation.TransformOperation@)">
            <summary>
            Attempts to interpolate between two transform operations.
            </summary>
            <param name="from">Source operation.</param>
            <param name="to">Target operation.</param>
            <param name="progress">Interpolation progress.</param>
            <param name="result">Interpolation result that will be filled in when operation was successful.</param>
            <remarks>
            Based upon https://www.w3.org/TR/css-transforms-1/#interpolation-of-transform-functions.
            </remarks>
        </member>
        <member name="T:Avalonia.Media.Transformation.TransformOperations">
            <summary>
            Contains a list of <see cref="T:Avalonia.Media.Transformation.TransformOperation"/> that represent primitive transforms that will be
            applied in declared order.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Transformation.TransformOperations.IsIdentity">
            <summary>
            Returns whether all operations combined together produce the identity matrix.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TransformConverter">
            <summary>
            Creates an <see cref="T:Avalonia.Media.ITransform"/> from a string representation.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TransformGroup.ChildrenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TransformGroup.Children"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TransformGroup.Children">
            <summary>
            Gets or sets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Avalonia.Media.TransformGroup.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix" />.
            </summary>
        </member>
        <member name="T:Avalonia.Media.TranslateTransform">
            <summary>
            Translates (moves) an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TranslateTransform.XProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TranslateTransform.X"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Media.TranslateTransform.YProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.TranslateTransform.Y"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TranslateTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TranslateTransform"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.TranslateTransform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.TranslateTransform"/> class.
            </summary>
            <param name="x">Gets the horizontal offset of the translate.</param>
            <param name="y">Gets the vertical offset of the translate.</param>
        </member>
        <member name="P:Avalonia.Media.TranslateTransform.X">
            <summary>
            Gets the horizontal offset of the translate.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TranslateTransform.Y">
            <summary>
            Gets the vertical offset of the translate.
            </summary>
        </member>
        <member name="P:Avalonia.Media.TranslateTransform.Value">
            <summary>
            Gets the transform's <see cref="T:Avalonia.Matrix"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Media.Typeface">
            <summary>
            Represents a typeface.
            </summary>
        </member>
        <member name="M:Avalonia.Media.Typeface.#ctor(Avalonia.Media.FontFamily,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Typeface"/> class.
            </summary>
            <param name="fontFamily">The font family.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weight.</param>
        </member>
        <member name="M:Avalonia.Media.Typeface.#ctor(System.String,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.Typeface"/> class.
            </summary>
            <param name="fontFamilyName">The name of the font family.</param>
            <param name="style">The font style.</param>
            <param name="weight">The font weight.</param>
        </member>
        <member name="P:Avalonia.Media.Typeface.FontFamily">
            <summary>
            Gets the font family.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Typeface.Style">
            <summary>
            Gets the font style.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Typeface.Weight">
            <summary>
            Gets the font weight.
            </summary>
        </member>
        <member name="P:Avalonia.Media.Typeface.GlyphTypeface">
            <summary>
            Gets the glyph typeface.
            </summary>
            <value>
            The glyph typeface.
            </value>
        </member>
        <member name="T:Avalonia.Media.UnicodeRange">
            <summary>
            The <see cref="T:Avalonia.Media.UnicodeRange"/> descripes a set of Unicode characters.
            </summary>
        </member>
        <member name="M:Avalonia.Media.UnicodeRange.IsInRange(System.Int32)">
            <summary>
            Determines if given value is inside the range.
            </summary>
            <param name="value">The value to verify.</param>
            <returns>
            <c>true</c> If given value is inside the range, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.UnicodeRange.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.UnicodeRange"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>The parsed <see cref="T:Avalonia.Media.UnicodeRange"/>.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="P:Avalonia.Media.UnicodeRangeSegment.Start">
            <summary>
            Get the start of the segment.
            </summary>
        </member>
        <member name="P:Avalonia.Media.UnicodeRangeSegment.End">
            <summary>
            Get the end of the segment.
            </summary>
        </member>
        <member name="M:Avalonia.Media.UnicodeRangeSegment.IsInRange(System.Int32)">
            <summary>
            Determines if given value is inside the range segment.
            </summary>
            <param name="value">The value to verify.</param>
            <returns>
            <c>true</c> If given value is inside the range segment, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Media.UnicodeRangeSegment.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Media.UnicodeRangeSegment"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>The parsed <see cref="T:Avalonia.Media.UnicodeRangeSegment"/>.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:Avalonia.Media.VisualBrush">
            <summary>
            Paints an area with an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Media.VisualBrush.VisualProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Media.VisualBrush.Visual"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Media.VisualBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.VisualBrush"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Media.VisualBrush.#ctor(Avalonia.VisualTree.IVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Media.VisualBrush"/> class.
            </summary>
            <param name="visual">The visual to draw.</param>
        </member>
        <member name="P:Avalonia.Media.VisualBrush.Visual">
            <summary>
            Gets or sets the visual to draw.
            </summary>
        </member>
        <member name="M:Avalonia.Media.VisualBrush.ToImmutable">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode">
            <summary>
            Controls the way the bitmaps are drawn together.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.SourceOver">
            <summary>
            Source is placed over the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.Source">
            <summary>
            Only the source will be present.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.Destination">
            <summary>
            Only the destination will be present.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.DestinationOver">
            <summary>
            Destination is placed over the source.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.SourceIn">
            <summary>
            The source that overlaps the destination, replaces the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.DestinationIn">
            <summary>
            Destination which overlaps the source, replaces the source.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.SourceOut">
            <summary>
            Source is placed, where it falls outside of the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.DestinationOut">
            <summary>
            Destination is placed, where it falls outside of the source.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.SourceAtop">
            <summary>
            Source which overlaps the destination, replaces the destination.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.DestinationAtop">
            <summary>
            Destination which overlaps the source replaces the source.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.Xor">
            <summary>
            The non-overlapping regions of source and destination are combined.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode.Plus">
            <summary>
            Display the sum of the source image and destination image.
            </summary>
        </member>
        <member name="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode">
            <summary>
            Controls the performance and quality of bitmap scaling.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode.Default">
            <summary>
            Uses the default behavior of the underling render backend.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode.LowQuality">
            <summary>
            The best performance but worst image quality.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode.MediumQuality">
            <summary>
            Good performance and decent image quality.
            </summary>
        </member>
        <member name="F:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode.HighQuality">
            <summary>
            Highest quality but worst performance.
            </summary>
        </member>
        <member name="T:Avalonia.PixelPoint">
            <summary>
            Represents a point in device pixels.
            </summary>
        </member>
        <member name="F:Avalonia.PixelPoint.Origin">
            <summary>
            A point representing 0,0.
            </summary>
        </member>
        <member name="M:Avalonia.PixelPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelPoint"/> structure.
            </summary>
            <param name="x">The X co-ordinate.</param>
            <param name="y">The Y co-ordinate.</param>
        </member>
        <member name="P:Avalonia.PixelPoint.X">
            <summary>
            Gets the X co-ordinate.
            </summary>
        </member>
        <member name="P:Avalonia.PixelPoint.Y">
            <summary>
            Gets the Y co-ordinate.
            </summary>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Equality(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.PixelPoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Inequality(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.PixelPoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Implicit(Avalonia.PixelPoint)~Avalonia.PixelVector">
            <summary>
            Converts the <see cref="T:Avalonia.Point"/> to a <see cref="T:Avalonia.Vector"/>.
            </summary>
            <param name="p">The point.</param>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Addition(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Adds two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Addition(Avalonia.PixelPoint,Avalonia.PixelVector)">
            <summary>
            Adds a vector to a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Subtraction(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Subtracts two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.op_Subtraction(Avalonia.PixelPoint,Avalonia.PixelVector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.PixelPoint"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.PixelPoint"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.Equals(Avalonia.PixelPoint)">
            <summary>
            Returns a boolean indicating whether the point is equal to the other given point.
            </summary>
            <param name="other">The other point to test equality against.</param>
            <returns>True if this point is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.Equals(System.Object)">
            <summary>
            Checks for equality between a point and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a point that equals the current point.
            </returns>
        </member>
        <member name="M:Avalonia.PixelPoint.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.PixelPoint"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.WithX(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelPoint"/> with the same Y co-ordinate and the specified X co-ordinate.
            </summary>
            <param name="x">The X co-ordinate.</param>
            <returns>The new <see cref="T:Avalonia.PixelPoint"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.WithY(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelPoint"/> with the same X co-ordinate and the specified Y co-ordinate.
            </summary>
            <param name="y">The Y co-ordinate.</param>
            <returns>The new <see cref="T:Avalonia.PixelPoint"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPoint(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPoint(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPointWithDpi(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToPointWithDpi(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelPoint"/> to a device-independent <see cref="T:Avalonia.Point"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPoint(Avalonia.Point,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="point">The point.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPoint(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="point">The point.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPointWithDpi(Avalonia.Point,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="point">The point.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.FromPointWithDpi(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Point"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="point">The point.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelPoint.ToString">
            <summary>
            Returns the string representation of the point.
            </summary>
            <returns>The string representation of the point.</returns>
        </member>
        <member name="T:Avalonia.PixelRect">
            <summary>
            Represents a rectangle in device pixels.
            </summary>
        </member>
        <member name="F:Avalonia.PixelRect.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(Avalonia.PixelSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(Avalonia.PixelPoint,Avalonia.PixelSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.PixelRect.#ctor(Avalonia.PixelPoint,Avalonia.PixelPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelRect"/> structure.
            </summary>
            <param name="topLeft">The top left position of the rectangle.</param>
            <param name="bottomRight">The bottom right position of the rectangle.</param>
        </member>
        <member name="P:Avalonia.PixelRect.X">
            <summary>
            Gets the X position.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Y">
            <summary>
            Gets the Y position.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Position">
            <summary>
            Gets the position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Right">
            <summary>
            Gets the right position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Bottom">
            <summary>
            Gets the bottom position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.TopLeft">
            <summary>
            Gets the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.TopRight">
            <summary>
            Gets the top right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.BottomLeft">
            <summary>
            Gets the bottom left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.BottomRight">
            <summary>
            Gets the bottom right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.Center">
            <summary>
            Gets the center point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.PixelRect.IsEmpty">
            <summary>
            Gets a value that indicates whether the rectangle is empty.
            </summary>
        </member>
        <member name="M:Avalonia.PixelRect.op_Equality(Avalonia.PixelRect,Avalonia.PixelRect)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.PixelRect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.op_Inequality(Avalonia.PixelRect,Avalonia.PixelRect)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.PixelRect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Contains(Avalonia.PixelPoint)">
            <summary>
            Determines whether a point in in the bounds of the rectangle.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ContainsExclusive(Avalonia.PixelPoint)">
            <summary>
            Determines whether a point is in the bounds of the rectangle, exclusive of the
            rectangle's bottom/right edge.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>    
        </member>
        <member name="M:Avalonia.PixelRect.Contains(Avalonia.PixelRect)">
            <summary>
            Determines whether the rectangle fully contains another rectangle.
            </summary>
            <param name="r">The rectangle.</param>
            <returns>true if the rectangle is fully contained; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.CenterRect(Avalonia.PixelRect)">
            <summary>
            Centers another rectangle in this rectangle.
            </summary>
            <param name="rect">The rectangle to center.</param>
            <returns>The centered rectangle.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Equals(Avalonia.PixelRect)">
            <summary>
            Returns a boolean indicating whether the rect is equal to the other given rect.
            </summary>
            <param name="other">The other rect to test equality against.</param>
            <returns>True if this rect is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given object is equal to this rectangle.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if the object is equal to this rectangle; false otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Intersect(Avalonia.PixelRect)">
            <summary>
            Gets the intersection of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The intersection.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Intersects(Avalonia.PixelRect)">
            <summary>
            Determines whether a rectangle intersects with this rectangle.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>
            True if the specified rectangle intersects with this one; otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.PixelRect.Translate(Avalonia.PixelVector)">
            <summary>
            Translates the rectangle by an offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>The translated rectangle.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Union(Avalonia.PixelRect)">
            <summary>
            Gets the union of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The union.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithX(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified X position.
            </summary>
            <param name="x">The x position.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithY(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified Y position.
            </summary>
            <param name="y">The y position.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithWidth(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.WithHeight(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelRect"/> with the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRect(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRect(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRectWithDpi(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToRectWithDpi(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelRect"/> to a device-independent <see cref="T:Avalonia.Rect"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRect(Avalonia.Rect,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="rect">The rect.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent rect.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRect(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="rect">The rect.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRectWithDpi(Avalonia.Rect,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="rect">The rect.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.FromRectWithDpi(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Rect"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="rect">The rect.</param>
            <param name="dpi">The dots per inch of the device.</param>
            <returns>The device-independent point.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.ToString">
            <summary>
            Returns the string representation of the rectangle.
            </summary>
            <returns>The string representation of the rectangle.</returns>
        </member>
        <member name="M:Avalonia.PixelRect.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.PixelRect"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.PixelRect"/>.</returns>
        </member>
        <member name="T:Avalonia.PixelSize">
            <summary>
            Represents a size in device pixels.
            </summary>
        </member>
        <member name="F:Avalonia.PixelSize.Empty">
            <summary>
            A size representing zero
            </summary>
        </member>
        <member name="M:Avalonia.PixelSize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelSize"/> structure.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Avalonia.PixelSize.AspectRatio">
            <summary>
            Gets the aspect ratio of the size.
            </summary>
        </member>
        <member name="P:Avalonia.PixelSize.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.PixelSize.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Avalonia.PixelSize.op_Equality(Avalonia.PixelSize,Avalonia.PixelSize)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.PixelSize"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.op_Inequality(Avalonia.PixelSize,Avalonia.PixelSize)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Size"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.PixelSize"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.PixelSize"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.Equals(Avalonia.PixelSize)">
            <summary>
            Returns a boolean indicating whether the size is equal to the other given size.
            </summary>
            <param name="other">The other size to test equality against.</param>
            <returns>True if this size is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.Equals(System.Object)">
            <summary>
            Checks for equality between a size and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a size that equals the current size.
            </returns>
        </member>
        <member name="M:Avalonia.PixelSize.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.PixelSize"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.WithWidth(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelSize"/> with the same height and the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.PixelSize"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.WithHeight(System.Int32)">
            <summary>
            Returns a new <see cref="T:Avalonia.PixelSize"/> with the same width and the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.PixelSize"/>.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSize(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSize(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified scaling factor.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSizeWithDpi(System.Double)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToSizeWithDpi(Avalonia.Vector)">
            <summary>
            Converts the <see cref="T:Avalonia.PixelSize"/> to a device-independent <see cref="T:Avalonia.Size"/> using the
            specified dots per inch (DPI).
            </summary>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSize(Avalonia.Size,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="size">The size.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSize(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified scaling factor.
            </summary>
            <param name="size">The size.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSizeWithDpi(Avalonia.Size,System.Double)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="size">The size.</param>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.FromSizeWithDpi(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Converts a <see cref="T:Avalonia.Size"/> to device pixels using the specified dots per inch (DPI).
            </summary>
            <param name="size">The size.</param>
            <param name="dpi">The dots per inch.</param>
            <returns>The device-independent size.</returns>
        </member>
        <member name="M:Avalonia.PixelSize.ToString">
            <summary>
            Returns the string representation of the size.
            </summary>
            <returns>The string representation of the size.</returns>
        </member>
        <member name="T:Avalonia.PixelVector">
            <summary>
            Defines a vector.
            </summary>
        </member>
        <member name="F:Avalonia.PixelVector._x">
            <summary>
            The X vector.
            </summary>
        </member>
        <member name="F:Avalonia.PixelVector._y">
            <summary>
            The Y vector.
            </summary>
        </member>
        <member name="M:Avalonia.PixelVector.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.PixelVector"/> structure.
            </summary>
            <param name="x">The X vector.</param>
            <param name="y">The Y vector.</param>
        </member>
        <member name="P:Avalonia.PixelVector.X">
            <summary>
            Gets the X vector.
            </summary>
        </member>
        <member name="P:Avalonia.PixelVector.Y">
            <summary>
            Gets the Y vector.
            </summary>
        </member>
        <member name="M:Avalonia.PixelVector.op_Explicit(Avalonia.PixelVector)~Avalonia.PixelPoint">
            <summary>
            Converts the <see cref="T:Avalonia.PixelVector"/> to a <see cref="T:Avalonia.PixelPoint"/>.
            </summary>
            <param name="a">The vector.</param>
        </member>
        <member name="M:Avalonia.PixelVector.op_Multiply(Avalonia.PixelVector,Avalonia.PixelVector)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="a">First vector</param>
            <param name="b">Second vector</param>
            <returns>The dot product</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Multiply(Avalonia.PixelVector,System.Int32)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Division(Avalonia.PixelVector,System.Int32)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector</param>
            <param name="scale">The divisor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="P:Avalonia.PixelVector.Length">
            <summary>
            Length of the vector
            </summary>
        </member>
        <member name="M:Avalonia.PixelVector.op_UnaryNegation(Avalonia.PixelVector)">
            <summary>
            Negates a vector.
            </summary>
            <param name="a">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Addition(Avalonia.PixelVector,Avalonia.PixelVector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.op_Subtraction(Avalonia.PixelVector,Avalonia.PixelVector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.Equals(Avalonia.PixelVector)">
            <summary>
            Check if two vectors are equal (bitwise).
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.PixelVector.NearlyEquals(Avalonia.PixelVector)">
            <summary>
            Check if two vectors are nearly equal (numerically).
            </summary>
            <param name="other">The other vector.</param>
            <returns>True if vectors are nearly equal.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.ToString">
            <summary>
            Returns the string representation of the point.
            </summary>
            <returns>The string representation of the point.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.WithX(System.Int32)">
            <summary>
            Returns a new vector with the specified X coordinate.
            </summary>
            <param name="x">The X coordinate.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:Avalonia.PixelVector.WithY(System.Int32)">
            <summary>
            Returns a new vector with the specified Y coordinate.
            </summary>
            <param name="y">The Y coordinate.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="T:Avalonia.Platform.AlphaFormat">
            <summary>
            Describes how to interpret the alpha component of a pixel.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.AlphaFormat.Premul">
            <summary>
            All pixels have their alpha premultiplied in their color components.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.AlphaFormat.Unpremul">
            <summary>
            All pixels have their color components stored without any regard to the alpha. e.g. this is the default configuration for PNG images.
            </summary>
        </member>
        <member name="F:Avalonia.Platform.AlphaFormat.Opaque">
            <summary>
            All pixels are stored as opaque.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IBitmapImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.Imaging.Bitmap"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IBitmapImpl.Dpi">
            <summary>
            Gets the dots per inch (DPI) of the image.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IBitmapImpl.PixelSize">
            <summary>
            Gets the size of the bitmap, in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IBitmapImpl.Version">
            <summary>
            Version of the pixel data
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IBitmapImpl.Save(System.String)">
            <summary>
            Saves the bitmap to a file.
            </summary>
            <param name="fileName">The filename.</param>
        </member>
        <member name="M:Avalonia.Platform.IBitmapImpl.Save(System.IO.Stream)">
            <summary>
            Saves the bitmap to a stream in png format.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:Avalonia.Platform.IDrawingContextImpl">
            <summary>
            Defines the interface through which drawing occurs.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IDrawingContextImpl.Transform">
            <summary>
            Gets or sets the current transform of the drawing context.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.Clear(Avalonia.Media.Color)">
            <summary>
            Clears the render target to the specified color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawBitmap(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},System.Double,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Draws a bitmap image.
            </summary>
            <param name="source">The bitmap image.</param>
            <param name="opacity">The opacity to draw with.</param>
            <param name="sourceRect">The rect in the image to draw.</param>
            <param name="destRect">The rect in the output to draw to.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawBitmap(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},Avalonia.Media.IBrush,Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Draws a bitmap image.
            </summary>
            <param name="source">The bitmap image.</param>
            <param name="opacityMask">The opacity mask to draw with.</param>
            <param name="opacityMaskRect">The destination rect for the opacity mask.</param>
            <param name="destRect">The rect in the output to draw to.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawLine(Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The stroke pen.</param>
            <param name="p1">The first point of the line.</param>
            <param name="p2">The second point of the line.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Draws a geometry.
            </summary>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawRectangle(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.RoundedRect,Avalonia.Media.BoxShadows)">
            <summary>
            Draws a rectangle with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the rectangle, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the rectangle, or <c>null</c> for no stroke.</param>
            <param name="rect">The rectangle bounds.</param>
            <param name="boxShadows">Box shadow effect parameters</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawEllipse(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Rect)">
            <summary>
            Draws an ellipse with the specified Brush and Pen.
            </summary>
            <param name="brush">The brush used to fill the ellipse, or <c>null</c> for no fill.</param>
            <param name="pen">The pen used to stroke the ellipse, or <c>null</c> for no stroke.</param>
            <param name="rect">The ellipse bounds.</param>
            <remarks>
            The brush and the pen can both be null. If the brush is null, then no fill is performed.
            If the pen is null, then no stoke is performed. If both the pen and the brush are null, then the drawing is not visible.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawText(Avalonia.Media.IBrush,Avalonia.Point,Avalonia.Platform.IFormattedTextImpl)">
            <summary>
            Draws text.
            </summary>
            <param name="foreground">The foreground brush.</param>
            <param name="origin">The upper-left corner of the text.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.DrawGlyphRun(Avalonia.Media.IBrush,Avalonia.Media.GlyphRun)">
            <summary>
            Draws a glyph run.
            </summary>
            <param name="foreground">The foreground.</param>
            <param name="glyphRun">The glyph run.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.CreateLayer(Avalonia.Size)">
            <summary>
            Creates a new <see cref="T:Avalonia.Platform.IRenderTargetBitmapImpl"/> that can be used as a render layer
            for the current render target.
            </summary>
            <param name="size">The size of the layer in DIPs.</param>
            <returns>An <see cref="T:Avalonia.Platform.IRenderTargetBitmapImpl"/></returns>
            <remarks>
            Depending on the rendering backend used, a layer created via this method may be more
            performant than a standard render target bitmap. In particular the Direct2D backend
            has to do a format conversion each time a standard render target bitmap is rendered,
            but a layer created via this method has no such overhead.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushClip(Avalonia.Rect)">
            <summary>
            Pushes a clip rectangle.
            </summary>
            <param name="clip">The clip rectangle.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushClip(Avalonia.RoundedRect)">
            <summary>
            Pushes a clip rounded rectangle.
            </summary>
            <param name="clip">The clip rounded rectangle</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopClip">
            <summary>
            Pops the latest pushed clip rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushOpacity(System.Double)">
            <summary>
            Pushes an opacity value.
            </summary>
            <param name="opacity">The opacity.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopOpacity">
            <summary>
            Pops the latest pushed opacity value.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushOpacityMask(Avalonia.Media.IBrush,Avalonia.Rect)">
            <summary>
            Pushes an opacity mask
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopOpacityMask">
            <summary>
            Pops the latest pushed opacity mask.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushGeometryClip(Avalonia.Platform.IGeometryImpl)">
            <summary>
            Pushes a clip geometry.
            </summary>
            <param name="clip">The clip geometry.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopGeometryClip">
            <summary>
            Pops the latest pushed geometry clip.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PushBitmapBlendMode(Avalonia.Visuals.Media.Imaging.BitmapBlendingMode)">
            <summary>
            Pushes a bitmap blending value.
            </summary>
            <param name="blendingMode">The bitmap blending mode.</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.PopBitmapBlendMode">
            <summary>
            Pops the latest pushed bitmap blending value.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextImpl.Custom(Avalonia.Rendering.SceneGraph.ICustomDrawOperation)">
            <summary>
            Adds a custom draw operation
            </summary>
            <param name="custom">Custom draw operation</param>
        </member>
        <member name="M:Avalonia.Platform.IDrawingContextLayerImpl.Blit(Avalonia.Platform.IDrawingContextImpl)">
            <summary>
            Does optimized blit with Src blend mode
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Avalonia.Platform.IDrawingContextLayerImpl.CanBlit">
            <summary>
            Returns true if layer supports optimized blit
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.GetDefaultFontFamilyName">
            <summary>
                Gets the system's default font family's name.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.GetInstalledFontFamilyNames(System.Boolean)">
            <summary>
                Get all installed fonts in the system.
            <param name="checkForUpdates">If <c>true</c> the font collection is updated.</param>
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.TryMatchCharacter(System.Int32,Avalonia.Media.FontStyle,Avalonia.Media.FontWeight,Avalonia.Media.FontFamily,System.Globalization.CultureInfo,Avalonia.Media.Typeface@)">
            <summary>
                Tries to match a specified character to a typeface that supports specified font properties.
            </summary>
            <param name="codepoint">The codepoint to match against.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="fontFamily">The font family. This is optional and used for fallback lookup.</param>
            <param name="culture">The culture.</param>
            <param name="typeface">The matching typeface.</param>
            <returns>
                <c>True</c>, if the <see cref="T:Avalonia.Platform.IFontManagerImpl"/> could match the character to specified parameters, <c>False</c> otherwise.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IFontManagerImpl.CreateGlyphTypeface(Avalonia.Media.Typeface)">
            <summary>
                Creates a glyph typeface.
            </summary>
            <param name="typeface">The typeface.</param>
            <returns>0
                The created glyph typeface. Can be <c>Null</c> if it was not possible to create a glyph typeface.
            </returns>
        </member>
        <member name="T:Avalonia.Platform.IFormattedTextImpl">
            <summary>
            Defines the platform-specific interface for <see cref="T:Avalonia.Media.FormattedText"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IFormattedTextImpl.Constraint">
            <summary>
            Gets the constraint of the text.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IFormattedTextImpl.Bounds">
            <summary>
            The measured bounds of the text.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IFormattedTextImpl.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IFormattedTextImpl.GetLines">
            <summary>
            Gets the lines in the text.
            </summary>
            <returns>
            A collection of <see cref="T:Avalonia.Media.FormattedTextLine"/> objects.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IFormattedTextImpl.HitTestPoint(Avalonia.Point)">
            <summary>
            Hit tests a point in the text.
            </summary>
            <param name="point">The point.</param>
            <returns>
            A <see cref="T:Avalonia.Media.TextHitTestResult"/> describing the result of the hit test.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IFormattedTextImpl.HitTestTextPosition(System.Int32)">
            <summary>
            Gets the bounds rectangle that the specified character occupies.
            </summary>
            <param name="index">The index of the character.</param>
            <returns>The character bounds.</returns>
        </member>
        <member name="M:Avalonia.Platform.IFormattedTextImpl.HitTestTextRange(System.Int32,System.Int32)">
            <summary>
            Gets the bounds rectangles that the specified text range occupies.
            </summary>
            <param name="index">The index of the first character.</param>
            <param name="length">The number of characters in the text range.</param>
            <returns>The character bounds.</returns>
        </member>
        <member name="T:Avalonia.Platform.IGeometryContext">
            <summary>
            Describes a geometry using drawing commands.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.ArcTo(Avalonia.Point,Avalonia.Size,System.Double,System.Boolean,Avalonia.Media.SweepDirection)">
            <summary>
            Draws an arc to the specified point.
            </summary>
            <param name="point">The destination point.</param>
            <param name="size">The radii of an oval whose perimeter is used to draw the angle.</param>
            <param name="rotationAngle">The rotation angle of the oval that specifies the curve.</param>
            <param name="isLargeArc">true to draw the arc greater than 180 degrees; otherwise, false.</param>
            <param name="sweepDirection">
            A value that indicates whether the arc is drawn in the Clockwise or Counterclockwise direction.
            </param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)">
            <summary>
            Begins a new figure.
            </summary>
            <param name="startPoint">The starting point for the figure.</param>
            <param name="isFilled">Whether the figure is filled.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.CubicBezierTo(Avalonia.Point,Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a Bezier curve to the specified point.
            </summary>
            <param name="point1">The first control point used to specify the shape of the curve.</param>
            <param name="point2">The second control point used to specify the shape of the curve.</param>
            <param name="point3">The destination point for the end of the curve.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.QuadraticBezierTo(Avalonia.Point,Avalonia.Point)">
            <summary>
            Draws a quadratic Bezier curve to the specified point
            </summary>
            <param name="control">Control point</param>
            <param name="endPoint">DestinationPoint</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.LineTo(Avalonia.Point)">
            <summary>
            Draws a line to the specified point.
            </summary>
            <param name="point">The destination point.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.EndFigure(System.Boolean)">
            <summary>
            Ends the figure started by <see cref="M:Avalonia.Platform.IGeometryContext.BeginFigure(Avalonia.Point,System.Boolean)"/>.
            </summary>
            <param name="isClosed">Whether the figure is closed.</param>
        </member>
        <member name="M:Avalonia.Platform.IGeometryContext.SetFillRule(Avalonia.Media.FillRule)">
            <summary>
            Sets the fill rule.
            </summary>
            <param name="fillRule">The fill rule.</param>
        </member>
        <member name="T:Avalonia.Platform.IGeometryImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.Geometry"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGeometryImpl.Bounds">
            <summary>
            Gets the geometry's bounding rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGeometryImpl.ContourLength">
            <summary>
            Gets the geometry's total length as if all its contours are placed
            in a straight line.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.GetRenderBounds(Avalonia.Media.IPen)">
            <summary>
            Gets the geometry's bounding rectangle with the specified pen.
            </summary>
            <param name="pen">The pen to use. May be null.</param>
            <returns>The bounding rectangle.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.FillContains(Avalonia.Point)">
            <summary>
            Indicates whether the geometry's fill contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.Intersect(Avalonia.Platform.IGeometryImpl)">
            <summary>
            Intersects the geometry with another geometry.
            </summary>
            <param name="geometry">The other geometry.</param>
            <returns>A new <see cref="T:Avalonia.Platform.IGeometryImpl"/> representing the intersection.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.StrokeContains(Avalonia.Media.IPen,Avalonia.Point)">
            <summary>
            Indicates whether the geometry's stroke contains the specified point.
            </summary>
            <param name="pen">The stroke to use.</param>
            <param name="point">The point.</param>
            <returns><c>true</c> if the geometry contains the point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.WithTransform(Avalonia.Matrix)">
            <summary>
            Makes a clone of the geometry with the specified transform.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The cloned geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.TryGetPointAtDistance(System.Double,Avalonia.Point@)">
            <summary>
            Attempts to get the corresponding point at the
            specified distance
            </summary>
            <param name="distance">The contour distance to get from.</param>
            <param name="point">The point in the specified distance.</param>
            <returns>If there's valid point at the specified distance.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.TryGetPointAndTangentAtDistance(System.Double,Avalonia.Point@,Avalonia.Point@)">
            <summary>
            Attempts to get the corresponding point and
            tangent from the specified distance along the
            contour of the geometry.
            </summary>
            <param name="distance">The contour distance to get from.</param>
            <param name="point">The point in the specified distance.</param>
            <param name="tangent">The tangent in the specified distance.</param>
            <returns>If there's valid point and tangent at the specified distance.</returns>
        </member>
        <member name="M:Avalonia.Platform.IGeometryImpl.TryGetSegment(System.Double,System.Double,System.Boolean,Avalonia.Platform.IGeometryImpl@)">
            <summary>
            Attempts to get the corresponding path segment
            given by the two distances specified.
            Imagine it like snipping a part of the current
            geometry.
            </summary>
            <param name="startDistance">The contour distance to start snipping from.</param>
            <param name="stopDistance">The contour distance to stop snipping to.</param>
            <param name="startOnBeginFigure">If ture, the resulting snipped path will start with a BeginFigure call.</param>
            <param name="segmentGeometry">The resulting snipped path.</param>
            <returns>If the snipping operation is successful.</returns>
        </member>
        <member name="T:Avalonia.Platform.IGlyphRunImpl">
            <summary>
                Actual implementation of a glyph run that stores platform dependent resources.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.DesignEmHeight">
            <summary>
                Gets the font design units per em.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.Ascent">
            <summary>
                Gets the recommended distance above the baseline in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.Descent">
            <summary>
                Gets the recommended distance under the baseline in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.LineGap">
            <summary>
                 Gets the recommended additional space between two lines of text in design em size. 
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.UnderlinePosition">
            <summary>
                Gets a value that indicates the distance of the underline from the baseline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.UnderlineThickness">
            <summary>
                Gets a value that indicates the thickness of the underline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.StrikethroughPosition">
            <summary>
                Gets a value that indicates the distance of the strikethrough from the baseline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.StrikethroughThickness">
            <summary>
                Gets a value that indicates the thickness of the underline in design em size.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IGlyphTypefaceImpl.IsFixedPitch">
            <summary>
                A <see cref="T:System.Boolean"/> value indicating whether all glyphs in the font have the same advancement. 
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IGlyphTypefaceImpl.GetGlyph(System.UInt32)">
            <summary>
                Returns an glyph index for the specified codepoint.
            </summary>
            <remarks>
                Returns <c>0</c> if a glyph isn't found.
            </remarks>
            <param name="codepoint">The codepoint.</param>
            <returns>
                A glyph index.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IGlyphTypefaceImpl.GetGlyphs(System.ReadOnlySpan{System.UInt32})">
            <summary>
                Returns an array of glyph indices. Codepoints that are not represented by the font are returned as <code>0</code>.
            </summary>
            <param name="codepoints">The codepoints to map.</param>
            <returns>
                An array of glyph indices.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IGlyphTypefaceImpl.GetGlyphAdvance(System.UInt16)">
            <summary>
                Returns the glyph advance for the specified glyph.
            </summary>
            <param name="glyph">The glyph.</param>
            <returns>
                The advance.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IGlyphTypefaceImpl.GetGlyphAdvances(System.ReadOnlySpan{System.UInt16})">
            <summary>
                Returns an array of glyph advances in design em size.
            </summary>
            <param name="glyphs">The glyph indices.</param>
            <returns>
                An array of glyph advances.
            </returns>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Address">
            <summary>
            Address of the first pixel
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Size">
            <summary>
            Gets the framebuffer size in device pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.RowBytes">
            <summary>
            Number of bytes per row
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Dpi">
            <summary>
            DPI of underling screen
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ILockedFramebuffer.Format">
            <summary>
            Pixel format
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPlatformRenderInterface">
            <summary>
            Defines the main platform-specific interface for the rendering subsystem.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateFormattedText(System.String,Avalonia.Media.Typeface,System.Double,Avalonia.Media.TextAlignment,Avalonia.Media.TextWrapping,Avalonia.Size,System.Collections.Generic.IReadOnlyList{Avalonia.Media.FormattedTextStyleSpan})">
            <summary>
            Creates a formatted text implementation.
            </summary>
            <param name="text">The text.</param>
            <param name="typeface">The base typeface.</param>
            <param name="fontSize">The font size.</param>
            <param name="textAlignment">The text alignment.</param>
            <param name="wrapping">The text wrapping mode.</param>
            <param name="constraint">The text layout constraints.</param>
            <param name="spans">The style spans.</param>
            <returns>An <see cref="T:Avalonia.Platform.IFormattedTextImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateEllipseGeometry(Avalonia.Rect)">
            <summary>
            Creates an ellipse geometry implementation.
            </summary>
            <param name="rect">The bounds of the ellipse.</param>
            <returns>An ellipse geometry..</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateLineGeometry(Avalonia.Point,Avalonia.Point)">
            <summary>
            Creates a line geometry implementation.
            </summary>
            <param name="p1">The start of the line.</param>
            <param name="p2">The end of the line.</param>
            <returns>A line geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateRectangleGeometry(Avalonia.Rect)">
            <summary>
            Creates a rectangle geometry implementation.
            </summary>
            <param name="rect">The bounds of the rectangle.</param>
            <returns>A rectangle.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateStreamGeometry">
            <summary>
            Creates a stream geometry implementation.
            </summary>
            <returns>An <see cref="T:Avalonia.Platform.IStreamGeometryImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateGeometryGroup(Avalonia.Media.FillRule,System.Collections.Generic.IReadOnlyList{Avalonia.Media.Geometry})">
            <summary>
            Creates a geometry group implementation.
            </summary>
            <param name="fillRule">The fill rule.</param>
            <param name="children">The geometries to group.</param>
            <returns>A combined geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateCombinedGeometry(Avalonia.Media.GeometryCombineMode,Avalonia.Media.Geometry,Avalonia.Media.Geometry)">
            <summary>
            Creates a geometry group implementation.
            </summary>
            <param name="combineMode">The combine mode</param>
            <param name="g1">The first geometry.</param>
            <param name="g2">The second geometry.</param>
            <returns>A combined geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateRenderTarget(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a renderer.
            </summary>
            <param name="surfaces">
            The list of native platform surfaces that can be used for output.
            </param>
            <returns>An <see cref="T:Avalonia.Platform.IRenderTarget"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateRenderTargetBitmap(Avalonia.PixelSize,Avalonia.Vector)">
            <summary>
            Creates a render target bitmap implementation.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <returns>An <see cref="T:Avalonia.Platform.IRenderTargetBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateWriteableBitmap(Avalonia.PixelSize,Avalonia.Vector,Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat)">
            <summary>
            Creates a writeable bitmap implementation.
            </summary>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="format">Pixel format.</param>
            <param name="alphaFormat">Alpha format .</param>
            <returns>An <see cref="T:Avalonia.Platform.IWriteableBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmap(System.String)">
            <summary>
            Loads a bitmap implementation from a file..
            </summary>
            <param name="fileName">The filename of the bitmap.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmap(System.IO.Stream)">
            <summary>
            Loads a bitmap implementation from a file..
            </summary>
            <param name="stream">The stream to read the bitmap from.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmapToWidth(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a WriteableBitmap implementation from a stream to a specified width maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IWriteableBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmapToHeight(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a WriteableBitmap implementation from a stream to a specified height maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmap(System.String)">
            <summary>
            Loads a WriteableBitmap implementation from a file.
            </summary>
            <param name="fileName">The filename of the bitmap.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadWriteableBitmap(System.IO.Stream)">
            <summary>
            Loads a WriteableBitmap implementation from a file.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param>        
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmapToWidth(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a bitmap implementation from a stream to a specified width maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="width">The desired width of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmapToHeight(System.IO.Stream,System.Int32,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Loads a bitmap implementation from a stream to a specified height maintaining aspect ratio.
            </summary>
            <param name="stream">The stream to read the bitmap from.</param> 
            <param name="height">The desired height of the resulting bitmap.</param>
            <param name="interpolationMode">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode"/> to use should resizing be required.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.LoadBitmap(Avalonia.Platform.PixelFormat,Avalonia.Platform.AlphaFormat,System.IntPtr,Avalonia.PixelSize,Avalonia.Vector,System.Int32)">
            <summary>
            Loads a bitmap implementation from a pixels in memory.
            </summary>
            <param name="format">The pixel format.</param>
            <param name="alphaFormat">The alpha format.</param>
            <param name="data">The pointer to source bytes.</param>
            <param name="size">The size of the bitmap in device pixels.</param>
            <param name="dpi">The DPI of the bitmap.</param>
            <param name="stride">The number of bytes per row.</param>
            <returns>An <see cref="T:Avalonia.Platform.IBitmapImpl"/>.</returns>
        </member>
        <member name="M:Avalonia.Platform.IPlatformRenderInterface.CreateGlyphRun(Avalonia.Media.GlyphRun,System.Double@)">
            <summary>
            Creates a platform implementation of a glyph run.
            </summary>
            <param name="glyphRun">The glyph run.</param>
            <param name="width">The glyph run's width.</param>
            <returns></returns>
        </member>
        <member name="P:Avalonia.Platform.IPlatformRenderInterface.DefaultAlphaFormat">
            <summary>
            Default <see cref="T:Avalonia.Platform.AlphaFormat"/> used on this platform.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IPlatformRenderInterface.DefaultPixelFormat">
            <summary>
            Default <see cref="T:Avalonia.Platform.PixelFormat"/> used on this platform.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IRenderTarget">
            <summary>
            Defines a render target
            </summary>
            <remarks>
            The interface used for obtaining drawing context from surfaces you can render on.
            </remarks>
        </member>
        <member name="M:Avalonia.Platform.IRenderTarget.CreateDrawingContext(Avalonia.Rendering.IVisualBrushRenderer)">
            <summary>
            Creates an <see cref="T:Avalonia.Platform.IDrawingContextImpl"/> for a rendering session.
            </summary>
            <param name="visualBrushRenderer">
            A render to be used to render visual brushes. May be null if no visual brushes are
            to be drawn.
            </param>
        </member>
        <member name="T:Avalonia.Platform.IRenderTargetBitmapImpl">
            <summary>
            Defines the platform-specific interface for a
            <see cref="T:Avalonia.Media.Imaging.RenderTargetBitmap"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IStreamGeometryContextImpl">
            <summary>
            Describes a geometry using drawing commands.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IStreamGeometryImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.StreamGeometry"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IStreamGeometryImpl.Clone">
            <summary>
            Clones the geometry.
            </summary>
            <returns>A cloned geometry.</returns>
        </member>
        <member name="M:Avalonia.Platform.IStreamGeometryImpl.Open">
            <summary>
            Opens the geometry to start defining it.
            </summary>
            <returns>
            An <see cref="T:Avalonia.Platform.IStreamGeometryContextImpl"/> which can be used to define the geometry.
            </returns>
        </member>
        <member name="T:Avalonia.Platform.ITextShaperImpl">
            <summary>
            An abstraction that is used produce shaped text.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITextShaperImpl.ShapeText(Avalonia.Utilities.ReadOnlySlice{System.Char},Avalonia.Media.Typeface,System.Double,System.Globalization.CultureInfo)">
            <summary>
            Shapes the specified region within the text and returns a resulting glyph run.
            </summary>
            <param name="text">The text.</param>
            <param name="typeface">The typeface.</param>
            <param name="fontRenderingEmSize">The font rendering em size.</param>
            <param name="culture">The culture.</param>
            <returns>A shaped glyph run.</returns>
        </member>
        <member name="T:Avalonia.Platform.ITransformedGeometryImpl">
            <summary>
            Represents a geometry with a transform applied.
            </summary>
            <remarks>
            An <see cref="T:Avalonia.Platform.ITransformedGeometryImpl"/> transforms a geometry without transforming its
            stroke thickness.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.ITransformedGeometryImpl.SourceGeometry">
            <summary>
            Gets the source geometry that the <see cref="P:Avalonia.Platform.ITransformedGeometryImpl.Transform"/> is applied to.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITransformedGeometryImpl.Transform">
            <summary>
            Gets the applied transform.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IWriteableBitmapImpl">
            <summary>
            Defines the platform-specific interface for a <see cref="T:Avalonia.Media.Imaging.WriteableBitmap"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Point">
            <summary>
            Defines a point.
            </summary>
        </member>
        <member name="F:Avalonia.Point._x">
            <summary>
            The X position.
            </summary>
        </member>
        <member name="F:Avalonia.Point._y">
            <summary>
            The Y position.
            </summary>
        </member>
        <member name="M:Avalonia.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Point"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
        </member>
        <member name="P:Avalonia.Point.X">
            <summary>
            Gets the X position.
            </summary>
        </member>
        <member name="P:Avalonia.Point.Y">
            <summary>
            Gets the Y position.
            </summary>
        </member>
        <member name="M:Avalonia.Point.op_Implicit(Avalonia.Point)~Avalonia.Vector">
            <summary>
            Converts the <see cref="T:Avalonia.Point"/> to a <see cref="T:Avalonia.Vector"/>.
            </summary>
            <param name="p">The point.</param>
        </member>
        <member name="M:Avalonia.Point.op_UnaryNegation(Avalonia.Point)">
            <summary>
            Negates a point.
            </summary>
            <param name="a">The point.</param>
            <returns>The negated point.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Equality(Avalonia.Point,Avalonia.Point)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.Point"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Inequality(Avalonia.Point,Avalonia.Point)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Point"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Addition(Avalonia.Point,Avalonia.Point)">
            <summary>
            Adds two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Addition(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Adds a vector to a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Subtraction(Avalonia.Point,Avalonia.Point)">
            <summary>
            Subtracts two points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Subtraction(Avalonia.Point,Avalonia.Vector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="a">The point.</param>
            <param name="b">The vector.</param>
            <returns>A point that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.Point.op_Multiply(Avalonia.Point,System.Double)">
            <summary>
            Multiplies a point by a factor coordinate-wise
            </summary>
            <param name="p">Point to multiply</param>
            <param name="k">Factor</param>
            <returns>Points having its coordinates multiplied</returns>
        </member>
        <member name="M:Avalonia.Point.op_Multiply(System.Double,Avalonia.Point)">
            <summary>
            Multiplies a point by a factor coordinate-wise
            </summary>
            <param name="p">Point to multiply</param>
            <param name="k">Factor</param>
            <returns>Points having its coordinates multiplied</returns>
        </member>
        <member name="M:Avalonia.Point.op_Division(Avalonia.Point,System.Double)">
            <summary>
            Divides a point by a factor coordinate-wise
            </summary>
            <param name="p">Point to divide by</param>
            <param name="k">Factor</param>
            <returns>Points having its coordinates divided</returns>
        </member>
        <member name="M:Avalonia.Point.op_Multiply(Avalonia.Point,Avalonia.Matrix)">
            <summary>
            Applies a matrix to a point.
            </summary>
            <param name="point">The point.</param>
            <param name="matrix">The matrix.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Avalonia.Point.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Point"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Point"/>.</returns>
        </member>
        <member name="M:Avalonia.Point.Equals(Avalonia.Point)">
            <summary>
            Returns a boolean indicating whether the point is equal to the other given point.
            </summary>
            <param name="other">The other point to test equality against.</param>
            <returns>True if this point is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Point.Equals(System.Object)">
            <summary>
            Checks for equality between a point and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a point that equals the current point.
            </returns>
        </member>
        <member name="M:Avalonia.Point.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.Point"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Point.ToString">
            <summary>
            Returns the string representation of the point.
            </summary>
            <returns>The string representation of the point.</returns>
        </member>
        <member name="M:Avalonia.Point.Transform(Avalonia.Matrix)">
            <summary>
            Transforms the point by a matrix.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Avalonia.Point.WithX(System.Double)">
            <summary>
            Returns a new point with the specified X coordinate.
            </summary>
            <param name="x">The X coordinate.</param>
            <returns>The new point.</returns>
        </member>
        <member name="M:Avalonia.Point.WithY(System.Double)">
            <summary>
            Returns a new point with the specified Y coordinate.
            </summary>
            <param name="y">The Y coordinate.</param>
            <returns>The new point.</returns>
        </member>
        <member name="M:Avalonia.Point.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Deconstructs the point into its X and Y coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="P:Avalonia.Point.IsDefault">
            <summary>
            Gets a value indicating whether the X and Y coordinates are zero.
            </summary>
        </member>
        <member name="T:Avalonia.Rect">
            <summary>
            Defines a rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Rect.Empty">
            <summary>
            An empty rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._x">
            <summary>
            The X position.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._y">
            <summary>
            The Y position.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:Avalonia.Rect._height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="M:Avalonia.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Avalonia.Rect.#ctor(Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.Rect.#ctor(Avalonia.Point,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Avalonia.Rect.#ctor(Avalonia.Point,Avalonia.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rect"/> structure.
            </summary>
            <param name="topLeft">The top left position of the rectangle.</param>
            <param name="bottomRight">The bottom right position of the rectangle.</param>
        </member>
        <member name="P:Avalonia.Rect.X">
            <summary>
            Gets the X position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Y">
            <summary>
            Gets the Y position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Position">
            <summary>
            Gets the position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Size">
            <summary>
            Gets the size of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Right">
            <summary>
            Gets the right position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Bottom">
            <summary>
            Gets the bottom position of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Left">
            <summary>
            Gets the left position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Top">
            <summary>
            Gets the top position.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.TopLeft">
            <summary>
            Gets the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.TopRight">
            <summary>
            Gets the top right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.BottomLeft">
            <summary>
            Gets the bottom left point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.BottomRight">
            <summary>
            Gets the bottom right point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.Center">
            <summary>
            Gets the center point of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rect.IsEmpty">
            <summary>
            Gets a value that indicates whether the rectangle is empty.
            </summary>
        </member>
        <member name="M:Avalonia.Rect.op_Equality(Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.Rect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Inequality(Avalonia.Rect,Avalonia.Rect)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Rect"/>s.
            </summary>
            <param name="left">The first rect.</param>
            <param name="right">The second rect.</param>
            <returns>True if the rects are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Multiply(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Multiplies a rectangle by a scaling vector.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="scale">The vector scale.</param>
            <returns>The scaled rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Multiply(Avalonia.Rect,System.Double)">
            <summary>
            Multiplies a rectangle by a scale.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="scale">The scale.</param>
            <returns>The scaled rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.op_Division(Avalonia.Rect,Avalonia.Vector)">
            <summary>
            Divides a rectangle by a vector.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="scale">The vector scale.</param>
            <returns>The scaled rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Contains(Avalonia.Point)">
            <summary>
            Determines whether a point in in the bounds of the rectangle.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.ContainsExclusive(Avalonia.Point)">
            <summary>
            Determines whether a point is in the bounds of the rectangle, exclusive of the
            rectangle's bottom/right edge.
            </summary>
            <param name="p">The point.</param>
            <returns>true if the point is in the bounds of the rectangle; otherwise false.</returns>    
        </member>
        <member name="M:Avalonia.Rect.Contains(Avalonia.Rect)">
            <summary>
            Determines whether the rectangle fully contains another rectangle.
            </summary>
            <param name="r">The rectangle.</param>
            <returns>true if the rectangle is fully contained; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rect.CenterRect(Avalonia.Rect)">
            <summary>
            Centers another rectangle in this rectangle.
            </summary>
            <param name="rect">The rectangle to center.</param>
            <returns>The centered rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Inflate(System.Double)">
            <summary>
            Inflates the rectangle.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The inflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Inflate(Avalonia.Thickness)">
            <summary>
            Inflates the rectangle.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The inflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Deflate(System.Double)">
            <summary>
            Deflates the rectangle.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The deflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Deflate(Avalonia.Thickness)">
            <summary>
            Deflates the rectangle by a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <param name="thickness">The thickness to be subtracted for each side of the rectangle.</param>
            <returns>The deflated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Equals(Avalonia.Rect)">
            <summary>
            Returns a boolean indicating whether the rect is equal to the other given rect.
            </summary>
            <param name="other">The other rect to test equality against.</param>
            <returns>True if this rect is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Rect.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given object is equal to this rectangle.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if the object is equal to this rectangle; false otherwise.</returns>
        </member>
        <member name="M:Avalonia.Rect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Rect.Intersect(Avalonia.Rect)">
            <summary>
            Gets the intersection of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The intersection.</returns>
        </member>
        <member name="M:Avalonia.Rect.Intersects(Avalonia.Rect)">
            <summary>
            Determines whether a rectangle intersects with this rectangle.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>
            True if the specified rectangle intersects with this one; otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Rect.TransformToAABB(Avalonia.Matrix)">
            <summary>
            Returns the axis-aligned bounding box of a transformed rectangle.
            </summary>
            <param name="matrix">The transform.</param>
            <returns>The bounding box</returns>
        </member>
        <member name="M:Avalonia.Rect.Translate(Avalonia.Vector)">
            <summary>
            Translates the rectangle by an offset.
            </summary>
            <param name="offset">The offset.</param>
            <returns>The translated rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Normalize">
            <summary>
            Normalizes the rectangle so both the <see cref="P:Avalonia.Rect.Width"/> and <see 
            cref="P:Avalonia.Rect.Height"/> are positive, without changing the location of the rectangle
            </summary>
            <returns>Normalized Rect</returns>
            <remarks>
            Empty rect will be return when Rect contains invalid values. Like NaN.
            </remarks>
        </member>
        <member name="M:Avalonia.Rect.Union(Avalonia.Rect)">
            <summary>
            Gets the union of two rectangles.
            </summary>
            <param name="rect">The other rectangle.</param>
            <returns>The union.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithX(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified X position.
            </summary>
            <param name="x">The x position.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithY(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified Y position.
            </summary>
            <param name="y">The y position.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithWidth(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.WithHeight(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Rect"/> with the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="M:Avalonia.Rect.ToString">
            <summary>
            Returns the string representation of the rectangle.
            </summary>
            <returns>The string representation of the rectangle.</returns>
        </member>
        <member name="M:Avalonia.Rect.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Rect"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.Rect"/>.</returns>
        </member>
        <member name="T:Avalonia.RelativeUnit">
            <summary>
            Defines the reference point units of an <see cref="T:Avalonia.RelativePoint"/> or 
            <see cref="T:Avalonia.RelativeRect"/>.
            </summary>
        </member>
        <member name="F:Avalonia.RelativeUnit.Relative">
            <summary>
            The point is expressed as a fraction of the containing element's size.
            </summary>
        </member>
        <member name="F:Avalonia.RelativeUnit.Absolute">
            <summary>
            The point is absolute (i.e. in pixels).
            </summary>
        </member>
        <member name="T:Avalonia.RelativePoint">
            <summary>
            Defines a point that may be defined relative to a containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativePoint.TopLeft">
            <summary>
            A point at the top left of the containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativePoint.Center">
            <summary>
            A point at the center of the containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativePoint.BottomRight">
            <summary>
            A point at the bottom right of the containing element.
            </summary>
        </member>
        <member name="M:Avalonia.RelativePoint.#ctor(System.Double,System.Double,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativePoint"/> struct.
            </summary>
            <param name="x">The X point.</param>
            <param name="y">The Y point</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Avalonia.RelativePoint.#ctor(Avalonia.Point,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativePoint"/> struct.
            </summary>
            <param name="point">The point.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="P:Avalonia.RelativePoint.Point">
            <summary>
            Gets the point.
            </summary>
        </member>
        <member name="P:Avalonia.RelativePoint.Unit">
            <summary>
            Gets the unit.
            </summary>
        </member>
        <member name="M:Avalonia.RelativePoint.op_Equality(Avalonia.RelativePoint,Avalonia.RelativePoint)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.RelativePoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.op_Inequality(Avalonia.RelativePoint,Avalonia.RelativePoint)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.RelativePoint"/>s.
            </summary>
            <param name="left">The first point.</param>
            <param name="right">The second point.</param>
            <returns>True if the points are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.Equals(System.Object)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativePoint"/> equals another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.Equals(Avalonia.RelativePoint)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativePoint"/> equals another point.
            </summary>
            <param name="p">The other point.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.GetHashCode">
            <summary>
            Gets a hashcode for a <see cref="T:Avalonia.RelativePoint"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.ToPixels(Avalonia.Size)">
            <summary>
            Converts a <see cref="T:Avalonia.RelativePoint"/> into pixels.
            </summary>
            <param name="size">The size of the visual.</param>
            <returns>The origin point in pixels.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.RelativePoint"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.RelativePoint"/>.</returns>
        </member>
        <member name="M:Avalonia.RelativePoint.ToString">
            <summary>
            Returns a String representing this RelativePoint instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:Avalonia.RelativeRect">
            <summary>
            Defines a rectangle that may be defined relative to a containing element.
            </summary>
        </member>
        <member name="F:Avalonia.RelativeRect.Fill">
            <summary>
            A rectangle that represents 100% of an area.
            </summary>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(System.Double,System.Double,System.Double,System.Double,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Rect,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Size,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="size">The size of the rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Point,Avalonia.Size,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="position">The position of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="M:Avalonia.RelativeRect.#ctor(Avalonia.Point,Avalonia.Point,Avalonia.RelativeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.RelativeRect"/> structure.
            </summary>
            <param name="topLeft">The top left position of the rectangle.</param>
            <param name="bottomRight">The bottom right position of the rectangle.</param>
            <param name="unit">The unit of the rect.</param>
        </member>
        <member name="P:Avalonia.RelativeRect.Unit">
            <summary>
            Gets the unit of the rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.RelativeRect.Rect">
            <summary>
            Gets the rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.RelativeRect.op_Equality(Avalonia.RelativeRect,Avalonia.RelativeRect)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.RelativeRect"/>s.
            </summary>
            <param name="left">The first rectangle.</param>
            <param name="right">The second rectangle.</param>
            <returns>True if the rectangles are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.op_Inequality(Avalonia.RelativeRect,Avalonia.RelativeRect)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.RelativeRect"/>s.
            </summary>
            <param name="left">The first rectangle.</param>
            <param name="right">The second rectangle.</param>
            <returns>True if the rectangles are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.Equals(System.Object)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativeRect"/> equals another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.Equals(Avalonia.RelativeRect)">
            <summary>
            Checks if the <see cref="T:Avalonia.RelativeRect"/> equals another rectangle.
            </summary>
            <param name="p">The other rectangle.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.GetHashCode">
            <summary>
            Gets a hashcode for a <see cref="T:Avalonia.RelativeRect"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.ToPixels(Avalonia.Size)">
            <summary>
            Converts a <see cref="T:Avalonia.RelativeRect"/> into pixels.
            </summary>
            <param name="size">The size of the visual.</param>
            <returns>The origin point in pixels.</returns>
        </member>
        <member name="M:Avalonia.RelativeRect.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.RelativeRect"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The parsed <see cref="T:Avalonia.RelativeRect"/>.</returns>
        </member>
        <member name="T:Avalonia.Rendering.DefaultRenderTimer">
            <summary>
            Defines a default render timer that uses a standard timer.
            </summary>
            <remarks>
            This class may be overridden by platform implementations to use a specialized timer
            implementation.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.DefaultRenderTimer"/> class.
            </summary>
            <param name="framesPerSecond">
            The number of frames per second at which the loop should run.
            </param>
        </member>
        <member name="P:Avalonia.Rendering.DefaultRenderTimer.FramesPerSecond">
            <summary>
            Gets the number of frames per second at which the loop runs.
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.DefaultRenderTimer.Tick">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.StartCore(System.Action{System.TimeSpan})">
            <summary>
            Provides the implementation of starting the timer.
            </summary>
            <param name="tick">The method to call on each tick.</param>
            <remarks>
            This can be overridden by platform implementations to use a specialized timer
            implementation.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.DefaultRenderTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.DeferredRenderer">
            <summary>
            A renderer which renders the state of the visual tree to an intermediate scene graph
            representation which is then rendered on a rendering thread.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.#ctor(Avalonia.Rendering.IRenderRoot,Avalonia.Rendering.IRenderLoop,Avalonia.Rendering.SceneGraph.ISceneBuilder,Avalonia.Threading.IDispatcher,Avalonia.Rendering.IDeferredRendererLock)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.DeferredRenderer"/> class.
            </summary>
            <param name="root">The control to render.</param>
            <param name="renderLoop">The render loop.</param>
            <param name="sceneBuilder">The scene builder to use. Optional.</param>
            <param name="dispatcher">The dispatcher to use. Optional.</param>
            <param name="rendererLock">Lock object used before trying to access render target</param>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.#ctor(Avalonia.VisualTree.IVisual,Avalonia.Platform.IRenderTarget,Avalonia.Rendering.SceneGraph.ISceneBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.DeferredRenderer"/> class.
            </summary>
            <param name="root">The control to render.</param>
            <param name="renderTarget">The render target.</param>
            <param name="sceneBuilder">The scene builder to use. Optional.</param>
            <remarks>
            This constructor is intended to be used for unit testing.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.DeferredRenderer.DrawFps">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.DeferredRenderer.DrawDirtyRects">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.DeferredRenderer.DebugFramesPath">
            <summary>
            Gets or sets a path to which rendered frame should be rendered for debugging.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.DeferredRenderer.RenderOnlyOnRenderThread">
            <summary>
            Forces the renderer to only draw frames on the render thread. Makes Paint to wait until frame is rendered
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.DeferredRenderer.SceneInvalidated">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.DeferredRenderer.Layers">
            <summary>
            Gets the render layers.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.DeferredRenderer.RenderTarget">
            <summary>
            Gets the current render target.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.AddDirty(Avalonia.VisualTree.IVisual)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.Dispose">
            <summary>
            Disposes of the renderer and detaches from the render loop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.HitTest(Avalonia.Point,Avalonia.VisualTree.IVisual,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.HitTestFirst(Avalonia.Point,Avalonia.VisualTree.IVisual,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.Paint(Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.Resized(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.Start">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.Avalonia#Rendering#IVisualBrushRenderer#GetRenderTargetSize(Avalonia.Media.IVisualBrush)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.DeferredRenderer.Avalonia#Rendering#IVisualBrushRenderer#RenderVisualBrush(Avalonia.Platform.IDrawingContextImpl,Avalonia.Media.IVisualBrush)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.DirtyRects">
            <summary>
            Tracks dirty rectangles.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DirtyRects.Add(Avalonia.Rect)">
            <summary>
            Adds a dirty rectangle, extending an existing dirty rectangle if it intersects.
            </summary>
            <param name="rect">The dirt rectangle.</param>
            <remarks>
            We probably want to do this more intelligently because:
            - Adding e.g. the top left quarter of a scene and the bottom left quarter of a scene
              will cause the whole scene to be invalidated if they overlap by a single pixel
            - Adding two adjacent rectangles that don't overlap will not cause them to be 
            coalesced
            - It only coalesces the first intersecting rectangle found - one needs to
             call <see cref="M:Avalonia.Rendering.DirtyRects.Coalesce"/> at the end of the draw cycle to coalesce the rest.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.DirtyRects.Coalesce">
            <summary>
            Works around our flimsy dirt-rect coalescing algorithm.
            </summary>
            <remarks>
            See the comments in <see cref="M:Avalonia.Rendering.DirtyRects.Add(Avalonia.Rect)"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.DirtyRects.GetEnumerator">
            <summary>
            Gets the dirty rectangles.
            </summary>
            <returns>A collection of dirty rectangles</returns>
        </member>
        <member name="M:Avalonia.Rendering.DirtyRects.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the dirty rectangles.
            </summary>
            <returns>A collection of dirty rectangles</returns>
        </member>
        <member name="T:Avalonia.Rendering.DirtyVisuals">
            <summary>
            Stores a list of dirty visuals for an <see cref="T:Avalonia.Rendering.IRenderer"/>.
            </summary>
            <remarks>
            This class stores the dirty visuals for a scene, ordered by their distance to the root
            visual. TODO: We probably want to put an upper limit on the number of visuals that can be
            stored and if we reach that limit, assume all visuals are dirty.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.DirtyVisuals.Count">
            <summary>
            Gets the number of dirty visuals.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DirtyVisuals.Add(Avalonia.VisualTree.IVisual)">
            <summary>
            Adds a visual to the dirty list.
            </summary>
            <param name="visual">The dirty visual.</param>
        </member>
        <member name="M:Avalonia.Rendering.DirtyVisuals.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DirtyVisuals.GetEnumerator">
            <summary>
            Gets the dirty visuals, in ascending order of distance to their root.
            </summary>
            <returns>A collection of visuals.</returns>
        </member>
        <member name="M:Avalonia.Rendering.DirtyVisuals.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the dirty visuals, in ascending order of distance to their root.
            </summary>
            <returns>A collection of visuals.</returns>
        </member>
        <member name="T:Avalonia.Rendering.DisplayDirtyRect">
            <summary>
            Holds the state for a dirty rect rendered when <see cref="P:Avalonia.Rendering.IRenderer.DrawDirtyRects"/> is set.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DisplayDirtyRect.#ctor(Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.DisplayDirtyRect"/> class.
            </summary>
            <param name="rect">The dirt rect.</param>
        </member>
        <member name="P:Avalonia.Rendering.DisplayDirtyRect.Rect">
            <summary>
            Gets the bounds of the dirty rectangle.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.DisplayDirtyRect.Born">
            <summary>
            Gets the time at which the rectangle was made dirty.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.DisplayDirtyRect.Dies">
            <summary>
            Gets the time at which the rectangle should no longer be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.DisplayDirtyRect.Opacity">
            <summary>
            Gets the opacity at which to display the dirty rectangle.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DisplayDirtyRect.ResetLifetime">
            <summary>
            Resets the rectangle's lifetime.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.DisplayDirtyRects">
            <summary>
            Holds a collection of <see cref="T:Avalonia.Rendering.DisplayDirtyRect"/> objects and manages their aging.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DisplayDirtyRects.Add(Avalonia.Rect)">
            <summary>
            Adds new new dirty rect to the collection.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Avalonia.Rendering.DisplayDirtyRects.Tick">
            <summary>
            Removes dirty rects one they are no longer active.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.DisplayDirtyRects.GetEnumerator">
            <summary>
            Gets the dirty rects.
            </summary>
            <returns>A collection of <see cref="T:Avalonia.Rendering.DisplayDirtyRect"/> objects.</returns>
        </member>
        <member name="M:Avalonia.Rendering.DisplayDirtyRects.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the dirty rects.
            </summary>
            <returns>A collection of <see cref="T:Avalonia.Rendering.DisplayDirtyRect"/> objects.</returns>
        </member>
        <member name="T:Avalonia.Rendering.ICustomSimpleHitTest">
            <summary>
            An interface to allow non-templated controls to customize their hit-testing
            when using a renderer with a simple hit-testing algorithm without a scene graph,
            such as <see cref="T:Avalonia.Rendering.ImmediateRenderer" />
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.ICustomSimpleHitTest.HitTest(Avalonia.Point)">
            <param name="point">The point to hit test in global coordinate space.</param>
        </member>
        <member name="T:Avalonia.Rendering.ICustomHitTest">
            <summary>
            Allows customization of hit-testing for all renderers.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.ImmediateRenderer">
            <summary>
            A renderer which renders the state of the visual tree without an intermediate scene graph
            representation.
            </summary>
            <remarks>
            The immediate renderer supports only clip-bound-based hit testing; a control's geometry is
            not taken into account.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.#ctor(Avalonia.VisualTree.IVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.ImmediateRenderer"/> class.
            </summary>
            <param name="root">The control to render.</param>
        </member>
        <member name="P:Avalonia.Rendering.ImmediateRenderer.DrawFps">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.ImmediateRenderer.DrawDirtyRects">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Rendering.ImmediateRenderer.SceneInvalidated">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Paint(Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Resized(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Render(Avalonia.VisualTree.IVisual,Avalonia.Platform.IRenderTarget)">
            <summary>
            Renders a visual to a render target.
            </summary>
            <param name="visual">The visual.</param>
            <param name="target">The render target.</param>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Render(Avalonia.VisualTree.IVisual,Avalonia.Media.DrawingContext)">
            <summary>
            Renders a visual to a drawing context.
            </summary>
            <param name="visual">The visual.</param>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.AddDirty(Avalonia.VisualTree.IVisual)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Dispose">
            <summary>
            Ends the operation of the renderer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.HitTest(Avalonia.Point,Avalonia.VisualTree.IVisual,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.RecalculateChildren(Avalonia.VisualTree.IVisual)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Start">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Avalonia#Rendering#IVisualBrushRenderer#GetRenderTargetSize(Avalonia.Media.IVisualBrush)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.ImmediateRenderer.Avalonia#Rendering#IVisualBrushRenderer#RenderVisualBrush(Avalonia.Platform.IDrawingContextImpl,Avalonia.Media.IVisualBrush)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.IRenderer">
            <summary>
            Defines the interface for a renderer.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderer.DrawFps">
            <summary>
            Gets or sets a value indicating whether the renderer should draw an FPS counter.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderer.DrawDirtyRects">
            <summary>
            Gets or sets a value indicating whether the renderer should draw a visual representation
            of its dirty rectangles.
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.IRenderer.SceneInvalidated">
            <summary>
            Raised when a portion of the scene has been invalidated.
            </summary>
            <remarks>
            Indicates that the underlying low-level scene information has been updated. Used to
            signal that an update to the current pointer-over state may be required.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.AddDirty(Avalonia.VisualTree.IVisual)">
            <summary>
            Mark a visual as dirty and needing re-rendering.
            </summary>
            <param name="visual">The visual.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.HitTest(Avalonia.Point,Avalonia.VisualTree.IVisual,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <summary>
            Hit tests a location to find the visuals at the specified point.
            </summary>
            <param name="p">The point, in client coordinates.</param>
            <param name="root">The root of the subtree to search.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visuals at the specified point, topmost first.</returns>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.HitTestFirst(Avalonia.Point,Avalonia.VisualTree.IVisual,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <summary>
            Hit tests a location to find first visual at the specified point.
            </summary>
            <param name="p">The point, in client coordinates.</param>
            <param name="root">The root of the subtree to search.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visual at the specified point, topmost first.</returns>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.RecalculateChildren(Avalonia.VisualTree.IVisual)">
            <summary>
            Informs the renderer that the z-ordering of a visual's children has changed.
            </summary>
            <param name="visual">The visual.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Resized(Avalonia.Size)">
            <summary>
            Called when a resize notification is received by the control being rendered.
            </summary>
            <param name="size">The new size of the window.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Paint(Avalonia.Rect)">
            <summary>
            Called when a paint notification is received by the control being rendered.
            </summary>
            <param name="rect">The dirty rectangle.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Start">
            <summary>
            Starts the renderer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IRenderer.Stop">
            <summary>
            Stops the renderer.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.IRendererFactory">
            <summary>
            Defines the interface for a renderer factory.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IRendererFactory.Create(Avalonia.Rendering.IRenderRoot,Avalonia.Rendering.IRenderLoop)">
            <summary>
            Creates a renderer.
            </summary>
            <param name="root">The root visual.</param>
            <param name="renderLoop">The render loop.</param>
        </member>
        <member name="T:Avalonia.Rendering.IRenderLoop">
            <summary>
            The application render loop.
            </summary>
            <remarks>
            The render loop is responsible for advancing the animation timer and updating the scene
            graph for visible windows.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.IRenderLoop.Add(Avalonia.Rendering.IRenderLoopTask)">
            <summary>
            Adds an update task.
            </summary>
            <param name="i">The update task.</param>
            <remarks>
            Registered update tasks will be polled on each tick of the render loop after the
            animation timer has been pulsed.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.IRenderLoop.Remove(Avalonia.Rendering.IRenderLoopTask)">
            <summary>
            Removes an update task.
            </summary>
            <param name="i">The update task.</param>
        </member>
        <member name="T:Avalonia.Rendering.IRenderRoot">
            <summary>
            Represents the root of a renderable tree.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderRoot.ClientSize">
            <summary>
            Gets the client size of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderRoot.Renderer">
            <summary>
            Gets the renderer for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.IRenderRoot.RenderScaling">
            <summary>
            The scaling factor to use in rendering.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IRenderRoot.CreateRenderTarget">
            <summary>
            Creates a render target for the window.
            </summary>
            <returns>An <see cref="T:Avalonia.Platform.IRenderTarget"/>.</returns>
        </member>
        <member name="M:Avalonia.Rendering.IRenderRoot.Invalidate(Avalonia.Rect)">
            <summary>
            Adds a rectangle to the window's dirty region.
            </summary>
            <param name="rect">The rectangle.</param>
        </member>
        <member name="M:Avalonia.Rendering.IRenderRoot.PointToClient(Avalonia.PixelPoint)">
            <summary>
            Converts a point from screen to client coordinates.
            </summary>
            <param name="point">The point in screen device coordinates.</param>
            <returns>The point in client coordinates.</returns>
        </member>
        <member name="M:Avalonia.Rendering.IRenderRoot.PointToScreen(Avalonia.Point)">
            <summary>
            Converts a point from client to screen coordinates.
            </summary>
            <param name="point">The point in client coordinates.</param>
            <returns>The point in screen device coordinates.</returns>
        </member>
        <member name="T:Avalonia.Rendering.IRenderTimer">
            <summary>
            Defines the interface implemented by an application render timer.
            </summary>
        </member>
        <member name="E:Avalonia.Rendering.IRenderTimer.Tick">
            <summary>
            Raised when the render timer ticks to signal a new frame should be drawn.
            </summary>
            <remarks>
            This event can be raised on any thread; it is the responsibility of the subscriber to
            switch execution to the right thread.
            </remarks>
        </member>
        <member name="T:Avalonia.Rendering.IVisualBrushInitialize">
            <summary>
            Internal interface for initializing controls that are to be used as the visual in a
            <see cref="T:Avalonia.Media.VisualBrush"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IVisualBrushInitialize.EnsureInitialized">
            <summary>
            Ensures that the control is ready to use as the visual in a visual brush.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.IVisualBrushRenderer">
            <summary>
            Defines a renderer used to render a visual brush to a bitmap.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.IVisualBrushRenderer.GetRenderTargetSize(Avalonia.Media.IVisualBrush)">
            <summary>
            Gets the size of the intermediate render target to which the visual brush should be
            drawn.
            </summary>
            <param name="brush">The visual brush.</param>
            <returns>The size of the intermediate render target to create.</returns>
        </member>
        <member name="M:Avalonia.Rendering.IVisualBrushRenderer.RenderVisualBrush(Avalonia.Platform.IDrawingContextImpl,Avalonia.Media.IVisualBrush)">
            <summary>
            Renders a visual brush to a bitmap.
            </summary>
            <param name="context">The drawing context to render to.</param>
            <param name="brush">The visual brush.</param>
            <returns>A bitmap containing the rendered brush.</returns>
        </member>
        <member name="T:Avalonia.Rendering.RenderLoop">
            <summary>
            The application render loop.
            </summary>
            <remarks>
            The render loop is responsible for advancing the animation timer and updating the scene
            graph for visible windows.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.RenderLoop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.RenderLoop"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.RenderLoop.#ctor(Avalonia.Rendering.IRenderTimer,Avalonia.Threading.IDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.RenderLoop"/> class.
            </summary>
            <param name="timer">The render timer.</param>
            <param name="dispatcher">The UI thread dispatcher.</param>
        </member>
        <member name="P:Avalonia.Rendering.RenderLoop.Timer">
            <summary>
            Gets the render timer.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.RenderLoop.Add(Avalonia.Rendering.IRenderLoopTask)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.RenderLoop.Remove(Avalonia.Rendering.IRenderLoopTask)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode">
            <summary>
            A node in the scene graph which represents an bitmap blending mode push or pop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode.#ctor(Avalonia.Visuals.Media.Imaging.BitmapBlendingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode"/> class that represents an
            <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode"/> push.
            </summary>
            <param name="bitmapBlend">The <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode"/> to push.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode"/> class that represents an
            <see cref="T:Avalonia.Visuals.Media.Imaging.BitmapBlendingMode"/> pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode.BlendingMode">
            <summary>
            Gets the BitmapBlend to be pushed or null if the operation represents a pop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode.Equals(System.Nullable{Avalonia.Visuals.Media.Imaging.BitmapBlendingMode})">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="blendingMode">the <see cref="T:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode"/> how to compare</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.BitmapBlendModeNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.BrushDrawOperation">
            <summary>
            Base class for draw operations that can use a brush.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.BrushDrawOperation.ChildScenes">
            <summary>
            Gets a collection of child scenes that are needed to draw visual brushes.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.ClipNode">
            <summary>
            A node in the scene graph which represents a clip push or pop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ClipNode.#ctor(Avalonia.Matrix,Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.ClipNode"/> class that represents a
            clip push.
            </summary>
            <param name="transform">The current transform.</param>
            <param name="clip">The clip to push.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ClipNode.#ctor(Avalonia.Matrix,Avalonia.RoundedRect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.ClipNode"/> class that represents a
            clip push.
            </summary>
            <param name="transform">The current transform.</param>
            <param name="clip">The clip to push.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ClipNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.ClipNode"/> class that represents a
            clip pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ClipNode.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ClipNode.Clip">
            <summary>
            Gets the clip to be pushed or null if the operation represents a pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ClipNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ClipNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ClipNode.Equals(Avalonia.Matrix,System.Nullable{Avalonia.RoundedRect})">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="clip">The clip of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ClipNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl">
            <summary>
            A drawing context which builds a scene graph.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.#ctor(Avalonia.Rendering.SceneGraph.ISceneBuilder,Avalonia.Rendering.SceneGraph.SceneLayers)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl"/> class.
            </summary>
            <param name="sceneBuilder">
            A scene builder used for constructing child scenes for visual brushes.
            </param>
            <param name="layers">The scene layers.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.Transform">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.Layers">
            <summary>
            Gets the layers in the scene being built.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.BeginUpdate(Avalonia.Rendering.SceneGraph.VisualNode)">
            <summary>
            Informs the drawing context of the visual node that is about to be rendered.
            </summary>
            <param name="node">The visual node.</param>
            <returns>
            An object which when disposed will commit the changes to visual node.
            </returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.Clear(Avalonia.Media.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.TrimChildren">
            <summary>
            Removes any remaining drawing operations from the visual node.
            </summary>
            <remarks>
            Drawing operations are updated in place, overwriting existing drawing operations if
            they are different. Once drawing has completed for the current visual node, it is
            possible that there are stale drawing operations at the end of the list. This method
            trims these stale drawing operations.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawGeometry(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawBitmap(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},System.Double,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawBitmap(Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},Avalonia.Media.IBrush,Avalonia.Rect,Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawLine(Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawRectangle(Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.RoundedRect,Avalonia.Media.BoxShadows)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawRectangle(Avalonia.Media.IExperimentalAcrylicMaterial,Avalonia.RoundedRect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawText(Avalonia.Media.IBrush,Avalonia.Point,Avalonia.Platform.IFormattedTextImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.DrawGlyphRun(Avalonia.Media.IBrush,Avalonia.Media.GlyphRun)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PopClip">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PopGeometryClip">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PopBitmapBlendMode">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PopOpacity">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PopOpacityMask">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PushClip(Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PushClip(Avalonia.RoundedRect)">
            <inheritdoc />
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PushGeometryClip(Avalonia.Platform.IGeometryImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PushOpacity(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PushOpacityMask(Avalonia.Media.IBrush,Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.DeferredDrawingContextImpl.PushBitmapBlendMode(Avalonia.Visuals.Media.Imaging.BitmapBlendingMode)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.DrawOperation">
            <summary>
            Base class for draw operations that have bounds.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.EllipseNode">
            <summary>
            A node in the scene graph which represents an ellipse draw.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.EllipseNode.Brush">
            <summary>
            Gets the fill brush.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.EllipseNode.Pen">
            <summary>
            Gets the stroke pen.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.EllipseNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.EllipseNode.Rect">
            <summary>
            Gets the rect of the ellipse to draw.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.ExperimentalAcrylicNode">
            <summary>
            A node in the scene graph which represents a rectangle draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ExperimentalAcrylicNode.#ctor(Avalonia.Matrix,Avalonia.Media.IExperimentalAcrylicMaterial,Avalonia.RoundedRect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.RectangleNode"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="material"></param>        
            <param name="rect">The rectangle to draw.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ExperimentalAcrylicNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ExperimentalAcrylicNode.Rect">
            <summary>
            Gets the rectangle to draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ExperimentalAcrylicNode.Equals(Avalonia.Matrix,Avalonia.Media.IExperimentalAcrylicMaterial,Avalonia.RoundedRect)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="material">The fill of the other draw operation.</param>
            <param name="rect">The rectangle of the other draw operation.</param>        
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ExperimentalAcrylicNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ExperimentalAcrylicNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryBoundsHelper.CalculateBoundsWithLineCaps(Avalonia.Rect,Avalonia.Media.IPen)">
            <summary>
            Calculates the bounds of a given geometry with respect to the pens <see cref="P:Avalonia.Media.IPen.LineCap"/>
            </summary>
            <param name="originalBounds">The calculated bounds without <see cref="P:Avalonia.Media.IPen.LineCap"/>s</param>
            <param name="pen">The pen with information about the <see cref="P:Avalonia.Media.IPen.LineCap"/>s</param>
            <returns></returns>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.GeometryClipNode">
            <summary>
            A node in the scene graph which represents a geometry clip push or pop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryClipNode.#ctor(Avalonia.Matrix,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.GeometryClipNode"/> class that represents a
            geometry clip push.
            </summary>
            <param name="transform">The current transform.</param>
            <param name="clip">The clip to push.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryClipNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.GeometryClipNode"/> class that represents a
            geometry clip pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryClipNode.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryClipNode.Clip">
            <summary>
            Gets the clip to be pushed or null if the operation represents a pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryClipNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryClipNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryClipNode.Equals(Avalonia.Matrix,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="clip">The clip of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryClipNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.GeometryNode">
            <summary>
            A node in the scene graph which represents a geometry draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryNode.#ctor(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl,System.Collections.Generic.IDictionary{Avalonia.VisualTree.IVisual,Avalonia.Rendering.SceneGraph.Scene})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.GeometryNode"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="geometry">The geometry.</param>
            <param name="childScenes">Child scenes for drawing visual brushes.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryNode.Brush">
            <summary>
            Gets the fill brush.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryNode.Pen">
            <summary>
            Gets the stroke pen.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryNode.Geometry">
            <summary>
            Gets the geometry to draw.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GeometryNode.ChildScenes">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryNode.Equals(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.Platform.IGeometryImpl)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="brush">The fill of the other draw operation.</param>
            <param name="pen">The stroke of the other draw operation.</param>
            <param name="geometry">The geometry of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GeometryNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.GlyphRunNode">
            <summary>
            A node in the scene graph which represents a glyph run draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GlyphRunNode.#ctor(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Media.GlyphRun,System.Collections.Generic.IDictionary{Avalonia.VisualTree.IVisual,Avalonia.Rendering.SceneGraph.Scene})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.GlyphRunNode"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="foreground">The foreground brush.</param>
            <param name="glyphRun">The glyph run to draw.</param>
            <param name="childScenes">Child scenes for drawing visual brushes.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GlyphRunNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GlyphRunNode.Foreground">
            <summary>
            Gets the foreground brush.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GlyphRunNode.GlyphRun">
            <summary>
            Gets the glyph run to draw.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.GlyphRunNode.ChildScenes">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GlyphRunNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GlyphRunNode.Equals(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Media.GlyphRun)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="foreground">The foreground of the other draw operation.</param>
            <param name="glyphRun">The glyph run of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.GlyphRunNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.IDrawOperation">
            <summary>
            Represents a node in the low-level scene graph that represents geometry.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IDrawOperation.Bounds">
            <summary>
            Gets the bounds of the visible content in the node in global coordinates.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.IDrawOperation.HitTest(Avalonia.Point)">
            <summary>
            Hit test the geometry in this node.
            </summary>
            <param name="p">The point in global coordinates.</param>
            <returns>True if the point hits the node's geometry; otherwise false.</returns>
            <remarks>
            This method does not recurse to child <see cref="T:Avalonia.Rendering.SceneGraph.IVisualNode"/>s, if you want
            to hit test children they must be hit tested manually.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.IDrawOperation.Render(Avalonia.Platform.IDrawingContextImpl)">
            <summary>
            Renders the node to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.ImageNode">
            <summary>
            A node in the scene graph which represents an image draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ImageNode.#ctor(Avalonia.Matrix,Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},System.Double,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.ImageNode"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="source">The image to draw.</param>
            <param name="opacity">The draw opacity.</param>
            <param name="sourceRect">The source rect.</param>
            <param name="destRect">The destination rect.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.Source">
            <summary>
            Gets the image to draw.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.SourceVersion">
            <summary>
            Source bitmap Version
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.Opacity">
            <summary>
            Gets the draw opacity.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.SourceRect">
            <summary>
            Gets the source rect.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.DestRect">
            <summary>
            Gets the destination rect.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.BitmapInterpolationMode">
            <summary>
            Gets the bitmap interpolation mode.
            </summary>
            <value>
            The scaling mode.
            </value>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.ImageNode.BitmapBlendingMode">
            <summary>
            The bitmap blending mode.
            </summary>
            <value>
            The blending mode.
            </value>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ImageNode.Equals(Avalonia.Matrix,Avalonia.Utilities.IRef{Avalonia.Platform.IBitmapImpl},System.Double,Avalonia.Rect,Avalonia.Rect,Avalonia.Visuals.Media.Imaging.BitmapInterpolationMode)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="source">The image of the other draw operation.</param>
            <param name="opacity">The opacity of the other draw operation.</param>
            <param name="sourceRect">The source rect of the other draw operation.</param>
            <param name="destRect">The dest rect of the other draw operation.</param>
            <param name="bitmapInterpolationMode">The bitmap interpolation mode.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ImageNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ImageNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.ISceneBuilder">
            <summary>
            Builds a scene graph from a visual tree.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ISceneBuilder.UpdateAll(Avalonia.Rendering.SceneGraph.Scene)">
            <summary>
            Builds the initial scene graph for a visual tree.
            </summary>
            <param name="scene">The scene to build.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.ISceneBuilder.Update(Avalonia.Rendering.SceneGraph.Scene,Avalonia.VisualTree.IVisual)">
            <summary>
            Updates the visual (and potentially its children) in a scene.
            </summary>
            <param name="scene">The scene.</param>
            <param name="visual">The visual to update.</param>
            <returns>True if changes were made, otherwise false.</returns>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.IVisualNode">
            <summary>
            Represents a node in the low-level scene graph representing an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.Visual">
            <summary>
            Gets the visual to which the node relates.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.Parent">
            <summary>
            Gets the parent scene graph node.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.Transform">
            <summary>
            Gets the transform for the node from global to control coordinates.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.ClipToBoundsRadius">
            <summary>
            Gets the corner radius of visual. Contents are clipped to this radius.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.Bounds">
            <summary>
            Gets the bounds of the node's geometry in global coordinates.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.ClipBounds">
            <summary>
            Gets the clip bounds for the node in global coordinates.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.LayoutBounds">
            <summary>
            Gets the layout bounds for the node in global coordinates.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.ClipToBounds">
            <summary>
            Whether the node is clipped to <see cref="P:Avalonia.Rendering.SceneGraph.IVisualNode.ClipBounds"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.GeometryClip">
            <summary>
            Gets the node's clip geometry, if any.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.HasAncestorGeometryClip">
            <summary>
            Gets a value indicating whether one of the node's ancestors has a geometry clip.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.Children">
            <summary>
            Gets the child scene graph nodes.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.DrawOperations">
            <summary>
            Gets the drawing operations for the visual.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.IVisualNode.Opacity">
            <summary>
            Gets the opacity of the scene graph node.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.IVisualNode.BeginRender(Avalonia.Platform.IDrawingContextImpl,System.Boolean)">
            <summary>
            Sets up the drawing context for rendering the node's geometry.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="skipOpacity">Whether to skip pushing the control's opacity.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.IVisualNode.EndRender(Avalonia.Platform.IDrawingContextImpl,System.Boolean)">
            <summary>
            Resets the drawing context after rendering the node's geometry.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="skipOpacity">Whether to skip popping the control's opacity.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.IVisualNode.HitTest(Avalonia.Point)">
            <summary>
            Hit test the geometry in this node.
            </summary>
            <param name="p">The point in global coordinates.</param>
            <returns>True if the point hits the node's geometry; otherwise false.</returns>
            <remarks>
            This method does not recurse to child <see cref="T:Avalonia.Rendering.SceneGraph.IVisualNode"/>s, if you want
            to hit test children they must be hit tested manually.
            </remarks>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.LineNode">
            <summary>
            A node in the scene graph which represents a line draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.LineNode.#ctor(Avalonia.Matrix,Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point,System.Collections.Generic.IDictionary{Avalonia.VisualTree.IVisual,Avalonia.Rendering.SceneGraph.Scene})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.GeometryNode"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="pen">The stroke pen.</param>
            <param name="p1">The start point of the line.</param>
            <param name="p2">The end point of the line.</param>
            <param name="childScenes">Child scenes for drawing visual brushes.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.LineNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.LineNode.Pen">
            <summary>
            Gets the stroke pen.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.LineNode.P1">
            <summary>
            Gets the start point of the line.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.LineNode.P2">
            <summary>
            Gets the end point of the line.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.LineNode.ChildScenes">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.LineNode.Equals(Avalonia.Matrix,Avalonia.Media.IPen,Avalonia.Point,Avalonia.Point)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="pen">The stroke of the other draw operation.</param>
            <param name="p1">The start point of the other draw operation.</param>
            <param name="p2">The end point of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.OpacityMaskNode">
            <summary>
            A node in the scene graph which represents an opacity mask push or pop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityMaskNode.#ctor(Avalonia.Media.IBrush,Avalonia.Rect,System.Collections.Generic.IDictionary{Avalonia.VisualTree.IVisual,Avalonia.Rendering.SceneGraph.Scene})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.OpacityMaskNode"/> class that represents an
            opacity mask push.
            </summary>
            <param name="mask">The opacity mask to push.</param>
            <param name="bounds">The bounds of the mask.</param>
            <param name="childScenes">Child scenes for drawing visual brushes.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityMaskNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.OpacityMaskNode"/> class that represents an
            opacity mask pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.OpacityMaskNode.Mask">
            <summary>
            Gets the mask to be pushed or null if the operation represents a pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.OpacityMaskNode.MaskBounds">
            <summary>
            Gets the bounds of the opacity mask or null if the operation represents a pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.OpacityMaskNode.ChildScenes">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityMaskNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityMaskNode.Equals(Avalonia.Media.IBrush,System.Nullable{Avalonia.Rect})">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="mask">The opacity mask of the other draw operation.</param>
            <param name="bounds">The opacity mask bounds of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityMaskNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.OpacityNode">
            <summary>
            A node in the scene graph which represents an opacity push or pop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityNode.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.OpacityNode"/> class that represents an
            opacity push.
            </summary>
            <param name="opacity">The opacity to push.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.OpacityNode"/> class that represents an
            opacity pop.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.OpacityNode.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.OpacityNode.Opacity">
            <summary>
            Gets the opacity to be pushed or null if the operation represents a pop.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityNode.Equals(System.Nullable{System.Double})">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="opacity">The opacity of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.OpacityNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.RectangleNode">
            <summary>
            A node in the scene graph which represents a rectangle draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.RectangleNode.#ctor(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.RoundedRect,Avalonia.Media.BoxShadows,System.Collections.Generic.IDictionary{Avalonia.VisualTree.IVisual,Avalonia.Rendering.SceneGraph.Scene})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.RectangleNode"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="brush">The fill brush.</param>
            <param name="pen">The stroke pen.</param>
            <param name="rect">The rectangle to draw.</param>
            <param name="boxShadows">The box shadow parameters</param>
            <param name="childScenes">Child scenes for drawing visual brushes.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.RectangleNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.RectangleNode.Brush">
            <summary>
            Gets the fill brush.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.RectangleNode.Pen">
            <summary>
            Gets the stroke pen.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.RectangleNode.Rect">
            <summary>
            Gets the rectangle to draw.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.RectangleNode.BoxShadows">
            <summary>
            The parameters for the box-shadow effect
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.RectangleNode.ChildScenes">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.RectangleNode.Equals(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Media.IPen,Avalonia.RoundedRect,Avalonia.Media.BoxShadows)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="brush">The fill of the other draw operation.</param>
            <param name="pen">The stroke of the other draw operation.</param>
            <param name="rect">The rectangle of the other draw operation.</param>
            <param name="boxShadows">The box shadow parameters of the other draw operation</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.RectangleNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.RectangleNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.Scene">
            <summary>
            Represents a scene graph used by the <see cref="T:Avalonia.Rendering.DeferredRenderer"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.Scene.#ctor(Avalonia.VisualTree.IVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.Scene"/> class.
            </summary>
            <param name="rootVisual">The root visual to draw.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.Scene.Generation">
            <summary>
            Gets a value identifying the scene's generation. This is incremented each time the scene is cloned.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.Scene.Layers">
            <summary>
            Gets the layers for the scene.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.Scene.Root">
            <summary>
            Gets the root node of the scene graph.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.Scene.Size">
            <summary>
            Gets or sets the size of the scene in device independent pixels.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.Scene.Scaling">
            <summary>
            Gets or sets the scene scaling.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.Scene.Add(Avalonia.Rendering.SceneGraph.IVisualNode)">
            <summary>
            Adds a node to the scene index.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.Scene.CloneScene">
            <summary>
            Clones the scene.
            </summary>
            <returns>The cloned scene.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.Scene.FindNode(Avalonia.VisualTree.IVisual)">
            <summary>
            Tries to find a node in the scene graph representing the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <returns>
            The node representing the visual or null if it could not be found.
            </returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.Scene.HitTest(Avalonia.Point,Avalonia.VisualTree.IVisual,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <summary>
            Gets the visuals at a point in the scene.
            </summary>
            <param name="p">The point.</param>
            <param name="root">The root of the subtree to search.</param>
            <param name="filter">A filter. May be null.</param>
            <returns>The visuals at the specified point.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.Scene.HitTestFirst(Avalonia.Point,Avalonia.VisualTree.IVisual,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <summary>
            Gets the visual at a point in the scene.
            </summary>
            <param name="p">The point.</param>
            <param name="root">The root of the subtree to search.</param>
            <param name="filter">A filter. May be null.</param>
            <returns>The visual at the specified point.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.Scene.Remove(Avalonia.Rendering.SceneGraph.IVisualNode)">
            <summary>
            Removes a node from the scene index.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.SceneBuilder">
            <summary>
            Builds a scene graph from a visual tree.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneBuilder.UpdateAll(Avalonia.Rendering.SceneGraph.Scene)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneBuilder.Update(Avalonia.Rendering.SceneGraph.Scene,Avalonia.VisualTree.IVisual)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.SceneLayer">
            <summary>
            Represents a layer in a <see cref="T:Avalonia.Rendering.SceneGraph.Scene"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayer.#ctor(Avalonia.VisualTree.IVisual,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.SceneLayer"/> class.
            </summary>
            <param name="layerRoot">The visual at the root of the layer.</param>
            <param name="distanceFromRoot">The distance from the scene root.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayer.Clone">
            <summary>
            Clones the layer.
            </summary>
            <returns>The cloned layer.</returns>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayer.LayerRoot">
            <summary>
            Gets the visual at the root of the layer.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayer.DistanceFromRoot">
            <summary>
            Gets the distance of the layer root from the root of the scene.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayer.Opacity">
            <summary>
            Gets or sets the opacity of the layer.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayer.OpacityMask">
            <summary>
            Gets or sets the opacity mask for the layer.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayer.OpacityMaskRect">
            <summary>
            Gets or sets the target rectangle for the layer opacity mask.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayer.GeometryClip">
            <summary>
            Gets the layer's geometry clip.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayer.Dirty">
            <summary>
            Gets the dirty rectangles for the layer.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.SceneLayers">
            <summary>
            Holds a collection of layers for a <see cref="T:Avalonia.Rendering.SceneGraph.Scene"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.#ctor(Avalonia.VisualTree.IVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.SceneLayers"/> class.
            </summary>
            <param name="root">The scene's root visual.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.#ctor(Avalonia.VisualTree.IVisual,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.SceneLayers"/> class.
            </summary>
            <param name="root">The scene's root visual.</param>
            <param name="capacity">Initial layer capacity.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayers.Count">
            <summary>
            Gets the number of layers in the scene.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayers.HasDirty">
            <summary>
            Gets a value indicating whether any of the layers have a dirty region.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayers.Item(System.Int32)">
            <summary>
            Gets a layer by index.
            </summary>
            <param name="index">The index of the layer.</param>
            <returns>The layer.</returns>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.SceneLayers.Item(Avalonia.VisualTree.IVisual)">
            <summary>
            Gets a layer by its root visual.
            </summary>
            <param name="visual">The layer's root visual.</param>
            <returns>The layer.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.Add(Avalonia.VisualTree.IVisual)">
            <summary>
            Adds a layer to the scene.
            </summary>
            <param name="layerRoot">The root visual of the layer.</param>
            <returns>The created layer.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.Clone">
            <summary>
            Makes a deep clone of the layers.
            </summary>
            <returns>The cloned layers.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.Exists(Avalonia.VisualTree.IVisual)">
            <summary>
            Tests whether a layer exists with the specified root visual.
            </summary>
            <param name="layerRoot">The root visual.</param>
            <returns>
            True if a layer exists with the specified root visual, otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.Find(Avalonia.VisualTree.IVisual)">
            <summary>
            Tries to find a layer with the specified root visual.
            </summary>
            <param name="layerRoot">The root visual.</param>
            <returns>The layer if found, otherwise null.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.GetOrAdd(Avalonia.VisualTree.IVisual)">
            <summary>
            Gets an existing layer or creates a new one if no existing layer is found.
            </summary>
            <param name="layerRoot">The root visual.</param>
            <returns>The layer.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.Remove(Avalonia.VisualTree.IVisual)">
            <summary>
            Removes a layer from the scene.
            </summary>
            <param name="layerRoot">The root visual.</param>
            <returns>True if a matching layer was removed, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.Remove(Avalonia.Rendering.SceneGraph.SceneLayer)">
            <summary>
            Removes a layer from the scene.
            </summary>
            <param name="layer">The layer.</param>
            <returns>True if the layer was part of the scene, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.SceneLayers.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.TextNode">
            <summary>
            A node in the scene graph which represents a text draw.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.TextNode.#ctor(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Point,Avalonia.Platform.IFormattedTextImpl,System.Collections.Generic.IDictionary{Avalonia.VisualTree.IVisual,Avalonia.Rendering.SceneGraph.Scene})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.TextNode"/> class.
            </summary>
            <param name="transform">The transform.</param>
            <param name="foreground">The foreground brush.</param>
            <param name="origin">The draw origin.</param>
            <param name="text">The text to draw.</param>
            <param name="childScenes">Child scenes for drawing visual brushes.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.TextNode.Transform">
            <summary>
            Gets the transform with which the node will be drawn.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.TextNode.Foreground">
            <summary>
            Gets the foreground brush.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.TextNode.Origin">
            <summary>
            Gets the draw origin.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.TextNode.Text">
            <summary>
            Gets the text to draw.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.TextNode.ChildScenes">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.TextNode.Render(Avalonia.Platform.IDrawingContextImpl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.TextNode.Equals(Avalonia.Matrix,Avalonia.Media.IBrush,Avalonia.Point,Avalonia.Platform.IFormattedTextImpl)">
            <summary>
            Determines if this draw operation equals another.
            </summary>
            <param name="transform">The transform of the other draw operation.</param>
            <param name="foreground">The foreground of the other draw operation.</param>
            <param name="origin">The draw origin of the other draw operation.</param>
            <param name="text">The text of the other draw operation.</param>
            <returns>True if the draw operations are the same, otherwise false.</returns>
            <remarks>
            The properties of the other draw operation are passed in as arguments to prevent
            allocation of a not-yet-constructed draw operation object.
            </remarks>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.TextNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Rendering.SceneGraph.VisualNode">
            <summary>
            A node in the low-level scene graph representing an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.#ctor(Avalonia.VisualTree.IVisual,Avalonia.Rendering.SceneGraph.IVisualNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneGraph.VisualNode"/> class.
            </summary>
            <param name="visual">The visual that this node represents.</param>
            <param name="parent">The parent scene graph node, if any.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.Visual">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.Parent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.ClipToBoundsRadius">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.Transform">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.Bounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.ClipBounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.LayoutBounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.ClipToBounds">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.GeometryClip">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.HasAncestorGeometryClip">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.Opacity">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.OpacityMask">
            <summary>
            Gets or sets the opacity mask for the scene graph node.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.SubTreeUpdated">
            <summary>
            Gets a value indicating whether this node in the scene graph has already
            been updated in the current update pass.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.OpacityChanged">
            <summary>
            Gets a value indicating whether the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.Opacity"/> property has changed.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.Children">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Rendering.SceneGraph.VisualNode.DrawOperations">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.AddChild(Avalonia.Rendering.SceneGraph.IVisualNode)">
            <summary>
            Adds a child to the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.Children"/> collection.
            </summary>
            <param name="child">The child to add.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.AddDrawOperation(Avalonia.Utilities.IRef{Avalonia.Rendering.SceneGraph.IDrawOperation})">
            <summary>
            Adds an operation to the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.DrawOperations"/> collection.
            </summary>
            <param name="operation">The operation to add.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.RemoveChild(Avalonia.Rendering.SceneGraph.IVisualNode)">
            <summary>
            Removes a child from the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.Children"/> collection.
            </summary>
            <param name="child">The child to remove.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.ReplaceChild(System.Int32,Avalonia.Rendering.SceneGraph.IVisualNode)">
            <summary>
            Replaces a child in the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.Children"/> collection.
            </summary>
            <param name="index">The child to be replaced.</param>
            <param name="node">The child to add.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.ReplaceDrawOperation(System.Int32,Avalonia.Utilities.IRef{Avalonia.Rendering.SceneGraph.IDrawOperation})">
            <summary>
            Replaces an item in the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.DrawOperations"/> collection.
            </summary>
            <param name="index">The operation to be replaced.</param>
            <param name="operation">The operation to add.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.SortChildren(Avalonia.Rendering.SceneGraph.Scene)">
            <summary>
            Sorts the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.Children"/> collection according to the order of the visual's
            children and their z-index.
            </summary>
            <param name="scene">The scene that the node is a part of.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.TrimChildren(System.Int32)">
            <summary>
            Removes items in the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.Children"/> collection from the specified index
            to the end.
            </summary>
            <param name="first">The index of the first child to be removed.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.TrimDrawOperations(System.Int32)">
            <summary>
            Removes items in the <see cref="P:Avalonia.Rendering.SceneGraph.VisualNode.DrawOperations"/> collection from the specified index
            to the end.
            </summary>
            <param name="first">The index of the first operation to be removed.</param>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.Clone(Avalonia.Rendering.SceneGraph.IVisualNode)">
            <summary>
            Makes a copy of the node
            </summary>
            <param name="parent">The new parent node.</param>
            <returns>A cloned node.</returns>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.HitTest(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.BeginRender(Avalonia.Platform.IDrawingContextImpl,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.EndRender(Avalonia.Platform.IDrawingContextImpl,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.EnsureDrawOperationsCreated">
            <summary>
            Ensures that this node draw operations have been created and are mutable (in case we are using cloned operations).
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneGraph.VisualNode.CreateDisposeDrawOperations(System.Collections.Generic.List{Avalonia.Utilities.IRef{Avalonia.Rendering.SceneGraph.IDrawOperation}})">
            <summary>
            Creates disposable that will dispose all items in passed draw operations after being disposed.
            It is crucial that we don't capture current <see cref="T:Avalonia.Rendering.SceneGraph.VisualNode"/> instance
            as draw operations can be cloned and may persist across subsequent scenes.
            </summary>
            <param name="drawOperations">Draw operations that need to be disposed.</param>
            <returns>Disposable for given draw operations.</returns>
        </member>
        <member name="T:Avalonia.Rendering.SceneInvalidatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Rendering.IRenderer.SceneInvalidated"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.SceneInvalidatedEventArgs.#ctor(Avalonia.Rendering.IRenderRoot,Avalonia.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.SceneInvalidatedEventArgs"/> class.
            </summary>
            <param name="root">The render root that has been updated.</param>
            <param name="dirtyRect">The updated area.</param>
        </member>
        <member name="P:Avalonia.Rendering.SceneInvalidatedEventArgs.DirtyRect">
            <summary>
            Gets the invalidated area.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.SceneInvalidatedEventArgs.RenderRoot">
            <summary>
            Gets the render root that has been invalidated.
            </summary>
        </member>
        <member name="T:Avalonia.Rendering.UiThreadRenderTimer">
            <summary>
            Render timer that ticks on UI thread. Useful for debugging or bootstrapping on new platforms 
            </summary>
        </member>
        <member name="M:Avalonia.Rendering.Utilities.TileBrushCalculator.#ctor(Avalonia.Media.ITileBrush,Avalonia.Size,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.Utilities.TileBrushCalculator"/> class.
            </summary>
            <param name="brush">The brush to be rendered.</param>
            <param name="contentSize">The size of the content of the tile brush.</param>
            <param name="targetSize">The size of the control to which the brush is being rendered.</param>
        </member>
        <member name="M:Avalonia.Rendering.Utilities.TileBrushCalculator.#ctor(Avalonia.Media.TileMode,Avalonia.Media.Stretch,Avalonia.Media.AlignmentX,Avalonia.Media.AlignmentY,Avalonia.RelativeRect,Avalonia.RelativeRect,Avalonia.Size,Avalonia.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Rendering.Utilities.TileBrushCalculator"/> class.
            </summary>
            <param name="tileMode">The brush's tile mode.</param>
            <param name="stretch">The brush's stretch.</param>
            <param name="alignmentX">The brush's horizontal alignment.</param>
            <param name="alignmentY">The brush's vertical alignment.</param>
            <param name="sourceRect">The brush's source rect</param>
            <param name="destinationRect">The brush's destination rect.</param>
            <param name="contentSize">The size of the content of the tile brush.</param>
            <param name="targetSize">The size of the control to which the brush is being rendered.</param>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.DestinationRect">
            <summary>
            Gets the rectangle on the destination control to which content should be rendered.
            </summary>
            <remarks>
            If <see cref="T:Avalonia.Media.TileMode"/> of the brush is repeating then this is describes rectangle
            of a single repeat of the tiled content.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.IntermediateClip">
            <summary>
            Gets the clip rectangle on the intermediate image with which the brush content should be
            drawn when <see cref="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate"/> is true.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.IntermediateSize">
            <summary>
            Gets the size of the intermediate image that should be created when
            <see cref="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate"/> is true.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.IntermediateTransform">
            <summary>
            Gets the transform to be used when rendering to the intermediate image when
            <see cref="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate"/> is true.
            </summary>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.NeedsIntermediate">
            <summary>
            Gets a value indicating whether an intermediate image should be created in order to
            render the tile brush.
            </summary>
            <remarks>
            Intermediate images are required when a brush's <see cref="T:Avalonia.Media.TileMode"/> is not repeating
            but the source and destination aspect ratios are unequal, as all of the currently
            supported rendering backends do not support non-tiled image brushes.
            </remarks>
        </member>
        <member name="P:Avalonia.Rendering.Utilities.TileBrushCalculator.SourceRect">
            <summary>
            Gets the area of the source content to be rendered.
            </summary>
        </member>
        <member name="T:Avalonia.Size">
            <summary>
            Defines a size.
            </summary>
        </member>
        <member name="F:Avalonia.Size.Infinity">
            <summary>
            A size representing infinity.
            </summary>
        </member>
        <member name="F:Avalonia.Size.Empty">
            <summary>
            A size representing zero
            </summary>
        </member>
        <member name="F:Avalonia.Size._width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:Avalonia.Size._height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="M:Avalonia.Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Size"/> structure.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Avalonia.Size.AspectRatio">
            <summary>
            Gets the aspect ratio of the size.
            </summary>
        </member>
        <member name="P:Avalonia.Size.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Avalonia.Size.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Avalonia.Size.op_Equality(Avalonia.Size,Avalonia.Size)">
            <summary>
            Checks for equality between two <see cref="T:Avalonia.Size"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are equal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Inequality(Avalonia.Size,Avalonia.Size)">
            <summary>
            Checks for inequality between two <see cref="T:Avalonia.Size"/>s.
            </summary>
            <param name="left">The first size.</param>
            <param name="right">The second size.</param>
            <returns>True if the sizes are unequal; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Multiply(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Division(Avalonia.Size,Avalonia.Vector)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Division(Avalonia.Size,Avalonia.Size)">
            <summary>
            Divides a size by another size to produce a scaling factor.
            </summary>
            <param name="left">The first size</param>
            <param name="right">The second size.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Multiply(Avalonia.Size,System.Double)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.op_Division(Avalonia.Size,System.Double)">
            <summary>
            Scales a size.
            </summary>
            <param name="size">The size</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled size.</returns>
        </member>
        <member name="M:Avalonia.Size.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Size"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Size"/>.</returns>
        </member>
        <member name="M:Avalonia.Size.Constrain(Avalonia.Size)">
            <summary>
            Constrains the size.
            </summary>
            <param name="constraint">The size to constrain to.</param>
            <returns>The constrained size.</returns>
        </member>
        <member name="M:Avalonia.Size.Deflate(Avalonia.Thickness)">
            <summary>
            Deflates the size by a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <param name="thickness">The thickness.</param>
            <returns>The deflated size.</returns>
            <remarks>The deflated size cannot be less than 0.</remarks>
        </member>
        <member name="M:Avalonia.Size.Equals(Avalonia.Size)">
            <summary>
            Returns a boolean indicating whether the size is equal to the other given size (bitwise).
            </summary>
            <param name="other">The other size to test equality against.</param>
            <returns>True if this size is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Size.NearlyEquals(Avalonia.Size)">
            <summary>
            Returns a boolean indicating whether the size is equal to the other given size (numerically).
            </summary>
            <param name="other">The other size to test equality against.</param>
            <returns>True if this size is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Size.Equals(System.Object)">
            <summary>
            Checks for equality between a size and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a size that equals the current size.
            </returns>
        </member>
        <member name="M:Avalonia.Size.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.Size"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Size.Inflate(Avalonia.Thickness)">
            <summary>
            Inflates the size by a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <param name="thickness">The thickness.</param>
            <returns>The inflated size.</returns>
        </member>
        <member name="M:Avalonia.Size.WithWidth(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Size"/> with the same height and the specified width.
            </summary>
            <param name="width">The width.</param>
            <returns>The new <see cref="T:Avalonia.Size"/>.</returns>
        </member>
        <member name="M:Avalonia.Size.WithHeight(System.Double)">
            <summary>
            Returns a new <see cref="T:Avalonia.Size"/> with the same width and the specified height.
            </summary>
            <param name="height">The height.</param>
            <returns>The new <see cref="T:Avalonia.Size"/>.</returns>
        </member>
        <member name="M:Avalonia.Size.ToString">
            <summary>
            Returns the string representation of the size.
            </summary>
            <returns>The string representation of the size.</returns>
        </member>
        <member name="M:Avalonia.Size.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Deconstructs the size into its Width and Height values.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Avalonia.Size.IsDefault">
            <summary>
            Gets a value indicating whether the Width and Height values are zero.
            </summary>
        </member>
        <member name="T:Avalonia.Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._left">
            <summary>
            The thickness on the left.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._top">
            <summary>
            The thickness on the top.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._right">
            <summary>
            The thickness on the right.
            </summary>
        </member>
        <member name="F:Avalonia.Thickness._bottom">
            <summary>
            The thickness on the bottom.
            </summary>
        </member>
        <member name="M:Avalonia.Thickness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Thickness"/> structure.
            </summary>
            <param name="uniformLength">The length that should be applied to all sides.</param>
        </member>
        <member name="M:Avalonia.Thickness.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Thickness"/> structure.
            </summary>
            <param name="horizontal">The thickness on the left and right.</param>
            <param name="vertical">The thickness on the top and bottom.</param>
        </member>
        <member name="M:Avalonia.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Thickness"/> structure.
            </summary>
            <param name="left">The thickness on the left.</param>
            <param name="top">The thickness on the top.</param>
            <param name="right">The thickness on the right.</param>
            <param name="bottom">The thickness on the bottom.</param>
        </member>
        <member name="P:Avalonia.Thickness.Left">
            <summary>
            Gets the thickness on the left.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.Top">
            <summary>
            Gets the thickness on the top.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.Right">
            <summary>
            Gets the thickness on the right.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.Bottom">
            <summary>
            Gets the thickness on the bottom.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.IsEmpty">
            <summary>
            Gets a value indicating whether all sides are set to 0.
            </summary>
        </member>
        <member name="P:Avalonia.Thickness.IsUniform">
            <summary>
            Gets a value indicating whether all sides are equal.
            </summary>
        </member>
        <member name="M:Avalonia.Thickness.op_Equality(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Compares two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Inequality(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Compares two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The inequality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Addition(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Adds two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Subtraction(Avalonia.Thickness,Avalonia.Thickness)">
            <summary>
            Subtracts two Thicknesses.
            </summary>
            <param name="a">The first thickness.</param>
            <param name="b">The second thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Multiply(Avalonia.Thickness,System.Double)">
            <summary>
            Multiplies a Thickness to a scalar.
            </summary>
            <param name="a">The thickness.</param>
            <param name="b">The scalar.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Addition(Avalonia.Size,Avalonia.Thickness)">
            <summary>
            Adds a Thickness to a Size.
            </summary>
            <param name="size">The size.</param>
            <param name="thickness">The thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.op_Subtraction(Avalonia.Size,Avalonia.Thickness)">
            <summary>
            Subtracts a Thickness from a Size.
            </summary>
            <param name="size">The size.</param>
            <param name="thickness">The thickness.</param>
            <returns>The equality.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Thickness"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Thickness"/>.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Equals(Avalonia.Thickness)">
            <summary>
            Returns a boolean indicating whether the thickness is equal to the other given point.
            </summary>
            <param name="other">The other thickness to test equality against.</param>
            <returns>True if this thickness is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Equals(System.Object)">
            <summary>
            Checks for equality between a thickness and an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            True if <paramref name="obj"/> is a size that equals the current size.
            </returns>
        </member>
        <member name="M:Avalonia.Thickness.GetHashCode">
            <summary>
            Returns a hash code for a <see cref="T:Avalonia.Thickness"/>.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Thickness.ToString">
            <summary>
            Returns the string representation of the thickness.
            </summary>
            <returns>The string representation of the thickness.</returns>
        </member>
        <member name="M:Avalonia.Thickness.Deconstruct(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Deconstructor the thickness into its left, top, right and bottom thickness values.
            </summary>
            <param name="left">The thickness on the left.</param>
            <param name="top">The thickness on the top.</param>
            <param name="right">The thickness on the right.</param>
            <param name="bottom">The thickness on the bottom.</param>
        </member>
        <member name="P:Avalonia.Thickness.IsDefault">
            <summary>
            Gets a value indicating whether the left, top, right and bottom thickness values are zero.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.ReadOnlySlice`1">
            <summary>
                ReadOnlySlice enables the ability to work with a sequence within a region of memory and retains the position in within that region.
            </summary>
            <typeparam name="T">The type of elements in the slice.</typeparam>
        </member>
        <member name="P:Avalonia.Utilities.ReadOnlySlice`1.Start">
            <summary>
                Gets the start.
            </summary>
            <value>
                The start.
            </value>
        </member>
        <member name="P:Avalonia.Utilities.ReadOnlySlice`1.End">
            <summary>
                Gets the end.
            </summary>
            <value>
                The end.
            </value>
        </member>
        <member name="P:Avalonia.Utilities.ReadOnlySlice`1.Length">
            <summary>
                Gets the length.
            </summary>
            <value>
                The length.
            </value>
        </member>
        <member name="P:Avalonia.Utilities.ReadOnlySlice`1.IsEmpty">
            <summary>
                Gets a value that indicates whether this instance of <see cref="T:Avalonia.Utilities.ReadOnlySlice`1"/> is Empty.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ReadOnlySlice`1.Buffer">
            <summary>
                The buffer.
            </summary>
        </member>
        <member name="M:Avalonia.Utilities.ReadOnlySlice`1.AsSlice(System.Int32,System.Int32)">
            <summary>
                Returns a sub slice of elements that start at the specified index and has the specified number of elements.
            </summary>
            <param name="start">The start of the sub slice.</param>
            <param name="length">The length of the sub slice.</param>
            <returns>A <see cref="T:Avalonia.Utilities.ReadOnlySlice`1"/> that contains the specified number of elements from the specified start.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ReadOnlySlice`1.Take(System.Int32)">
            <summary>
                Returns a specified number of contiguous elements from the start of the slice.
            </summary>
            <param name="length">The number of elements to return.</param>
            <returns>A <see cref="T:Avalonia.Utilities.ReadOnlySlice`1"/> that contains the specified number of elements from the start of this slice.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ReadOnlySlice`1.Skip(System.Int32)">
            <summary>
                Bypasses a specified number of elements in the slice and then returns the remaining elements.
            </summary>
            <param name="length">The number of elements to skip before returning the remaining elements.</param>
            <returns>A <see cref="T:Avalonia.Utilities.ReadOnlySlice`1"/> that contains the elements that occur after the specified index in this slice.</returns>
        </member>
        <member name="M:Avalonia.Utilities.ReadOnlySlice`1.GetEnumerator">
            <summary>
            Returns an enumerator for the slice.
            </summary>
        </member>
        <member name="T:Avalonia.Utilities.ValueSpan`1">
            <summary>
            Pairing of value and positions sharing that value.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSpan`1.Start">
            <summary>
            Get's the start of the span.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSpan`1.Length">
            <summary>
            Get's the length of the span.
            </summary>
        </member>
        <member name="P:Avalonia.Utilities.ValueSpan`1.Value">
            <summary>
            Get's the value of the span.
            </summary>
        </member>
        <member name="T:Avalonia.Vector">
            <summary>
            Defines a vector.
            </summary>
        </member>
        <member name="F:Avalonia.Vector._x">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:Avalonia.Vector._y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="M:Avalonia.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Vector"/> structure.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="P:Avalonia.Vector.X">
            <summary>
            Gets the X component.
            </summary>
        </member>
        <member name="P:Avalonia.Vector.Y">
            <summary>
            Gets the Y component.
            </summary>
        </member>
        <member name="M:Avalonia.Vector.op_Explicit(Avalonia.Vector)~Avalonia.Point">
            <summary>
            Converts the <see cref="T:Avalonia.Vector"/> to a <see cref="T:Avalonia.Point"/>.
            </summary>
            <param name="a">The vector.</param>
        </member>
        <member name="M:Avalonia.Vector.op_Multiply(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Multiply(Avalonia.Vector,System.Double)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Multiply(System.Double,Avalonia.Vector)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Division(Avalonia.Vector,System.Double)">
            <summary>
            Scales a vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="scale">The divisor.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Parse(System.String)">
            <summary>
            Parses a <see cref="T:Avalonia.Vector"/> string.
            </summary>
            <param name="s">The string.</param>
            <returns>The <see cref="T:Avalonia.Vector"/>.</returns>
        </member>
        <member name="P:Avalonia.Vector.Length">
            <summary>
            Length of the vector.
            </summary>
        </member>
        <member name="P:Avalonia.Vector.SquaredLength">
            <summary>
            Squared Length of the vector.
            </summary>
        </member>
        <member name="M:Avalonia.Vector.op_UnaryNegation(Avalonia.Vector)">
            <summary>
            Negates a vector.
            </summary>
            <param name="a">The vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Addition(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the addition.</returns>
        </member>
        <member name="M:Avalonia.Vector.op_Subtraction(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>A vector that is the result of the subtraction.</returns>
        </member>
        <member name="M:Avalonia.Vector.Equals(Avalonia.Vector)">
            <summary>
            Check if two vectors are equal (bitwise).
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Vector.NearlyEquals(Avalonia.Vector)">
            <summary>
            Check if two vectors are nearly equal (numerically).
            </summary>
            <param name="other">The other vector.</param>
            <returns>True if vectors are nearly equal.</returns>
        </member>
        <member name="M:Avalonia.Vector.ToString">
            <summary>
            Returns the string representation of the vector.
            </summary>
            <returns>The string representation of the vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.WithX(System.Double)">
            <summary>
            Returns a new vector with the specified X component.
            </summary>
            <param name="x">The X component.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.WithY(System.Double)">
            <summary>
            Returns a new vector with the specified Y component.
            </summary>
            <param name="y">The Y component.</param>
            <returns>The new vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Normalize">
            <summary>
            Returns a normalized version of this vector.
            </summary>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Negate">
            <summary>
            Returns a negated version of this vector.
            </summary>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Dot(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Avalonia.Vector.Cross(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:Avalonia.Vector.Normalize(Avalonia.Vector)">
            <summary>
            Normalizes the given vector.
            </summary>
            <param name="vector">The vector</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Divide(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Divide(Avalonia.Vector,System.Double)">
            <summary>
            Divides the vector by the given scalar.
            </summary>
            <param name="vector">The vector</param>
            <param name="scalar">The scalar value</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Multiply(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Multiplies the first vector by the second.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Multiply(Avalonia.Vector,System.Double)">
            <summary>
            Multiplies the vector by the given scalar.
            </summary>
            <param name="vector">The vector</param>
            <param name="scalar">The scalar value</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Add(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Adds the second to the first vector
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Subtract(Avalonia.Vector,Avalonia.Vector)">
            <summary>
            Subtracts the second from the first vector
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Avalonia.Vector.Negate(Avalonia.Vector)">
            <summary>
            Negates the vector
            </summary>
            <param name="vector">The vector to negate.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="P:Avalonia.Vector.Zero">
            <summary>
            Returns the vector (0.0, 0.0).
            </summary>
        </member>
        <member name="P:Avalonia.Vector.One">
            <summary>
            Returns the vector (1.0, 1.0).
            </summary>
        </member>
        <member name="P:Avalonia.Vector.UnitX">
            <summary>
            Returns the vector (1.0, 0.0).
            </summary>
        </member>
        <member name="P:Avalonia.Vector.UnitY">
            <summary>
            Returns the vector (0.0, 1.0).
            </summary>
        </member>
        <member name="M:Avalonia.Vector.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Deconstructs the vector into its X and Y components.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
        </member>
        <member name="P:Avalonia.Vector.IsDefault">
            <summary>
            Gets a value indicating whether the X and Y components are zero.
            </summary>
        </member>
        <member name="T:Avalonia.Visual">
            <summary>
            Base class for controls that provides rendering and related visual properties.
            </summary>
            <remarks>
            The <see cref="T:Avalonia.Visual"/> class represents elements that have a visual on-screen
            representation and stores all the information needed for an 
            <see cref="T:Avalonia.Rendering.IRenderer"/> to render the control. To traverse the visual tree, use the
            extension methods defined in <see cref="T:Avalonia.VisualExtensions"/>.
            </remarks>
        </member>
        <member name="F:Avalonia.Visual.BoundsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.Bounds"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.ClipToBoundsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.ClipToBounds"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.ClipProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.Clip"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.IsVisibleProperty">
            <summary>
            Defines the <see cref="F:Avalonia.Visual.IsVisibleProperty"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.OpacityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.Opacity"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.OpacityMaskProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.OpacityMask"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.RenderTransformProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.RenderTransform"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.RenderTransformOriginProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.RenderTransformOrigin"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.VisualParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.VisualTree.IVisual.VisualParent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Visual.ZIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Visual.ZIndex"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Visual.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Visual"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Visual.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Visual"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Visual.AttachedToVisualTree">
            <summary>
            Raised when the control is attached to a rooted visual tree.
            </summary>
        </member>
        <member name="E:Avalonia.Visual.DetachedFromVisualTree">
            <summary>
            Raised when the control is detached from a rooted visual tree.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Bounds">
            <summary>
            Gets the bounds of the control relative to its parent.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.TransformedBounds">
            <summary>
            Gets the bounds of the control relative to the window, accounting for rendering transforms.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.ClipToBounds">
            <summary>
            Gets or sets a value indicating whether the control should be clipped to its bounds.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Clip">
            <summary>
            Gets or sets the geometry clip for this visual.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.IsEffectivelyVisible">
            <summary>
            Gets a value indicating whether this control and all its parents are visible.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.IsVisible">
            <summary>
            Gets or sets a value indicating whether this control is visible.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Opacity">
            <summary>
            Gets or sets the opacity of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.OpacityMask">
            <summary>
            Gets or sets the opacity mask of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.RenderTransform">
            <summary>
            Gets or sets the render transform of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.RenderTransformOrigin">
            <summary>
            Gets or sets the transform origin of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.ZIndex">
            <summary>
            Gets or sets the Z index of the control.
            </summary>
            <remarks>
            Controls with a higher <see cref="P:Avalonia.Visual.ZIndex"/> will appear in front of controls with
            a lower ZIndex. If two controls have the same ZIndex then the control that appears
            later in the containing element's children collection will appear on top.
            </remarks>
        </member>
        <member name="P:Avalonia.Visual.VisualChildren">
            <summary>
            Gets the control's child visuals.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.VisualRoot">
            <summary>
            Gets the root of the visual tree, if the control is attached to a visual tree.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Avalonia#VisualTree#IVisual#IsAttachedToVisualTree">
            <summary>
            Gets a value indicating whether this control is attached to a visual root.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Avalonia#VisualTree#IVisual#VisualChildren">
            <summary>
            Gets the control's child controls.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Avalonia#VisualTree#IVisual#VisualParent">
            <summary>
            Gets the control's parent visual.
            </summary>
        </member>
        <member name="P:Avalonia.Visual.Avalonia#VisualTree#IVisual#VisualRoot">
            <summary>
            Gets the root of the visual tree, if the control is attached to a visual tree.
            </summary>
        </member>
        <member name="M:Avalonia.Visual.InvalidateVisual">
            <summary>
            Invalidates the visual and queues a repaint.
            </summary>
        </member>
        <member name="M:Avalonia.Visual.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the visual to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Visual.AffectsRender(Avalonia.AvaloniaProperty[])">
            <summary>
            Indicates that a property change should cause <see cref="M:Avalonia.Visual.InvalidateVisual"/> to be
            called.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            This method should be called in a control's static constructor with each property
            on the control which when changed should cause a redraw. This is similar to WPF's
            FrameworkPropertyMetadata.AffectsRender flag.
            </remarks>
        </member>
        <member name="M:Avalonia.Visual.AffectsRender``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Indicates that a property change should cause <see cref="M:Avalonia.Visual.InvalidateVisual"/> to be
            called.
            </summary>
            <typeparam name="T">The control which the property affects.</typeparam>
            <param name="properties">The properties.</param>
            <remarks>
            This method should be called in a control's static constructor with each property
            on the control which when changed should cause a redraw. This is similar to WPF's
            FrameworkPropertyMetadata.AffectsRender flag.
            </remarks>
        </member>
        <member name="M:Avalonia.Visual.OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Calls the <see cref="M:Avalonia.Visual.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)"/> method 
            for this control and all of its visual descendants.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Calls the <see cref="M:Avalonia.Visual.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)"/> method 
            for this control and all of its visual descendants.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Called when the control is added to a rooted visual tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <summary>
            Called when the control is removed from a rooted visual tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.OnVisualParentChanged(Avalonia.VisualTree.IVisual,Avalonia.VisualTree.IVisual)">
            <summary>
            Called when the control's visual parent changes.
            </summary>
            <param name="oldParent">The old visual parent.</param>
            <param name="newParent">The new visual parent.</param>
        </member>
        <member name="M:Avalonia.Visual.RenderTransformChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when a visual's <see cref="P:Avalonia.Visual.RenderTransform"/> changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.ValidateVisualChild(Avalonia.VisualTree.IVisual)">
            <summary>
            Ensures a visual child is not null and not already parented.
            </summary>
            <param name="c">The visual child.</param>
        </member>
        <member name="M:Avalonia.Visual.ZIndexChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Visual.ZIndex"/> property changes on any control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.RenderTransformChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Visual.RenderTransform"/>'s <see cref="E:Avalonia.Media.Transform.Changed"/> event
            is fired.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Visual.SetVisualParent(Avalonia.Visual)">
            <summary>
            Sets the visual parent of the Visual.
            </summary>
            <param name="value">The visual parent.</param>
        </member>
        <member name="M:Avalonia.Visual.VisualChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Visual.VisualChildren"/> collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.VisualExtensions">
            <summary>
            Extension methods for <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
        </member>
        <member name="M:Avalonia.VisualExtensions.PointToClient(Avalonia.VisualTree.IVisual,Avalonia.PixelPoint)">
            <summary>
            Converts a point from screen to client coordinates.
            </summary>
            <param name="visual">The visual.</param>
            <param name="point">The point in screen coordinates.</param>
            <returns>The point in client coordinates.</returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.PointToScreen(Avalonia.VisualTree.IVisual,Avalonia.Point)">
            <summary>
            Converts a point from client to screen coordinates.
            </summary>
            <param name="visual">The visual.</param>
            <param name="point">The point in client coordinates.</param>
            <returns>The point in screen coordinates.</returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.TransformToVisual(Avalonia.VisualTree.IVisual,Avalonia.VisualTree.IVisual)">
            <summary>
            Returns a transform that transforms the visual's coordinates into the coordinates
            of the specified <paramref name="to"/>.
            </summary>
            <param name="from">The visual whose coordinates are to be transformed.</param>
            <param name="to">The visual to translate the coordinates to.</param>
            <returns>
            A <see cref="T:Avalonia.Matrix"/> containing the transform or null if the visuals don't share a
            common ancestor.
            </returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.TranslatePoint(Avalonia.VisualTree.IVisual,Avalonia.Point,Avalonia.VisualTree.IVisual)">
            <summary>
            Translates a point relative to this visual to coordinates that are relative to the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <param name="point">The point value, as relative to this visual.</param>
            <param name="relativeTo">The visual to translate the given point into.</param>
            <returns>
            A point value, now relative to the target visual rather than this source element, or null if the
            two elements have no common ancestor.
            </returns>
        </member>
        <member name="M:Avalonia.VisualExtensions.GetOffsetFrom(Avalonia.VisualTree.IVisual,Avalonia.VisualTree.IVisual)">
            <summary>
            Gets a transform from an ancestor to a descendent.
            </summary>
            <param name="ancestor">The ancestor visual.</param>
            <param name="visual">The visual.</param>
            <returns>The transform.</returns>
        </member>
        <member name="T:Avalonia.VisualTreeAttachmentEventArgs">
            <summary>
            Holds the event arguments for the <see cref="E:Avalonia.Visual.AttachedToVisualTree"/> and 
            <see cref="E:Avalonia.Visual.DetachedFromVisualTree"/> events.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTreeAttachmentEventArgs.#ctor(Avalonia.VisualTree.IVisual,Avalonia.Rendering.IRenderRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.VisualTreeAttachmentEventArgs"/> class.
            </summary>
            <param name="parent">The parent that the visual is being attached to or detached from.</param>
            <param name="root">The root visual.</param>
        </member>
        <member name="P:Avalonia.VisualTreeAttachmentEventArgs.Parent">
            <summary>
            Gets the parent that the visual is being attached to or detached from.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTreeAttachmentEventArgs.Root">
            <summary>
            Gets the root of the visual tree that the visual is being attached to or detached from.
            </summary>
        </member>
        <member name="T:Avalonia.VisualTree.IHostedVisualTreeRoot">
            <summary>
            Interface for controls that are at the root of a hosted visual tree, such as popups.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IHostedVisualTreeRoot.Host">
            <summary>
            Gets the visual tree host.
            </summary>
            <value>
            The visual tree host.
            </value>
        </member>
        <member name="T:Avalonia.VisualTree.IVisual">
            <summary>
            Represents control that has a visual on-screen representation.
            </summary>
            <remarks>
            The <see cref="T:Avalonia.VisualTree.IVisual"/> interface defines the interface required for a renderer to
            render a control. You should not usually need to reference this interface unless
            you are writing a renderer; instead use the extension methods defined in
            <see cref="T:Avalonia.VisualTree.VisualExtensions"/> to traverse the visual tree. This interface is
            implemented by <see cref="T:Avalonia.Visual"/>. It should not be necessary to implement it
            anywhere else.
            </remarks>
        </member>
        <member name="E:Avalonia.VisualTree.IVisual.AttachedToVisualTree">
            <summary>
            Raised when the control is attached to a rooted visual tree.
            </summary>
        </member>
        <member name="E:Avalonia.VisualTree.IVisual.DetachedFromVisualTree">
            <summary>
            Raised when the control is detached from a rooted visual tree.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.Bounds">
            <summary>
            Gets the bounds of the control relative to its parent.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.TransformedBounds">
            <summary>
            Gets the bounds of the control relative to the window, accounting for rendering transforms.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.ClipToBounds">
            <summary>
            Gets a value indicating whether the control should be clipped to its bounds.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.Clip">
            <summary>
            Gets or sets the geometry clip for this visual.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.IsAttachedToVisualTree">
            <summary>
            Gets a value indicating whether this control is attached to a visual root.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.IsEffectivelyVisible">
            <summary>
            Gets a value indicating whether this control and all its parents are visible.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.IsVisible">
            <summary>
            Gets or sets a value indicating whether this control is visible.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.Opacity">
            <summary>
            Gets or sets the opacity of the control.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.OpacityMask">
            <summary>
            Gets or sets the opacity mask for the control.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.RenderTransform">
            <summary>
            Gets or sets the render transform of the control.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.RenderTransformOrigin">
            <summary>
            Gets or sets the render transform origin of the control.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.VisualChildren">
            <summary>
            Gets the control's child visuals.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.VisualParent">
            <summary>
            Gets the control's parent visual.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.VisualRoot">
            <summary>
            Gets the root of the visual tree, if the control is attached to a visual tree.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisual.ZIndex">
            <summary>
            Gets or sets the Z index of the node.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTree.IVisual.InvalidateVisual">
            <summary>
            Invalidates the visual and queues a repaint.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTree.IVisual.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the control to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Avalonia.VisualTree.IVisualTreeHost">
            <summary>
            Interface for controls that host their own separate visual tree, such as popups.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.IVisualTreeHost.Root">
            <summary>
            Gets the root of the hosted visual tree.
            </summary>
            <value>
            The root of the hosted visual tree.
            </value>
        </member>
        <member name="P:Avalonia.VisualTree.IVisualWithRoundRectClip.ClipToBoundsRadius">
            <summary>
            Gets a value indicating the corner radius of control's clip bounds
            </summary>
        </member>
        <member name="T:Avalonia.VisualTree.TransformedBounds">
            <summary>
            Holds information about the bounds of a control, together with a transform and a clip.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTree.TransformedBounds.#ctor(Avalonia.Rect,Avalonia.Rect,Avalonia.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.VisualTree.TransformedBounds"/> struct.
            </summary>
            <param name="bounds">The control's bounds.</param>
            <param name="clip">The control's clip rectangle.</param>
            <param name="transform">The control's transform.</param>
        </member>
        <member name="P:Avalonia.VisualTree.TransformedBounds.Bounds">
            <summary>
            Gets the control's bounds in its local coordinate space.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.TransformedBounds.Clip">
            <summary>
            Gets the control's clip rectangle in global coordinate space.
            </summary>
        </member>
        <member name="P:Avalonia.VisualTree.TransformedBounds.Transform">
            <summary>
            Gets the transform from local to global coordinate space.
            </summary>
        </member>
        <member name="T:Avalonia.VisualTree.VisualExtensions">
            <summary>
            Provides extension methods for working with the visual tree.
            </summary>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.CalculateDistanceFromAncestor(Avalonia.VisualTree.IVisual,Avalonia.VisualTree.IVisual)">
            <summary>
            Calculates the distance from a visual's ancestor.
            </summary>
            <param name="visual">The visual.</param>
            <param name="ancestor">The ancestor visual.</param>
            <returns>
            The number of steps from the visual to the ancestor or -1 if
            <paramref name="visual"/> is not a descendent of <paramref name="ancestor"/>.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.CalculateDistanceFromRoot(Avalonia.VisualTree.IVisual)">
            <summary>
            Calculates the distance from a visual's root.
            </summary>
            <param name="visual">The visual.</param>
            <returns>
            The number of steps from the visual to the root.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.FindCommonVisualAncestor(Avalonia.VisualTree.IVisual,Avalonia.VisualTree.IVisual)">
            <summary>
            Tries to get the first common ancestor of two visuals.
            </summary>
            <param name="visual">The first visual.</param>
            <param name="target">The second visual.</param>
            <returns>The common ancestor, or null if not found.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualAncestors(Avalonia.VisualTree.IVisual)">
            <summary>
            Enumerates the ancestors of an <see cref="T:Avalonia.VisualTree.IVisual"/> in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual's ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.FindAncestorOfType``1(Avalonia.VisualTree.IVisual,System.Boolean)">
            <summary>
            Finds first ancestor of given type.
            </summary>
            <typeparam name="T">Ancestor type.</typeparam>
            <param name="visual">The visual.</param>
            <param name="includeSelf">If given visual should be included in search.</param>
            <returns>First ancestor of given type.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.FindDescendantOfType``1(Avalonia.VisualTree.IVisual,System.Boolean)">
            <summary>
            Finds first descendant of given type.
            </summary>
            <typeparam name="T">Descendant type.</typeparam>
            <param name="visual">The visual.</param>
            <param name="includeSelf">If given visual should be included in search.</param>
            <returns>First descendant of given type.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetSelfAndVisualAncestors(Avalonia.VisualTree.IVisual)">
            <summary>
            Enumerates an <see cref="T:Avalonia.VisualTree.IVisual"/> and its ancestors in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual and its ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualAt(Avalonia.VisualTree.IVisual,Avalonia.Point)">
            <summary>
            Gets the first visual in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <returns>The visual at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualAt(Avalonia.VisualTree.IVisual,Avalonia.Point,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <summary>
            Gets the first visual in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visual at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualsAt(Avalonia.VisualTree.IVisual,Avalonia.Point)">
            <summary>
            Enumerates the visible visuals in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <returns>The visuals at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualsAt(Avalonia.VisualTree.IVisual,Avalonia.Point,System.Func{Avalonia.VisualTree.IVisual,System.Boolean})">
            <summary>
            Enumerates the visuals in the visual tree whose bounds contain a point.
            </summary>
            <param name="visual">The root visual to test.</param>
            <param name="p">The point.</param>
            <param name="filter">
            A filter predicate. If the predicate returns false then the visual and all its
            children will be excluded from the results.
            </param>
            <returns>The visuals at the requested point.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualChildren(Avalonia.VisualTree.IVisual)">
            <summary>
            Enumerates the children of an <see cref="T:Avalonia.VisualTree.IVisual"/> in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual children.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualDescendants(Avalonia.VisualTree.IVisual)">
            <summary>
            Enumerates the descendants of an <see cref="T:Avalonia.VisualTree.IVisual"/> in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual's ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetSelfAndVisualDescendants(Avalonia.VisualTree.IVisual)">
            <summary>
            Enumerates an <see cref="T:Avalonia.VisualTree.IVisual"/> and its descendants in the visual tree.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The visual and its ancestors.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualParent(Avalonia.VisualTree.IVisual)">
            <summary>
            Gets the visual parent of an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The parent, or null if the visual is unparented.</returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualParent``1(Avalonia.VisualTree.IVisual)">
            <summary>
            Gets the visual parent of an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
            <typeparam name="T">The type of the visual parent.</typeparam>
            <param name="visual">The visual.</param>
            <returns>
            The parent, or null if the visual is unparented or its parent is not of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.GetVisualRoot(Avalonia.VisualTree.IVisual)">
            <summary>
            Gets the root visual for an <see cref="T:Avalonia.VisualTree.IVisual"/>.
            </summary>
            <param name="visual">The visual.</param>
            <returns>
            The root visual or null if the visual is not rooted.
            </returns>
        </member>
        <member name="M:Avalonia.VisualTree.VisualExtensions.IsVisualAncestorOf(Avalonia.VisualTree.IVisual,Avalonia.VisualTree.IVisual)">
            <summary>
            Tests whether an <see cref="T:Avalonia.VisualTree.IVisual"/> is an ancestor of another visual.
            </summary>
            <param name="visual">The visual.</param>
            <param name="target">The potential descendant.</param>
            <returns>
            True if <paramref name="visual"/> is an ancestor of <paramref name="target"/>;
            otherwise false.
            </returns>
        </member>
    </members>
</doc>
